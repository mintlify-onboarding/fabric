    {
        "openapi": "3.0.1",
        "info": {
            "title": "",
            "description": "",
            "termsOfService": "https://fabric.inc/terms-of-use",
            "contact": {
                "name": "fabric Support Team",
                "email": "support@fabric.inc"
            },
            "license": {
                "name": "fabric API License",
                "url": "https://fabric.inc/api-license"
            },
            "version": "3.0.0",
            "x-audience": "external-public"
        },
        "externalDocs": {
            "description": "Find out more about fabric Orders (also called OMS)",
            "url": "https://developer.fabric.inc/v3/docs/orders-overview"
        },
        "servers": [
            {
                "url": "https://api.fabric.inc/v3",
                "description": "Production"
            }
        ],
        "tags": [
            {
                "name": "Allocations",
                "description": "fabric **Allocations** API lets retailers manage allocation for existing orders. Allocations serve as records of the locations from which an order is fulfilled. The user of the Allocation service is a Warehouse Management Service (WMS) or Point of Sale Service (POS)."
            },
            {
                "name": "Backorders Preorders",
                "description": "fabric **Backorders and Preorders** refer to orders placed for products not currently available for shipment or sale. Backorders are orders for out-of-stock products that will be shipped to customers as soon as they are available for shipment. Preorders are orders for products that are not yet available in the market, but will be launched for sale. Customers can preorder products, and the products will be shipped when they are available for sale. fabric's Backorders & Preorders API supports multi-tenant service."
            },
            {
                "name": "Exports",
                "description": "fabric **Exports** API supports exporting data of different modules such as Orders, Locations, Allocations, Inventory, Invoices, Networks, Shipping_Methods, and Aggregated_Networks. fabric's Exports API lets you export module-specific data (saved in JSON format in the database) to a zip file. These zip files contain different CSV files where:\n-   Each field of a single JSON schema is a file header (also called column title) in the CSV file\n-   Each item of the JSON schema is a row in the CSV file\n<p>The data, in the database, are arranged as nested objects and arrays which are complex to use. fabric's Exports API simplifies the data of a single object by segregating them into multiple CSV files (by specific identifiers) for ease of use.\n<p>The following are the module (fabric service) names and its generated CSV files:<p>1. Orders: order (exported by item), discount, logs, notes, payments, shipInfo<br>2. Allocations: allocation, logs<br>3. Shipments: shipment<br>4. Shipping_Methods: shipping_methods<br>5.  Locations: location<br>6.  Invoices: invoice, appeasements, discounts, payments<br>7. Inventory: inventory."
            },
            {
                "name": "Imports",
                "description": "fabric **Imports** API supports importing data of different modules such as Orders,  Invoices, and Shipments.<p>fabric's **Imports** API lets you import module-specific bulk JSON in text file format in order to save these documents in fabric's databases. Each row in an uploaded text file represents a single JSON schema."
            },
            {
                "name": "Invoices",
                "description": "fabric **Invoices** API helps in generating invoices that can be used by any third party system for order fulfillment operation."
            },
            {
                "name": "Shopping Lists",
                "description": "fabric **Lists** API is a multi-tenant service that allows your shoppers to manage their shopping lists for future purchases. Shoppers can create lists, add items to lists, update lists and list items, as well as delete unwanted lists and items. Shopping lists are a popular e-commerce feature allowing shoppers to save desired products for future purchase. It not only helps to minimize shopping cart abandonment but also provides valuable insights into product popularity. In addition, shoppers who maintain shopping lists can be engaged in targeted marketing campaigns, enhancing customer engagement and satisfaction."
            },
            {
                "name": "Shopping List Items",
                "description": "These endpoints let your shoppers create and manage items in shopping lists."
            },
            {
                "name": "Notifications",
                "description": "fabric **Notifications** API enables you (Storefronts) to resend notifications to customers for specific order-related events, such as confirmation, status updates, cancellations, and more. it is also used to get notification acknowledgements from external services."
            },
            {
                "name": "Appeasements",
                "description": "These endpoints help create appeasement requests."
            },
            {
                "name": "Credits",
                "description": "Credits are refunds to customers, often in the form of gift cards or credit notes, when customers have made payments with cash or a card that has subsequently expired. Credits are provided during order returns and appeasements. Use these endpoints to create and manage credits."
            },
            {
                "name": "Cancellations",
                "description": "These endpoints check eligibility of order cancellation requests and if eligible, processes order cancellation."
            },
            {
                "name": "Tracking",
                "description": "These endpoints track orders."
            },
            {
                "name": "Orders",
                "description": "These endpoints create orders, update pickup details (for BOPIS scenarios) and get order details."
            },
            {
                "name": "Returns",
                "description": "These endpoints check eligibility of order return or exchanges requests and, if eligible, processes order return or exchanges."
            },
            {
                "name": "Payments",
                "description": "These endpoints update payment status."
            },
            {
                "name": "Frauds",
                "description": "These endpoints deal with potential fraud orders."
            },
            {
                "name": "Shipments",
                "description": "fabric **Shipments** API is a multi-tenant service that enables you to manage shipments for existing 'Allocations.' Shipments serve as records of the locations from which an order was fulfilled. Typical user of fabric Shipments service is a Warehouse management service or Point of Sale service. <p> **Note**: Shipments API relies on the Allocation service to send allocation details to external merchant systems after an order is placed. Allocation is the prerequisite for using Shipments API."
            },
            {
                "name": "Shipping Methods",
                "description": "fabric **Shipping Methods** API is a multi-tenant service that enables you to manage carriers and expose shipping methods on your Storefront. With the Shipping Methods API, you can configure shipping methods and associate items to specific shipping methods. When shoppers browse through your e-commerce platform (website or app), they'll see the items with their shipping methods, which gives an estimate of when they can get the item."
            },
            {
                "name": "Shipping Method Items",
                "description": "These endpoints perform CRUD operations on items tagged to the shipping methods"
            },
            {
                "name": "Webhooks",
                "description": "fabric **Webhooks** API send real-time notifications to the target URL when a subscribed event occurs at source. fabric's Webhooks API, for multi-tenant service, let merchants subscribe to [various events](https://developer.fabric.inc/reference/oms-developer-guide-webhook-events) of fabric Orders (also called OMS). When the subscribed event occurs at source (fabric Orders), fabric sends a notification to the configured target URL."
            }
        ],
        "paths": {
            "/allocations/search": {
                "post": {
                    "tags": [
                        "Allocations"
                    ],
                    "summary": "Search for allocations by query",
                    "description": "Search for inventory allocations based on the matching filter criteria.",
                    "operationId": "getAllocationByQuery",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to be skipped before returning all records. Default is `0` when no value is specified.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/allocationSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/allocationSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/allocations/allocation-request-id/{allocationRequestId}": {
                "put": {
                    "tags": [
                        "Allocations"
                    ],
                    "summary": "Update allocation or initiate reallocation",
                    "description": "Update allocation or initiate reallocation of the order by `allocationRequestId`.",
                    "operationId": "updateAllocatedOrder",
                    "parameters": [
                        {
                            "name": "allocationRequestId",
                            "in": "path",
                            "description": "Allocation request ID is a 24-character allocation ID configured by the merchant",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/allocationRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/allocationResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Allocation not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/allocations/{allocationId}": {
                "get": {
                    "tags": [
                        "Allocations"
                    ],
                    "summary": "Get allocation by ID",
                    "description": "Get allocation details by allocation ID. The allocation ID can be obtained using the `/allocations/search` endpoint or stored externally, for example, in the WMS order database.",
                    "operationId": "getAllocation",
                    "parameters": [
                        {
                            "name": "allocationId",
                            "in": "path",
                            "description": "24-character system-generated allocation ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/allocationResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Allocation not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Allocation details are not found for the given allocation ID",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/backorders-preorders/{id}/actions/save-delay-consent": {
                "post": {
                    "tags": [
                        "Backorders Preorders"
                    ],
                    "summary": "Record customer agreement to delay shipment",
                    "description": "Record customer's agreement to delay the shipment.",
                    "operationId": "saveDelayConsent",
                    "parameters": [
                        {
                            "name": "id",
                            "in": "path",
                            "description": "Unique ID for backorder or preorder",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "63ec576ddaa2544b2dd94684"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/saveDelayConsentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/backOrderPreOrderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Reservation not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/backorders-preorders/search": {
                "post": {
                    "tags": [
                        "Backorders Preorders"
                    ],
                    "summary": "Search for backorders or preorders by query",
                    "description": "Search for the backorder or preorder reservations based on filter criteria.",
                    "operationId": "searchReservations",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to be skipped before returning all records. Default is `0` when no value is specified.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/backOrderPreOrderSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/backOrderPreOrderSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/backorders-preorders/{id}": {
                "get": {
                    "tags": [
                        "Backorders Preorders"
                    ],
                    "summary": "Get backorder or preorder details by ID",
                    "description": "Get backorder or preorder reservation details by ID.",
                    "operationId": "getReservation",
                    "parameters": [
                        {
                            "name": "id",
                            "in": "path",
                            "description": "Backorder or preorder ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "63ec576ddaa2544b2dd94684"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/backOrderPreOrderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Reservation not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-exports": {
                "post": {
                    "tags": [
                        "Exports"
                    ],
                    "summary": "Export data by query",
                    "description": "Initiate data export by the given filter criteria.",
                    "operationId": "exportData",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exportRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "202": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/exportLog"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-exports/search": {
                "post": {
                    "tags": [
                        "Exports"
                    ],
                    "summary": "Get export jobs by query",
                    "description": "Get a paginated list of all the export jobs based on the filter criteria specified in the request body.",
                    "operationId": "searchExportJobs",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to be skipped before returning all records. Default is `0` when no value is specified.",
                            "schema": {
                                "type": "number",
                                "example": 2,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "type": "number",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/exportHistorySearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/exportSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-exports/module-headers/{module}": {
                "get": {
                    "tags": [
                        "Exports"
                    ],
                    "summary": "Get file headers by module",
                    "description": "Get the list of file headers for a given module.<p>**Note:** File headers are basically the column headers or titles of the exported document.",
                    "operationId": "getFileHeaders",
                    "parameters": [
                        {
                            "name": "module",
                            "in": "path",
                            "description": "Module for which file headers are returned. Accepted values: ORDER | LOCATION | ALLOCATION | INVENTORY | INVOICE| SHIPMENT | NETWORK | SHIPPING_METHODS | AGGREGATED_NETWORK",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "ORDER"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/exportHeadersResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-exports/{exportId}": {
                "get": {
                    "tags": [
                        "Exports"
                    ],
                    "summary": "Get export job by exportId",
                    "description": "Get details of a specific export job by specified `exportId`.",
                    "operationId": "getExportStatus",
                    "parameters": [
                        {
                            "name": "exportId",
                            "in": "path",
                            "description": "Unique export ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "order_2022-11-25T17-25-38-417225543Z"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/exportLog"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "ExportId provided is incorrect",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "ExportId does not exist",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-imports/search": {
                "post": {
                    "tags": [
                        "Imports"
                    ],
                    "summary": "Get uploaded files that match specified criteria",
                    "description": "Get uploaded files that match specified criteria. Returned as paginated records.",
                    "operationId": "searchImports",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "number",
                                "example": 20,
                                "default": 0
                            },
                            "example": 20
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "type": "number",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/importSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/searchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-imports/{importId}": {
                "get": {
                    "tags": [
                        "Imports"
                    ],
                    "summary": "Get uploaded file status and details",
                    "description": "Get uploaded file status and details by specifying `importId`.",
                    "operationId": "getImportStatus",
                    "parameters": [
                        {
                            "name": "importId",
                            "in": "path",
                            "description": "Upload file document's unique ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/importStatusResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-imports": {
                "post": {
                    "tags": [
                        "Imports"
                    ],
                    "summary": "Upload bulk file to import data",
                    "description": "Upload bulk file by specifying file name. Successfully uploading the file triggers the import process, which is an event-driven extraction of the file's data to update the respective resource's system.",
                    "operationId": "createImport",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/importRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "202": {
                            "description": "Accepted",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/importResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/invoices/{invoiceId}/acknowledge": {
                "post": {
                    "tags": [
                        "Invoices"
                    ],
                    "summary": "Acknowledge financial transaction",
                    "description": "When an order is created or processed, fabric generates invoice and sends it to merchants or third-party systems for further financial processing of the order. This endpoint lets merchants acknowledge that they have received the invoice with payment information.",
                    "operationId": "acknowledgeFinancialPosting",
                    "parameters": [
                        {
                            "name": "invoiceId",
                            "in": "path",
                            "description": "24 character system-generated invoice ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "63bec1244258060b3d027617"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/financialPostingAcknowledgeRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/financialPostingAcknowledgeResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/invoices/{invoiceId}": {
                "get": {
                    "tags": [
                        "Invoices"
                    ],
                    "summary": "Get invoice by ID",
                    "description": "Get details of an invoice by invoice ID.",
                    "operationId": "getInvoice",
                    "parameters": [
                        {
                            "name": "invoiceId",
                            "in": "path",
                            "description": "System-generated invoice ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "63bec1244258060b3d027617"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/invoiceResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/invoices/search": {
                "post": {
                    "tags": [
                        "Invoices"
                    ],
                    "summary": "Search for invoices",
                    "description": "Search for invoices by matching filter criteria.",
                    "operationId": "searchInvoices",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning all records. Default is `0` if no value is specified.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records returned per page. Default is `10` if no value is specified.",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/invoiceSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/invoiceSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists": {
                "post": {
                    "tags": [
                        "Shopping Lists"
                    ],
                    "summary": "Create shopping list",
                    "description": "Shoppers often choose to save their desired products in shopping lists to purchase later when they are ready or to take advantage of discounts when they are available. <p> This endpoint creates a new shopping list. The response includes a list ID, which is required for subsequent calls to get, update, or delete this shopping list.<p> **Note**: Items cannot be added when the shopping list is initially created. To add items, use the *Add items to list* endpoint - `POST /lists/{listId}/actions/add-or-update-list-items`.",
                    "operationId": "createList",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "List not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/users/{userId}": {
                "get": {
                    "tags": [
                        "Shopping Lists"
                    ],
                    "summary": "Get shopping lists of a user",
                    "description": "Shoppers may want to periodically review their shopping lists and ensure they are up to date. <p> This endpoint gets a paginated response of shopping lists by user ID. For each list, you can view user ID, list ID, list name, type, notes, custom attributes (if any), as well as time of list creation and update. <p> **Note**: <br> 1. You can refine the results by specifying `offset` and `limit`. When they are not specified, you will get up to 10 records. <br>2. To view items in a list, refer to *Get lists with items* endpoint - `POST /lists/users/{userId}/actions/get-list-details-with-items`.",
                    "operationId": "getListsByUserId",
                    "parameters": [
                        {
                            "name": "userId",
                            "in": "path",
                            "description": "Unique identifier of logged-in user, from Identity service",
                            "required": true,
                            "schema": {
                                "type": "string",
                                "example": "user1"
                            },
                            "example": "user1"
                        },
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/{listId}/actions/add-or-update-list-items": {
                "post": {
                    "tags": [
                        "Shopping List Items"
                    ],
                    "summary": "Add or update items in a shopping list",
                    "description": "Once a shopping list is created, shoppers can add new item to it or update existing ones. <p> This endpoint is used to add and update items in a list. <p> If the specified `sku` is not in the list, a new item is added to the list with the given `quantity`. If the specified `sku` is already in the list, its current quantity is updated based on the given `incQuantity`. <p> **Note**: At least one item must be in the request body.",
                    "operationId": "createOrUpdateListDetails",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createListDetailsRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/listItemResponse"
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "List not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/users/{userId}/actions/get-list-details-with-items": {
                "get": {
                    "tags": [
                        "Shopping List Items"
                    ],
                    "summary": "Get shopping lists of a user along with associated items",
                    "description": "Shoppers may periodically review their shopping lists and their associated items. <p> This endpoint gets shopping lists and associated items. For each list, you can view list ID, list name, user ID, list type, notes, custom attributes, items count, times of list creation and list update, as well as item details.",
                    "operationId": "getListsWithItemsByUserId",
                    "parameters": [
                        {
                            "name": "userId",
                            "in": "path",
                            "description": "Unique identifier of logged-in user, from Identity service",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "user1"
                        },
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listDetails"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/{listId}/actions/delete-list-items": {
                "post": {
                    "tags": [
                        "Shopping List Items"
                    ],
                    "summary": "Delete items from shopping list",
                    "description": "Over time, shoppers' preferences may change, or they might have added an item to their shopping list by mistake. <p> This endpoint lets your shopper remove one or more products from the specified shopping list.",
                    "operationId": "deleteListItems",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteListDetailsRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/deleteListDetailsResponse"
                                    }
                                }
                            }
                        },
                        "207": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/deleteListDetailsResponse"
                                    },
                                    "example": {
                                        "message": "SKU does not exist for user ID 179089.",
                                        "type": "NOT_FOUND"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/{listId}/actions/get-list-details": {
                "get": {
                    "tags": [
                        "Shopping List Items"
                    ],
                    "summary": "Get shopping list and its items",
                    "description": "By specifying list ID, you can get shopping list details along with its items.",
                    "operationId": "getListWithItems",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listWithItemResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/{listId}/list-items": {
                "get": {
                    "tags": [
                        "Shopping List Items"
                    ],
                    "summary": "Get shopping list items by list ID",
                    "description": "Shoppers may periodically review their shopping list to check for discounts or when they are ready to make a purchase. <p> This endpoint gets a paginated list of items by list ID. You can refine the results by specifying `offset and `limit`. When they are not specified, you will get up to 10 records.",
                    "operationId": "getItemsForListId",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listItemsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/lists/{listId}": {
                "get": {
                    "tags": [
                        "Shopping Lists"
                    ],
                    "summary": "Get a shopping list by ID",
                    "description": "Get details of a shopping list by ID, along with the number of items in it.",
                    "operationId": "getList",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "put": {
                    "tags": [
                        "Shopping Lists"
                    ],
                    "summary": "Update a shopping list by ID",
                    "description": "Shoppers like to update their shopping lists and keep them relevant. <p> By specifying list ID, this endpoint lets your shoppers update their shopping list details such as list name, list type, notes, and custom attributes.",
                    "operationId": "updateList",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Shopping Lists"
                    ],
                    "summary": "Delete a shopping list by ID",
                    "description": "Shoppers need to remove unwanted or irrelevant shopping lists. <p> With this endpoint, they can delete a list by list ID.",
                    "operationId": "deleteList",
                    "parameters": [
                        {
                            "name": "listId",
                            "in": "path",
                            "description": "24-character system-generated shopping list ID returned in the response of *Create list* endpoint - `POST /lists`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/listResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Object not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-notifications/actions/resend": {
                "post": {
                    "tags": [
                        "Notifications"
                    ],
                    "summary": "Resend notifications",
                    "description": "When an order is placed, the first notification is automatically sent to shopper. If the first notification is not delivered for reasons such as incorrect email or server issues, this endpoint resends notification for specific events.",
                    "operationId": "resendNotification",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resendNotificationRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/notificationResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "No resource found for the given ID",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-notifications/acknowledge": {
                "post": {
                    "tags": [
                        "Notifications"
                    ],
                    "summary": "Get acknowledgment receipt for notification",
                    "description": "This endpoint gets notification acknowledgment from external service.",
                    "operationId": "acknowledgeNotification",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/acknowledgmentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "No resource found for the given ID",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders": {
                "post": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Create new order",
                    "description": "This endpoint creates a new order in the fabric Orders (OMS) system, regardless of whether it originates from fabric CnC service or an external system. The response includes an order ID, which is required for subsequent calls such as updating pickup information, getting order details, verifying eligibility for order cancellations, returns, exchanges, as well as creating appeasements, and processing order returns, cancellations, and exchanges.",
                    "operationId": "createOrder",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createOrderRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/ship-info/{shipToId}/pickup": {
                "put": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Updates order pick-up details",
                    "description": "Customers can choose to either have their order delivered to them or opt to pick up from a store or warehouse. In a Buy Online Pickup in Store (BOPIS) scenario, there may be situations when the primary pickup person has changed. <p> This endpoint allows for the updating pickup person details in BOPIS, ensuring that the most up-to-date information is available.",
                    "operationId": "updatePickInfo",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "name": "shipToId",
                            "in": "path",
                            "description": "Unique ID for the given `shipInfo`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/pickupRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}": {
                "get": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Get order by order ID",
                    "description": "As a merchant, you may need to review or monitor an order to answer customer inquiries, resolve a complaint, or for analytics and reporting. <p> With this endpoint, you can get order details by order ID. <p> **Note**: If you do not have the order ID, use the corresponding order number-based endpoint - `GET /orders/order-number/{orderNumber}`",
                    "operationId": "getOrder",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order endpoint - `POST /orders`.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order with orderId is not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}": {
                "get": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Get order by order number",
                    "description": "As a merchant, you may need to review or monitor an order to answer customer inquiries, resolve a complaint or for analytics and reporting. <p> With this endpoint, you can get order details by order number. <p> **Note**: If you do not have the order number, use the corresponding order ID-based endpoint - `GET /orders/{orderId}`.",
                    "operationId": "getOrderByNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "Order-320000001"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order with orderNumber is not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/update-items-shipping-info": {
                "post": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Update Shipping information for an existing order by order ID",
                    "description": "This endpoint updates the shipping information for items in an existing order. Please note the shipping info will only be updated for the eligible items listed in the request.",
                    "operationId": "updateItemsShippingInfoByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order endpoint - `POST /orders`.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updateItemsShipInfoRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "Updated",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/update-items-shipping-info": {
                "post": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Update Shipping information for an existing order by order number",
                    "description": "This endpoint updates the shipping information for items in an existing order. Please note the shipping info will only be updated for the eligible items listed in the request.",
                    "operationId": "updateItemsShippingInfoByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updateItemsShipInfoRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "Updated",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/check-return-eligibility": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Get return eligibility by order number",
                    "description": "Customers may want to return one or more items because they do not meet the expectations or customer has changed their mind. Before processing return, it's crucial to verify whether the items are eligible for return as per your policy <p> This endpoint gets the eligibility of return by order number. You can additionally specify `lineItemId` to get the eligibility of a single line item. <p> **Note**: If you do not have the order number, use the corresponding order ID-based endpoint - `POST /orders/{orderId}/actions/check-return-eligibility`.",
                    "operationId": "getOrderReturnsEligibilityByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "Order-320000001"
                        },
                        {
                            "name": "policyName",
                            "in": "query",
                            "description": "Merchant-defined return policy. When omitted, the default policy is considered.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "RETURNS_POLICY_1"
                        },
                        {
                            "name": "lineItemId",
                            "in": "query",
                            "description": "Line item ID. If specified, you'll get the return eligibility of the given line item ID. If omitted, you'll get the return eligibility of each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/check-return-eligibility": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Get eligibility of returns for items in an order by order ID",
                    "description": "Customers may want to return one or more items because they do not meet the expectations or customer has changed their mind. Before processing return, it's crucial to verify whether the items are eligible for return as per your policy <p> This endpoint gets the eligibility of your return by order number. You can additionally specify `lineItemId` to get the eligibility of a single line item. <p> **Note**: If you do not have the order ID, use the corresponding order number-based endpoint - `POST /orders/order-number/{orderNumber}/actions/check-return-eligibility`.",
                    "operationId": "getOrderReturnsEligibilityByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "name": "policyName",
                            "in": "query",
                            "description": "Merchant-defined return policy. When omitted, the default policy is considered.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "RETURNS_POLICY_1"
                        },
                        {
                            "name": "lineItemId",
                            "in": "query",
                            "description": "Line item ID. If specified, gets the return eligibility of the given line item ID. If omitted, gets the return eligibility of each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/check-exchange-eligibility": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Get order exchange eligibility by order ID",
                    "description": "Customers may want exchange an item because of size, color, or style preferences. Before processing exchange, it's crucial to verify whether the item is eligible for exchange as per your policy. <p> This endpoint gets the eligibility of exchange request by order number. You can additionally specify `lineItemId` to get eligibility of a specific item.<p> **Note**: If you do not have the order ID, but have the order number, use the order number-based endpoint - `POST /orders/order-number/{orderNumber}/actions/check-exchange-eligibility`.",
                    "operationId": "getOrderExchangeEligibilityByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "name": "policyName",
                            "in": "query",
                            "description": "Merchant-defined exchange policy. When omitted, the default policy is considered.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "RETURNS_POLICY_1"
                        },
                        {
                            "name": "lineItemId",
                            "in": "query",
                            "description": "Line item ID. If specified, gets exchange eligibility of the given line item ID. If omitted, gets exchange eligibility of each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62f3dfc438bcab1951be0a19"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order with orderId is not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/check-exchange-eligibility": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Get order exchange eligibility by order number",
                    "description": "Customers may want exchange an item because of size, fit, color, or style preferences. Before processing exchange, it's crucial to verify whether the item is eligible for exchange as per your policy. <p> This endpoint gets the exchange eligibility by order number. You can additionally specify `lineItemId` to get eligibility for a specific item.<p> **Note**: If you do not have the order number, but have the order ID, use the order ID-based endpoint - `POST /orders/{orderId}/actions/check-exchange-eligibility`.",
                    "operationId": "getOrderExchangeEligibilityByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "Order-320000001"
                        },
                        {
                            "name": "policyName",
                            "in": "query",
                            "description": "Merchant-defined exchange policy. When omitted, the default policy is considered.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "RETURNS_POLICY_1"
                        },
                        {
                            "name": "lineItemId",
                            "in": "query",
                            "description": "Line item ID. If specified, gets exchange eligibility of the given line item. If omitted, gets exchange eligibility of each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62f3dfc438bcab1951be0a19"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order with <orderId> is not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/check-cancel-eligibility": {
                "post": {
                    "tags": [
                        "Cancellations"
                    ],
                    "summary": "Get order cancellation eligibility by order ID",
                    "description": "Either customer may initiate cancellation due to an incorrect order placement or as a merchant, you may initiate cancellation due to product unavailability, pricing errors, payment failure, or shipping restrictions. Before processing cancellation, it's crucial to determine the eligibility of the cancellation request. <p> This endpoint gets the eligibility of order cancellation by order ID. You can additionally specify `lineItemIds` to get the eligibility of specific line items. <p> **Note**: If you do not have order ID, use the corresponding order number-based endpoint -`POST /orders/order-number/{orderNumber}/actions/check-exchange-eligibility`.",
                    "operationId": "getCancelOrderEligibility",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "name": "policyName",
                            "in": "query",
                            "description": "Merchant-defined cancellation policy. When omitted, the default policy is considered.",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "lineItemIds",
                            "in": "query",
                            "description": "Line item IDs. If specified, gets eligibility of exchange for the given line items. If omitted, gets eligibility of exchange for each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/check-cancel-eligibility": {
                "post": {
                    "tags": [
                        "Cancellations"
                    ],
                    "summary": "Get order cancellation eligibility by order number",
                    "description": "Either customer may initiate cancellation due to an incorrect order placement or as a merchant, you may initiate cancellation due to product unavailability, pricing errors, payment failure, or shipping restrictions. Before processing cancellation, it's crucial to determine the eligibility of the cancellation request. <p> This endpoint gets the eligibility of the cancellation request by order number. You can additionally specify `lineItemIds` to get the eligibility of specific line items. <p> **Note**: If you do not have order number, use the corresponding order ID-based endpoint - `/orders/{orderId}/actions/check-cancel-eligibility`.",
                    "operationId": "getCancelOrderEligibilityByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "name": "policyName",
                            "description": "Merchant-defined cancellation policy. When omitted, the default policy is considered.",
                            "in": "query",
                            "required": false,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "lineItemIds",
                            "in": "query",
                            "description": "Line item IDs. If specified, you'll get cancellation eligibility of the given line items. If omitted, you'll get cancellation eligibility of each item in the order.",
                            "required": false,
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/eligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/cancel": {
                "post": {
                    "tags": [
                        "Cancellations"
                    ],
                    "summary": "Cancel order by order number",
                    "description": "When customer's order cancellation request is determined to be eligible, this endpoint processes the cancellation by order number. <p> **Note**: If you do not have order number, use the corresponding order ID-based endpoint - `POST /orders/{orderId}/actions/cancel`.",
                    "operationId": "cancelOrderByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCancellationRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "412": {
                            "description": "Precondition failed",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order cannot be cancelled as there is no line item available for cancellation",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/cancel": {
                "post": {
                    "tags": [
                        "Cancellations"
                    ],
                    "summary": "Cancel order by order ID",
                    "description": "When customer's order cancellation request is determined to be eligible, this endpoint processes the cancellation by order ID. <p> **Note**: If you do not have the order number, use the corresponding order number-based endpoint - `POST /orders/order-number/{orderNumber}/actions/cancel`.",
                    "operationId": "cancelOrder",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCancellationRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "412": {
                            "description": "Precondition failed",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order cannot be cancelled as there is no line item available for cancellation",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/submit-return-request": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Order return by order ID",
                    "description": "When customer's return request is found to be eligible, this endpoint submits the return request by order ID. <p> **Note**: If you do not have order ID, use the corresponding order number-based endpoint- `POST /orders/order-number/{orderNumber}/actions/submit-return-request`.",
                    "operationId": "returnsOrderByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderReturnRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Return request accepted",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/returnOrderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Order not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/submit-return-request": {
                "post": {
                    "tags": [
                        "Returns"
                    ],
                    "summary": "Order return by order number",
                    "description": "When the customer's return request is determined to be eligible, this endpoint is used to process the return request. <p> **Note**: If you do not have the order number, but have order ID, use Return order by order ID endpoint - `POST /orders/{orderId}/actions/submit-return-request`.",
                    "operationId": "returnsOrderByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "Order-20000001"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderReturnRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Return request accepted",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/returnOrderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": "{\"message\": \"Order not found, \"type\":\"CLIENT_ERROR\"\" }"
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/package-tracking-acknowledge": {
                "put": {
                    "tags": [
                        "Tracking"
                    ],
                    "summary": "Get acknowledgement for package tracking by order number",
                    "description": "This endpoint gets acknowledgement of package tracking by order number. <p> **Note**: If you do not have order number, use the corresponding order ID-based endpoint - `PUT /orders/{orderId}/actions/package-tracking-acknowledge`",
                    "operationId": "acknowledgeTrackingDetailsByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": 309019176
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/acknowledgePackageTrackingRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the specified orderNumber was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/package-tracking-acknowledge": {
                "put": {
                    "tags": [
                        "Tracking"
                    ],
                    "summary": "Get package tracking acknowledgement by order ID",
                    "description": "This endpoint gets acknowledgement of package tracking by order ID. <p> **Note**: If you do not have order ID, use the corresponding order number-based endpoint - `PUT /orders/order-number/{orderNumber}/actions/package-tracking-acknowledge`.",
                    "operationId": "acknowledgeTrackingDetailsByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated ID. It is returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "as4refar4e309019176"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/acknowledgePackageTrackingRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the specified order ID was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/search": {
                "post": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Find orders",
                    "description": "Customers may want to review their past orders or, as merchants, you may have to answer queries related to past orders, and analyze sales. <p> To support the previously-mentioned use cases, this endpoint searches for orders based on filter conditions specified in the request body. By using `offset` and `limit` you can refine the search results. When they are not specified, you will get up to 10 results.",
                    "operationId": "getOrdersByQuery",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning records.<br>For example, When `offset=20`, `limit=10` returns records 21-30.",
                            "schema": {
                                "type": "number",
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "type": "number",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/searchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/fraud-release": {
                "post": {
                    "tags": [
                        "Frauds"
                    ],
                    "summary": "Release fraud order by order ID",
                    "description": "If an order is suspected to be fraudulent, it is immediately placed on hold for verification. After verification, if it is confirmed as non-fraudulent, this endpoint is used to release the order from hold, by order ID, so that it can be processed. <p> **Note**: When you don't have order ID, use the corresponding order number-based endpoint - `POST /orders/order-number/{orderNumber}/actions/fraud-release`.",
                    "operationId": "releaseFraudHoldByOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the orderNumber specified was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/fraud-release": {
                "post": {
                    "tags": [
                        "Frauds"
                    ],
                    "summary": "Release fraud order",
                    "description": "If an order is suspected to be fraudulent, it is immediately placed on hold for verification. After verification, if it is confirmed as non-fraudulent, this endpoint is used to release the order from hold, by order number so that it can be processed. <p> **Note**: When you don't have order number, use the corresponding order ID-based endpoint - `POST /orders/{orderId}/actions/fraud-release`.",
                    "operationId": "releaseFraudHoldByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the orderNumber specified was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/fraud-cancel": {
                "post": {
                    "tags": [
                        "Frauds"
                    ],
                    "summary": "Cancel fraud order by order ID",
                    "description": "If an order is suspected to be fraudulent, it is immediately placed on hold for verification. After verification, if it's confirmed as fraudulent, this endpoint is used to cancel the order. <p> **Note**: If you don't have order ID, use the corresponding order number-based endpoint - `POST - /orders/order-number/{orderNumber}/actions/fraud-cancel`",
                    "operationId": "fraudOrderCancelbyOrderId",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/fraudCancelRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the orderNumber specified was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/fraud-cancel": {
                "post": {
                    "tags": [
                        "Frauds"
                    ],
                    "summary": "Cancel fraud order by order number",
                    "description": "If an order is suspected to be fraudulent, it is immediately placed on hold for verification. After verification, if it's confirmed as fraudulent, this endpoint is used to cancel the order by order number. <p> **Note**: If you don't have order number, use the corresponding order ID-based endpoint - `POST /orders/{orderId}/actions/fraud-cancel`.",
                    "operationId": "fraudOrderCancelbyOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/fraudCancelRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/apiResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "An order with the orderNumber specified was not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/update-payment-status": {
                "post": {
                    "tags": [
                        "Payments"
                    ],
                    "summary": "Update status of order payment by order number",
                    "description": "This endpoint is used sync order payments when transactions happen externally. Additionally, used for updating order payment status and the amount, whether it is captured, refunded or void amount. <p> If you don't have order number, use the corresponding order ID-based endpoint - POST /orders/{orderId}/actions/update-payment-status",
                    "operationId": "updatePaymentStatusByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updatePaymentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/update-payment-status": {
                "post": {
                    "tags": [
                        "Payments"
                    ],
                    "summary": "Update order payment status by order ID",
                    "description": "This endpoint is used sync order payments when transactions happen externally. Additionally, used for updating order payment status and the amount, whether it is captured, refunded or void amount. <p> If you don't have order ID, use the corresponding order number-based endpoint - POST /orders/order-number/{orderNumber}/actions/update-payment-status.",
                    "operationId": "updatePaymentStatus",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated ID. It is returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updatePaymentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/order-number/{orderNumber}/actions/create-appeasement": {
                "post": {
                    "tags": [
                        "Appeasements"
                    ],
                    "summary": "Create appeasement by order number",
                    "description": "When customer is dissatisfied with their shopping experience, you may want to offer an appeasement amount to keep them happy. <p> This endpoint is used to create appeasement request by order number. <p> **Note**: If you don't have order number, use the corresponding order ID-based endpoint - `POST /orders/{orderId}/actions/create-appeasement`",
                    "operationId": "createAppeasementByOrderNumber",
                    "parameters": [
                        {
                            "name": "orderNumber",
                            "in": "path",
                            "description": "Merchant-defined order identifier",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "123k4h123k"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCreateAppeasementRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/appeasementResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/create-appeasement": {
                "post": {
                    "tags": [
                        "Appeasements"
                    ],
                    "summary": "Create appeasement by order ID",
                    "description": "When customer is dissatisfied with their shopping experience, you may want to offer an appeasements amount such as partial refund to keep them happy. <p> This endpoint is used to create appeasement request by order ID <p. **Note**: If you do not have an order ID, but have an order number, use the order number-based endpoint - `POST /orders/order-number/{orderNumber}/actions/create-appeasement`.",
                    "operationId": "createAppeasement",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated ID. It is returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCreateAppeasementRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/appeasementResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/actions/update-customer": {
                "post": {
                    "tags": [
                        "Orders"
                    ],
                    "summary": "Update customer details for given order IDs",
                    "description": "In many scenarios, customer details may change over time. For example, a customer might change their email, phone, or company affiliation. <p> By providing the order IDs and the updated customer details, this endpoint facilitates updating customer info for the given order IDs. This ensures order-related communication reaches the customer and they get timely customer service.",
                    "operationId": "updateCustomerInfoInOrderList",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updateCustomerRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/customerResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/check-credits-eligibility": {
                "post": {
                    "tags": [
                        "Credits"
                    ],
                    "summary": "Check credits eligibility by order ID",
                    "description": "In case of refund scenarios, credits such as gift card may be offered to customers for various reasons such as damaged products, later deliveries, or other qualifying factors as per your policy. <p> This endpoint checks the credits eligibility by order ID, allowing businesses to manage credits effectively and provide appropriate compensation to eligible customers.",
                    "operationId": "getCreditsEligibility",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/creditsEligibilityResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/create-credits": {
                "post": {
                    "tags": [
                        "Credits"
                    ],
                    "summary": "Create credits by order ID",
                    "description": "Use this endpoint to create credits by order ID.",
                    "operationId": "createCredits",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCreditsRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/orderCreditsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/orders/{orderId}/actions/update-credit-status": {
                "post": {
                    "tags": [
                        "Credits"
                    ],
                    "summary": "Update credits by order ID",
                    "description": "Use this endpoint to update the credit status, as well as to add any associated notes and additional attributes.",
                    "operationId": "updateCredit",
                    "parameters": [
                        {
                            "name": "orderId",
                            "in": "path",
                            "description": "24-character system-generated order ID returned in the response of Create Order - `POST /orders` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/orderCreditUpdateRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/creditsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "message": "Not found",
                                        "type": "CLIENT_ERROR"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Create new shipment",
                    "description": "To use this endpoint an “allocation” must exist for the order that is being shipped. When an order is placed, fabric sends allocation details to external merchant system to create order fulfillment requirement details in an external system. With reference to the allocation that is being shipped, users of this POST API can create  shipment details for allocations. <p> **Note**: Shipment ID generated as part of the response is required for subsequent calls such as Acknowledge shipment (`POST /shipments/{shipmentId}/acknowledge`) and Get shipment (`GET /shipments/{shipmentId}`).",
                    "operationId": "createShipment",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createShipmentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/{shipmentId}/acknowledge": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Acknowledge shipment",
                    "description": "For users of fabric Webhook Service, Shipment related events can trigger HTTP call-backs to notify web clients via a merchant-defined URL/URI, typically an API Gateway for a middleware. While the response to fabric Webhook service HTTP call-back may occur, a secondary call-back can utilize this Acknowledge shipment endpoint to indicate that a secondary external system has acknowledged this shipment event. Middleware receives the event, transforms it in a suitable format, and sends a success response back to fabric, confirming it received the event. It also sends the transformed event to an external merchant system (typically in XML or JSON). <p>With this endpoint, middleware immediately sends an asynchronous acknowledgement to fabric, based on shipping ID, to indicate whether the call was successful. This acknowledgement is used for learning, auditing, and taking any necessary action.",
                    "operationId": "acknowledgeShipment",
                    "parameters": [
                        {
                            "name": "shipmentId",
                            "in": "path",
                            "description": "24-character system-generated shipment ID. It is generated in the response of Create Shipment - `POST /shipments` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "627963716b19511e8a3a631b"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shipmentAcknowledge"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentAcknowledgeResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipment not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipment not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/actions/re-ship": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Create re-shipment",
                    "description": "Orders may go missing before they are delivered to customers for reasons such as incorrect address, theft, labelling issues, or other reasons. This endpoint triggers reshipment in such cases for the existing location. <br> **Note**: Shipment ID generated as part of the response is required for subsequent calls such as Acknowledge shipment (POST /shipments/{shipmentId}/acknowledge) and Get shipment (GET /shipments/{shipmentId})",
                    "operationId": "createReshipment",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createShipmentRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/search": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Find shipments",
                    "description": "As merchants, you may want to view shipments of specific statuses, monitor progress of deliveries, and proactively manage situations to ensure timely deliveries. <p> This endpoint enables you to easily search for shipments based on the specified criteria in the request body. You can refine your search by specifying `limit` and `offset`. When they are not specified, by default you will get up to 10 records. In addition, you can `sort` results.",
                    "operationId": "searchShipments",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "number",
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page.",
                            "schema": {
                                "type": "number",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shipmentsSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentsSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/actions/update-tracking": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Update shipment tracking",
                    "description": "This endpoint creates a new tracking log that can be used to update order status. Generally, employed by external web services or 'adapters' that have been integrated with carrier tracking applications. With this endpoint, fabric Shipment service gets information from carrier tracking applications and in turn updates customers  about their shipment status.",
                    "operationId": "updateTrackingDetails",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shipmentTrackingDetail"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipment not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipment not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/{shipmentId}/actions/update-gift-cards-status": {
                "post": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Update gift card activation status",
                    "description": "This endpoint is used to activate gift cards before they are delivered to the customer. Typically utilized by “adapters” or external web services integrated with gift card applications, so that gift cards can be activated as part of the fabric fulfillment workflow.",
                    "operationId": "updateGiftCardStatus",
                    "parameters": [
                        {
                            "name": "shipmentId",
                            "in": "path",
                            "description": "24-character system-generated shipment ID. It is generated in the response of Create Shipment - `POST /shipments` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "627963716b19511e8a3a631b"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/giftCardItemsActivationRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/giftCardItem"
                                        }
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipment not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipment not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipments/{shipmentId}": {
                "get": {
                    "tags": [
                        "Shipments"
                    ],
                    "summary": "Get shipment by ID",
                    "description": "As merchants, you may want to resolve customer queries related to shipment or track a specific shipment to manage customer expectations with timely communication. <p> This endpoint gets details of a single shipment by ID. You will get `shipmentId` by using the search endpoint, or by referencing a `shipmentId` on a file such as the Invoice.",
                    "operationId": "getShipment",
                    "parameters": [
                        {
                            "name": "shipmentId",
                            "in": "path",
                            "description": "24-character system-generated shipment ID. It is generated in the response of Create Shipment - `POST /shipments` endpoint.",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "627963716b19511e8a3a631b"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shipmentResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipment not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipment not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods": {
                "post": {
                    "tags": [
                        "Shipping Methods"
                    ],
                    "summary": "Create shipping method",
                    "description": "On your storefront, shipping methods determine how products are delivered to your customers. Some of the common shipping methods are domestic, international, free shipping, and express delivery. <p> This endpoint is used to create a new shipping method. In the response, you will also get a shipping method ID, which will be required for subsequent calls to get, update, and delete this shipping method.",
                    "operationId": "createShippingMethod",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createShippingMethodRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethod"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/search": {
                "post": {
                    "tags": [
                        "Shipping Methods"
                    ],
                    "summary": "Find shipping methods",
                    "description": "At checkout, customers choose their preferred shipping method based on delivery timelines and costs. Moreover, it may be necessary for you to review available shipping methods to ensure they are current and accurate. To support these scenarios, you must get the latest shipping methods. <p> This endpoint gets shipping methods based on given filter conditions",
                    "operationId": "searchShippingMethod",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shippingMethodSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "Returns list of shipping methods",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethodsSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/{shippingMethodId}/actions/add-items": {
                "post": {
                    "tags": [
                        "Shipping Method Items"
                    ],
                    "summary": "Add items to shipping method",
                    "description": "You may want to offer different shipping options for items based on their weight and dimensions, or you may want to offer promotional shipping rates based on order value, customer loyalty, etc. <p> This endpoint lets you add items to an existing shipping method so that shoppers can see the options.",
                    "operationId": "addItems",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of Get shipping method endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shippingMethodItemsRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethodItemsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": " \"type\": \"CLIENT_ERROR\", {\"message\": \"Shipping method not found.\" }"
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/actions/filter-by-item-id": {
                "post": {
                    "tags": [
                        "Shipping Method Items"
                    ],
                    "summary": "Get shipping methods",
                    "description": "You may need to periodically review shipping methods associated with an item, either to answer related queries or to verify they are up to date. <p> This endpoint gets shipping methods for the given item ID.",
                    "operationId": "getByItemId",
                    "parameters": [
                        {
                            "name": "itemId",
                            "in": "query",
                            "description": "Item ID",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": 1234
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethodsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipping method not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipping method not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/{shippingMethodId}/actions/delete-items": {
                "post": {
                    "tags": [
                        "Shipping Method Items"
                    ],
                    "summary": "Delete items from shipping method",
                    "description": "Certain items may need to be removed from a shipping method when they are discontinued, new shipping restrictions are imposed on hazardous items, or when they are not eligible for current promotions.<p> Using this endpoint, you can delete one or more items from the given shipping method.",
                    "operationId": "deleteItems",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of Get shipping method endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "52fa3796841ea417fa71d2a0"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/shippingMethodItemsRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethodItemsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipping method item not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/{shippingMethodId}": {
                "get": {
                    "tags": [
                        "Shipping Methods"
                    ],
                    "summary": "Get shipping method",
                    "description": "When an order is placed, the selected shipping method is stored as part of order details. You may need to review them for order related queries. <p> This endpoint gets details of a single shipping method by ID.",
                    "operationId": "getShippingMethod",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of Get shipping method endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethod"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipping method not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "put": {
                    "tags": [
                        "Shipping Methods"
                    ],
                    "summary": "Update shipping method",
                    "description": "To comply with legal regulations and for other purposes, it may be necessary to update shipping rates or delivery timelines. <p> With this endpoint, you can update shipping details by ID. This completely replaced existing information.",
                    "operationId": "updateShippingMethod",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of *Get shipping method* endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updateShippingMethodRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethod"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipping method not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipping method not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Shipping Methods"
                    ],
                    "summary": "Delete shipping method",
                    "description": "When a particular shipping service is discontinued or certain shipping methods have become redundant or non-compliant with existing regulations, you may want to remove them so they are not shown to shoppers. <p> This endpoint deletes a shipping method by ID.",
                    "operationId": "deleteShippingMethod",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of Get shipping method endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethod"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "shipping method not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/shipping-methods/{shippingMethodId}/items": {
                "get": {
                    "tags": [
                        "Shipping Method Items"
                    ],
                    "summary": "Get item IDs for given shipping method",
                    "description": "You may want to determine what items are in a specific shipping method, to calculate shipping costs, verify the eligibility of items for specific shipping methods, or display the list of items to shoppers during the checkout process.  <p> This endpoint is used to get item IDs for a given shipping method.",
                    "operationId": "getItemIds",
                    "parameters": [
                        {
                            "name": "shippingMethodId",
                            "in": "path",
                            "description": "24-character ID generated in the response of *Get shipping method* endpoint - `POST /shipping-methods`",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/shippingMethodItemIdsResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Shipping method not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Shipping method not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-webhooks/search": {
                "post": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Get all webhook definitions",
                    "description": "Get all webhook definitions for the given tenantId, offset, and limit.",
                    "operationId": "getAllWebhooks",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to be skipped before returning all records. Default is `0` when no value is specified.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webhookSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhooksSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-webhooks": {
                "post": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Configure new webhook",
                    "description": "Configure a new webhook and subscribe to various events to get automated messages for the event activity.",
                    "operationId": "createWebhook",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createWebhookDefinitionRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "201": {
                            "description": "Created",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookDefinitionResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-webhooks/event-logs/search": {
                "post": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Search webhook event logs",
                    "description": "Search webhook event logs based on the filter criteria specified in the request body.",
                    "operationId": "eventLogsSearch",
                    "parameters": [
                        {
                            "name": "offset",
                            "in": "query",
                            "description": "Number of records to be skipped before returning all records. Default is `0` when no value is specified.",
                            "schema": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0,
                                "default": 0
                            },
                            "example": 0
                        },
                        {
                            "name": "limit",
                            "in": "query",
                            "description": "Maximum number of records per page",
                            "schema": {
                                "maximum": 100,
                                "minimum": 1,
                                "type": "integer",
                                "format": "int32",
                                "example": 10,
                                "default": 10
                            },
                            "example": 10
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webhookEventLogSearchRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookEventLogsSearchResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-webhooks/{webhookId}": {
                "get": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Get webhook by ID",
                    "description": "Get a specific webhook by the given webhook ID.",
                    "operationId": "getWebhook",
                    "parameters": [
                        {
                            "name": "webhookId",
                            "in": "path",
                            "description": "Webhook ID to identify the webhook",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "a3wefds4fsafew"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookDefinitionResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Webhook definition not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "put": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Update webhook by ID",
                    "description": "Update a specific webhook by the given webhook ID.",
                    "operationId": "updateWebhook",
                    "parameters": [
                        {
                            "name": "webhookId",
                            "in": "path",
                            "description": "Webhook ID to identify the webhook",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "a3wefds4fsafew"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/updateWebhookDefinitionRequest"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookDefinitionResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition not found"
                                    }
                                }
                            }
                        },
                        "409": {
                            "description": "Conflict",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition with target, tenantId, protocol, source already exists."
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                },
                "delete": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Delete webhook by ID",
                    "description": "Delete the webhook configuration for the given webhook ID. This action cannot be undone.",
                    "operationId": "deleteWebhook",
                    "parameters": [
                        {
                            "name": "webhookId",
                            "in": "path",
                            "description": "Webhook ID to identify the webhook",
                            "required": true,
                            "schema": {
                                "type": "string"
                            },
                            "example": "a3wefds4fsafew"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookDefinitionResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/oms-webhooks/actions/retry": {
                "post": {
                    "tags": [
                        "Webhooks"
                    ],
                    "summary": "Retry webhook",
                    "description": "Re-trigger the webhook event with `eventRequestId`, `tenantId`, and payload values populated from the `/webhooks/search` endpoint response.",
                    "operationId": "retryWebhook",
                    "parameters": [
                        {
                            "$ref": "#/components/parameters/xFabricTenantId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricChannelId"
                        },
                        {
                            "$ref": "#/components/parameters/xFabricRequestId"
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webhookRetryRequestBody"
                                }
                            }
                        },
                        "required": true
                    },
                    "responses": {
                        "200": {
                            "description": "OK",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/webhookRetryResponse"
                                    }
                                }
                            }
                        },
                        "400": {
                            "description": "Bad request",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Bad request",
                                        "errors": [
                                            {
                                                "type": "CLIENT_ERROR",
                                                "message": "Invalid request"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Unauthorized request"
                                    }
                                }
                            }
                        },
                        "404": {
                            "description": "Not found",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "CLIENT_ERROR",
                                        "message": "Webhook definition not found"
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Internal server error",
                            "headers": {
                                "x-fabric-request-id": {
                                    "$ref": "#/components/headers/xFabricRequestIdResponseHeader"
                                }
                            },
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/errorResponse"
                                    },
                                    "example": {
                                        "type": "SERVER_ERROR",
                                        "message": "Internal server error"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "components": {
            "schemas": {
                "address": {
                    "required": [
                        "addressLine1",
                        "city",
                        "countryCode",
                        "latitude",
                        "longitude",
                        "postalCode",
                        "region",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "addressLine1": {
                            "description": "Address line 1",
                            "type": "string",
                            "example": "123 Main St."
                        },
                        "addressLine2": {
                            "description": "Address line 2",
                            "type": "string",
                            "example": "Suite 100"
                        },
                        "addressLine3": {
                            "description": "Address line 3",
                            "type": "string",
                            "example": "Seventh floor"
                        },
                        "addressLine4": {
                            "description": "Address line 4",
                            "type": "string",
                            "example": "Attention: Pat E. Kake"
                        },
                        "city": {
                            "description": "City name",
                            "type": "string",
                            "example": "Seattle"
                        },
                        "region": {
                            "description": "Region or state",
                            "type": "string",
                            "example": "WA"
                        },
                        "postalCode": {
                            "description": "Postal or ZIP code",
                            "type": "string",
                            "example": "98121"
                        },
                        "countryCode": {
                            "description": "ISO 3166-1 alpha-2 based country code",
                            "type": "string",
                            "example": "US"
                        },
                        "type": {
                            "description": "Address type",
                            "type": "string",
                            "example": "Home"
                        },
                        "latitude": {
                            "description": "Address latitude, used with `longitude` to specify the address location. Decimal degrees format; negative is degrees South.<br>**Note:**Value must be between -90 and 90, both inclusive.",
                            "type": "number",
                            "format": "double",
                            "example": 47.6205
                        },
                        "longitude": {
                            "description": "Address longitude, used with `latitude` to specify the address location. Decimal degrees format; negative is degrees South.<br>**Note:**Value must be between -180 and 180, both inclusive.",
                            "type": "number",
                            "format": "double",
                            "example": -122.3493
                        }
                    },
                    "description": "Address details"
                },
                "allocationItem": {
                    "required": [
                        "allocationLineNumber",
                        "itemId",
                        "quantity",
                        "sku",
                        "uom"
                    ],
                    "type": "object",
                    "properties": {
                        "orderLineId": {
                            "type": "string",
                            "description": "Order line ID for tracking purpose",
                            "example": "134fqfaa532qrf"
                        },
                        "itemId": {
                            "type": "integer",
                            "description": "System-generated unique identifier of item from fabric Products (previously called PIM) service",
                            "format": "int32",
                            "example": 100064
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock Keeping Unit (SKU), unique identifier of item",
                            "example": "123k4h123k"
                        },
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated order ID",
                            "example": "62f3982438bcab1951be0a19"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier. If omitted, this is generated by fabric’s sequence generator using Configuration service.",
                            "example": "123k4h123k"
                        },
                        "orderedAt": {
                            "type": "string",
                            "description": "Merchant-specified order creation time (UTC) of the item",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483971941Z"
                        },
                        "estimatedDeliveryDate": {
                            "type": "string",
                            "description": "Estimated delivery date of the item",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483971941Z"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Requested quantity of the item",
                            "format": "int32",
                            "example": 3
                        },
                        "allocationLineNumber": {
                            "type": "integer",
                            "description": "Unique number assigned by merchant to identify an item in an allocation. When this value is not provided, fabric will auto generate it (UUID format) during allocation creation (internal) endpoint.",
                            "format": "int32",
                            "example": 3
                        },
                        "parentAllocationLineNumber": {
                            "type": "integer",
                            "description": "Unique number allocated to each item of the parent allocation (the very first allocation)",
                            "format": "int32",
                            "example": 3
                        },
                        "reallocationRequestId": {
                            "type": "string",
                            "description": "Reference ID of `allocationRequestId` that is being reallocated",
                            "example": "123k4h123k"
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is sold or measured. It is important for accurately fulfilling orders and ensuring customers receive the correct quantity of products they have ordered. The possible values are EA (Each) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "shippedQuantity": {
                            "type": "integer",
                            "description": "Total number of line items shipped",
                            "format": "int32",
                            "example": 1
                        },
                        "scratchQuantity": {
                            "type": "integer",
                            "description": "Total number of line items scratched or canceled",
                            "format": "int32",
                            "example": 1
                        },
                        "scratchedReasonCode": {
                            "type": "string",
                            "description": "A valid predefined reason code for scratching or canceling the item",
                            "example": "Out of stock"
                        },
                        "reshipReasonCode": {
                            "type": "string",
                            "description": "A valid predefined reason code for reshipping the item",
                            "example": "Stock refilled"
                        },
                        "reallocationReasonCode": {
                            "type": "string",
                            "description": "Reason for reallocation",
                            "example": "Reallocating due to unavailability of location number"
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Sales channel ID",
                            "example": "4a35cc1b-4e15-46df-96c9-38a697d88dfe"
                        },
                        "weight": {
                            "type": "number",
                            "description": "Item weight during shipment",
                            "format": "double",
                            "example": 5.5
                        },
                        "cost": {
                            "type": "number",
                            "description": "Total cost of items. Calculated based on the unit price and requested quantity.",
                            "format": "double",
                            "example": 150.6
                        },
                        "price": {
                            "type": "number",
                            "description": "Unite price of the item",
                            "format": "double",
                            "example": 50.2
                        },
                        "itemStatus": {
                            "type": "string",
                            "description": "Current status of item",
                            "example": "PARTIALLY_ALLOCATED",
                            "enum": [
                                "CANCELLED",
                                "REFUNDED",
                                "ALLOCATED",
                                "REALLOCATED",
                                "SHIPPED",
                                "PARTIALLY_ALLOCATED",
                                "PARTIALLY_SHIPPED",
                                "PARTIALLY_CANCELLED"
                            ]
                        }
                    },
                    "description": "Details of allocation item"
                },
                "allocationRequest": {
                    "required": [
                        "allocationRequestId",
                        "locationNumber"
                    ],
                    "type": "object",
                    "properties": {
                        "allocationRequestId": {
                            "type": "string",
                            "description": "Merchant-specified unique ID. If omitted, this is generated by fabric’s sequence generator using Configuration service.",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "parentAllocationId": {
                            "type": "string",
                            "description": "Allocation ID that is generated while creating the allocation for the first time. Initially this will be the same as `allocationRequestId`. If there is a reallocation, the `parentAllocationId` will be assigned the same value as the initial `allocationRequestId`, and will serve as a means of monitoring all subsequent child allocations.",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "notifiedToPPSAt": {
                            "type": "string",
                            "description": "fabric system-generated time when allocation service sent event notification to package tracking service.",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483971941Z"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Currency",
                            "example": "USD"
                        },
                        "type": {
                            "type": "string",
                            "description": "Allocation type<br>**ALLOCATED:** Order is allocated for fulfillment<br>**SCRATCHED:** Order is canceled during allocation due to unavailability of inventory<br>**RETURNED:** Allocation created for the return items",
                            "example": "ALLOCATED",
                            "enum": [
                                "ALLOCATED",
                                "SCRATCHED",
                                "RETURNED"
                            ]
                        },
                        "previousAllocatedLocationNums": {
                            "type": "array",
                            "description": "In case of reallocation, it keeps track of previously allocated location numbers.",
                            "items": {
                                "type": "string",
                                "description": "Previously allocated location numbers",
                                "example": "410"
                            }
                        },
                        "itemsType": {
                            "type": "string",
                            "description": "This is an inherited attribute from *Orders* that pertains to item types such as WEB_SHIP, WEB_PICKUP, WEB_SDD INTERNATIONAL, POS, POS_SHIP, and POS_PICKUP.",
                            "example": "WEB_SHIP"
                        },
                        "orderSubType": {
                            "type": "string",
                            "description": "During allocation creation, this attribute is inherited from fabric Orders and includes subtypes such as IOS, ANDROID, INTERNATIONAL, among others.",
                            "example": "ANDROID"
                        },
                        "shippedAt": {
                            "type": "string",
                            "description": "Time of order shipment, generated by allocation service when shipment service calls allocation after shipment is created.",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "shipmentType": {
                            "type": "string",
                            "description": "This attribute is inherited from `order.shipInfo` during allocation creation.<br>Acceptable value: SHIP_TO_ADDRESS,  CUSTOMER_PICKUP, PICKUP, SDD, SHIP_TO_STORE",
                            "example": "SHIP_TO_ADDRESS"
                        },
                        "shipmentMethod": {
                            "type": "string",
                            "description": "Shipping method. This attribute is inherited from `order.shipInfo` during allocation creation.",
                            "example": "Parcel Post Delivery"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "System-generated UUID associated with `shipInfo`, generated from CnC service. <p> **Note**: An order can have multiple ship-to (delivery) locations and items going to the same location have one `shipToId`.",
                            "example": "98ff5c0bec0aed3c86202c32"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Allocation status",
                            "example": "ALLOCATED",
                            "enum": [
                                "ALLOCATED",
                                "PENDING_DROP",
                                "PENDING_PICK",
                                "SHIPPED",
                                "PARTIALLY_SHIPPED",
                                "REALLOCATED",
                                "CANCELLED",
                                "PARTIALLY_CANCELLED"
                            ]
                        },
                        "allocationNumber": {
                            "type": "integer",
                            "description": "Merchant-specified unique number assigned to each allocation. If omitted, is this generated by fabric’s sequence generator using Configuration service",
                            "format": "int32",
                            "example": 13000004
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Inventory location number to identify ship-from location or Buy Online Pickup from Store (BOPIS) location. This must be the `locationNumber` stored in the fabric Location service.",
                            "example": "1234B"
                        },
                        "locationType": {
                            "type": "string",
                            "description": "Inventory location type such as, DC or Store from where the order is picked up",
                            "example": "DC"
                        },
                        "shipToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "recipients": {
                            "type": "array",
                            "description": "Recipient details like name, email address, and phone number",
                            "items": {
                                "$ref": "#/components/schemas/orderPickup"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "List of items to be shipped",
                            "items": {
                                "$ref": "#/components/schemas/allocationItem"
                            }
                        }
                    },
                    "description": "Allocation request details"
                },
                "orderContactName": {
                    "type": "object",
                    "properties": {
                        "firstName": {
                            "type": "string",
                            "description": "Contact person's first name",
                            "example": "Alex"
                        },
                        "middleName": {
                            "type": "string",
                            "description": "Contact person's middle name or initial",
                            "example": "E"
                        },
                        "lastName": {
                            "type": "string",
                            "description": "Contact person's last name",
                            "example": "Doe"
                        }
                    },
                    "description": "Contact person's name"
                },
                "orderContactPhone": {
                    "type": "object",
                    "properties": {
                        "number": {
                            "type": "string",
                            "description": "Contact person's phone number",
                            "example": "123-456-7890"
                        },
                        "type": {
                            "type": "string",
                            "description": "Contact number type",
                            "example": "MOBILE",
                            "enum": [
                                "MOBILE",
                                "HOME",
                                "BUSINESS"
                            ]
                        }
                    },
                    "description": "Contact person's phone details"
                },
                "orderPickup": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "pickupType": {
                            "type": "string",
                            "description": "Order pickup type",
                            "example": "PRIMARY",
                            "enum": [
                                "PRIMARY",
                                "ALTERNATE"
                            ]
                        }
                    },
                    "description": "Order pickup details"
                },
                "errorResponse": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Error type",
                            "example": "CLIENT_ERROR"
                        },
                        "message": {
                            "type": "string",
                            "description": "Error message",
                            "example": "Bad request"
                        },
                        "errors": {
                            "type": "array",
                            "description": "Errors",
                            "items": {
                                "$ref": "#/components/schemas/errorResponse"
                            }
                        }
                    },
                    "description": "Error response"
                },
                "allocationResponse": {
                    "required": [
                        "allocationId",
                        "allocationRequestId",
                        "createdAt",
                        "locationNumber",
                        "version"
                    ],
                    "type": "object",
                    "properties": {
                        "allocationId": {
                            "type": "string",
                            "description": "24-character system-generated allocation ID",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "version": {
                            "type": "integer",
                            "description": "Allocation document version. The version number is incremented each time the allocation document undergoes an update. Update to an allocation document happens automatically when the status changes from one state to another based on the `statusCode`.",
                            "format": "int64",
                            "example": 2
                        },
                        "allocationRequestId": {
                            "type": "string",
                            "description": "Merchant-specified unique ID. If omitted, this is generated by fabric’s sequence generator using Configuration service.",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "parentAllocationId": {
                            "type": "string",
                            "description": "Allocation ID that is generated while creating the allocation for the first time. Initially this will be the same as `allocationRequestId`. If there is a reallocation, the `parentAllocationId` will be assigned the same value as the initial `allocationRequestId`, and will serve as a means of monitoring all subsequent child allocations.",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "notifiedToPPSAt": {
                            "type": "string",
                            "description": "fabric system-generated time when allocation service sent event notification to package tracking service.",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483971941Z"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "System-generated time of allocation record creation",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483971941Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "System-generated time when allocation record was last modified",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Currency",
                            "example": "USD"
                        },
                        "type": {
                            "type": "string",
                            "description": "Allocation type<br>**ALLOCATED:** Order is allocated for fulfillment<br>**SCRATCHED:** Order is canceled during allocation due to unavailability of inventory<br>**RETURNED:** Allocation created for the return items",
                            "example": "ALLOCATED",
                            "enum": [
                                "ALLOCATED",
                                "SCRATCHED",
                                "RETURNED"
                            ]
                        },
                        "previousAllocatedLocationNums": {
                            "type": "array",
                            "description": "In case of reallocation, it keeps track of previously allocated location numbers.",
                            "items": {
                                "type": "string",
                                "description": "Previously allocated location numbers",
                                "example": "410"
                            }
                        },
                        "itemsType": {
                            "type": "string",
                            "description": "This is an inherited attribute from *Orders* that pertains to item types such as WEB_SHIP, WEB_PICKUP, WEB_SDD INTERNATIONAL, POS, POS_SHIP, and POS_PICKUP.",
                            "example": "WEB_SHIP"
                        },
                        "orderSubType": {
                            "type": "string",
                            "description": "During allocation creation, this attribute is inherited from fabric Orders and includes subtypes such as IOS, ANDROID, INTERNATIONAL, among others.",
                            "example": "ANDROID"
                        },
                        "shippedAt": {
                            "type": "string",
                            "description": "Time of order shipment, generated by allocation service when shipment service calls allocation after shipment is created.",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "shipmentType": {
                            "type": "string",
                            "description": "This attribute is inherited from `order.shipInfo` during allocation creation.<br>Acceptable value: SHIP_TO_ADDRESS,  CUSTOMER_PICKUP, PICKUP, SDD, SHIP_TO_STORE",
                            "example": "SHIP_TO_ADDRESS"
                        },
                        "shipmentMethod": {
                            "type": "string",
                            "description": "Shipping method. This attribute is inherited from `order.shipInfo` during allocation creation.",
                            "example": "Parcel Post Delivery"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "System-generated UUID associated with `shipInfo`, generated from CnC service. <p> **Note**: An order can have multiple ship-to (delivery) locations and items going to the same location have one `shipToId`.",
                            "example": "98ff5c0bec0aed3c86202c32"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Allocation status",
                            "example": "ALLOCATED",
                            "enum": [
                                "ALLOCATED",
                                "PENDING_DROP",
                                "PENDING_PICK",
                                "SHIPPED",
                                "PARTIALLY_SHIPPED",
                                "REALLOCATED",
                                "CANCELLED",
                                "PARTIALLY_CANCELLED"
                            ]
                        },
                        "allocationNumber": {
                            "type": "integer",
                            "description": "Merchant-specified unique number assigned to each allocation. If omitted, is this generated by fabric’s sequence generator using Configuration service",
                            "format": "int32",
                            "example": 13000004
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Inventory location number to identify ship-from location or Buy Online Pickup from Store (BOPIS) location. This must be the `locationNumber` stored in the fabric Location service.",
                            "example": "1234B"
                        },
                        "locationType": {
                            "type": "string",
                            "description": "Inventory location type such as, DC or Store from where the order is picked up",
                            "example": "DC"
                        },
                        "shipToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "recipients": {
                            "type": "array",
                            "description": "Recipient details like name, email address, and phone number",
                            "items": {
                                "$ref": "#/components/schemas/orderPickup"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "List of items to be shipped",
                            "items": {
                                "$ref": "#/components/schemas/allocationItem"
                            }
                        },
                        "auditLogs": {
                            "type": "array",
                            "description": "Change history details",
                            "items": {
                                "$ref": "#/components/schemas/auditLog"
                            }
                        }
                    },
                    "description": "Allocation response details"
                },
                "auditLog": {
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it during order creation, in UUID format.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "auditId": {
                            "type": "string",
                            "description": "System-generated audit ID (UUID format)",
                            "example": "a05b72dc-78d8-4ea4-90fc-2fe6a1fe1111"
                        },
                        "auditType": {
                            "type": "string",
                            "description": "Audit type such as cancel, return, etc.",
                            "example": "CANCEL"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who made the last update",
                            "example": "6227"
                        },
                        "auditedAt": {
                            "type": "string",
                            "description": "Audit time (UTC)",
                            "format": "date-time",
                            "example": "2023-03-12T09:24:54.804Z"
                        },
                        "source": {
                            "type": "string",
                            "description": "Merchant-defined source from where the update was initiated. There are no predefined values; possible values could be Customer Service Representative (CSR), Point-of-Sale (POS), etc.",
                            "example": "POS"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code, varies from merchant to merchant",
                            "example": "Scratched item"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Merchant-defined sub reason code; provides more clarity to audit reason",
                            "example": "Scratched item"
                        },
                        "policyCode": {
                            "type": "string",
                            "description": "Configurable in Copilot as per requirement. If omitted, default policy is used.",
                            "example": "POS"
                        },
                        "note": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "Note"
                        },
                        "lineItemNumber": {
                            "type": "integer",
                            "description": "Item identifier",
                            "format": "int32",
                            "example": 1
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique item identifier",
                            "example": "SKU0023"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 1
                        },
                        "amount": {
                            "type": "number",
                            "description": "Amount for which audit is done",
                            "format": "double",
                            "example": 2.4
                        },
                        "paymentToken": {
                            "$ref": "#/components/schemas/orderPaymentToken"
                        },
                        "updatedFields": {
                            "type": "array",
                            "description": "Audit log for change history",
                            "items": {
                                "$ref": "#/components/schemas/orderAuditLogUpdatedField"
                            }
                        },
                        "isSuccess": {
                            "type": "boolean",
                            "description": "true: Update operation (any update to the service) is successful <br> false: Update operation has failed",
                            "default": false,
                            "example": true
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Custom attributes",
                            "example": {
                                "key": "value"
                            }
                        }
                    },
                    "description": "Audit log to capture change history"
                },
                "orderAuditLogUpdatedField": {
                    "type": "object",
                    "properties": {
                        "fieldName": {
                            "type": "string",
                            "description": "Field or property name that was updated",
                            "example": "UOM"
                        },
                        "fieldOriginalValue": {
                            "type": "string",
                            "description": "Original value of `fieldName` before it was updated",
                            "example": "PK"
                        }
                    },
                    "description": "Audit log for change history"
                },
                "orderPaymentToken": {
                    "type": "object",
                    "properties": {
                        "token": {
                            "type": "string",
                            "description": "Payment token provided by payment provider",
                            "example": "pi_34tr6787rt"
                        },
                        "paymentType": {
                            "type": "string",
                            "description": "Payment type, for example, credit card payment providers can be Visa, Mastercard, American express, etc.",
                            "example": "VISA"
                        }
                    },
                    "description": "Order payment token details"
                },
                "allocationSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^allocation\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "allocation.type"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find allocations.<br>To search using a single value, `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "allocationSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]allocation\\.[a-zA-Z.\\-_]*)(,([+-]allocation\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is sorted",
                            "example": "+allocation.createdAt",
                            "default": "-allocation.createdAt"
                        },
                        "filters": {
                            "type": "array",
                            "maxItems": 50,
                            "minItems": 0,
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Sample request to search allocations",
                    "example": {
                        "sort": "-allocation.createdAt",
                        "filters": [
                            {
                                "field": "allocation.items.orderId",
                                "value": "Order_*",
                                "condition": "EQ"
                            },
                            {
                                "field": "allocation.items.itemId",
                                "value": [
                                    "Item_1122",
                                    "Item_2233"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "valueSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "description": "Criteria to find webhooks by a single value. Condition between `field` and `value` is anything except IN and NIN when `valueSearchFilter` is used.",
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/webhookSearchFilter"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "description": "A single value using which webhook is searched",
                                    "example": "ORDER_CREATE",
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "description": "Target record's non-numeric identifier",
                                            "example": "ORDER_CREATE"
                                        },
                                        {
                                            "type": "number",
                                            "description": "Target record's numeric identifier",
                                            "format": "int64",
                                            "example": 112233
                                        },
                                        {
                                            "type": "number",
                                            "description": "Target record's numeric identifier",
                                            "format": "double",
                                            "example": 1122.33
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                "valuesSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "description": "Criteria to find webhooks by multiple values. Condition between `field` and `values` is either IN or NIN when `valuesSearchFilter` is used.",
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/webhookSearchFilter"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "values": {
                                    "maxItems": 25,
                                    "minItems": 1,
                                    "type": "array",
                                    "items": {
                                        "description": "Multiple values using which webhooks are searched",
                                        "example": "ORDER_CREATE",
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "description": "Target record's non-numeric identifier",
                                                "example": "ORDER_CREATE"
                                            },
                                            {
                                                "type": "number",
                                                "description": "Target record's numeric identifier",
                                                "format": "int64",
                                                "example": 112233
                                            },
                                            {
                                                "type": "number",
                                                "description": "Target record's numeric identifier",
                                                "format": "double",
                                                "example": 1122.33
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    ]
                },
                "allocationSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/allocationResponse"
                            }
                        }
                    },
                    "description": "Allocation search response details"
                },
                "pagination": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "description": "Maximum number of records per page",
                            "format": "int32",
                            "example": 10,
                            "default": 10
                        },
                        "offset": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "count": {
                            "type": "integer",
                            "description": "Total number of search results",
                            "format": "int32",
                            "example": 1000
                        }
                    },
                    "description": "Pagination response"
                },
                "backOrderPreOrderResponse": {
                    "required": [
                        "lineItemId",
                        "locationNumber",
                        "orderId",
                        "orderStatusCode",
                        "orderedAt",
                        "quantity",
                        "sku",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "System-generated unique ID for backorder or preorder",
                            "example": "63ec576ddaa2544b2dd94684"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "System-generated order number created during order creation",
                            "example": "order_123"
                        },
                        "orderId": {
                            "type": "string",
                            "description": "System-generated order ID created during order creation",
                            "example": "5fec576ddaa2544b2dd94684"
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock Keeping Unit (SKU), unique identifier of item",
                            "example": "sku_123"
                        },
                        "lineItemId": {
                            "type": "string",
                            "description": "Item sequence ID generated by fabric Orders (also called fabric OMS)",
                            "example": "0"
                        },
                        "itemId": {
                            "type": "integer",
                            "description": "System-generated unique identifier of item from fabric Products (previously called PIM) service",
                            "format": "int32",
                            "example": 123
                        },
                        "type": {
                            "type": "string",
                            "description": "Reservation type",
                            "example": "BACKORDER",
                            "enum": [
                                "PREORDER",
                                "BACKORDER"
                            ]
                        },
                        "status": {
                            "type": "string",
                            "description": "Backorder or preorder status",
                            "example": "PARTIAL_BACK_PREORDER_RELEASE"
                        },
                        "cartId": {
                            "type": "string",
                            "description": "System-generated cart ID. Identifies the cart for which backorder and preorder is created.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "orderedAt": {
                            "type": "string",
                            "description": "System-generated order creation time",
                            "format": "date-time",
                            "example": "2022-04-12T09:30:31.198Z"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Number of items reserved for backorder or preorder",
                            "format": "int32",
                            "example": 5
                        },
                        "releasedQuantity": {
                            "type": "integer",
                            "description": "Number of items to be released from inventory reservation",
                            "format": "int32",
                            "example": 1
                        },
                        "locationNumber": {
                            "type": "integer",
                            "description": "Represents inventory location which will fulfill the order reservation",
                            "format": "int32",
                            "example": 23
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "ID of the retailer's source of order replenishment",
                            "example": "vendor_123"
                        },
                        "isDelayConsented": {
                            "type": "boolean",
                            "description": "true: Customer agrees to receive the product at a later date<br>false: Customer wants the product immediately, and doesn't agree to receive the product at a later date. In such case, if the merchant cannot fulfill the order immediately, they can cancel the product, change order status and notify the customer about order cancellation",
                            "example": true
                        },
                        "consentReceivedAt": {
                            "type": "string",
                            "description": "System-generated time of customer consent. This field is used in combination with `isDelayConsented` field",
                            "format": "date-time",
                            "example": "2022-07-12T09:30:31.198Z"
                        },
                        "lastNotifiedAt": {
                            "type": "string",
                            "description": "System-generated time of last notification to customer about their order",
                            "format": "date-time",
                            "example": "2022-06-12T09:30:31.198Z"
                        },
                        "orderStatusCode": {
                            "type": "string",
                            "description": "Order status",
                            "example": "ORDER_CREATED",
                            "enum": [
                                "ORDER_CREATED",
                                "ORDER_ALLOCATED",
                                "ORDER_SHIPPED",
                                "ORDER_PARTIALLY_SHIPPED",
                                "ORDER_PICKED_UP",
                                "ORDER_PARTIALLY_PICKED_UP",
                                "ORDER_DELIVERED",
                                "ORDER_PARTIALLY_DELIVERED",
                                "ORDER_RETURNED",
                                "ORDER_PARTIALLY_RETURNED",
                                "ORDER_PARTIALLY_EXCHANGED",
                                "ORDER_EXCHANGED",
                                "ORDER_CANCELLED",
                                "ORDER_PARTIALLY_CANCELLED",
                                "ORDER_HOLD",
                                "ORDER_CONFIRMED",
                                "ORDER_HOLD_FRAUD",
                                "ORDER_HOLD_CSR",
                                "ORDER_HOLD_CROSSBORDER",
                                "ORDER_HOLD_REVALIDATION",
                                "ORDER_ERROR"
                            ]
                        },
                        "lineItemStatus": {
                            "type": "string",
                            "description": "Line item status",
                            "example": "CANCELLED",
                            "enum": [
                                "CANCELLED",
                                "REFUNDED",
                                "PARTIALLY_CANCELLED",
                                "PARTIALLY_REFUNDED",
                                "PARTIALLY_CANCELLED_REFUNDED",
                                "VALID",
                                "EXCHANGED",
                                "PENDING_EXCHANGE",
                                "RETURN",
                                "PARTIAL_RETURN",
                                "PENDING_RETURN",
                                "RETURN_PROCESSING",
                                "RETURN_REJECTED",
                                "ORDER_LINE_INVALID_SKU",
                                "ORDER_LINE_VALID",
                                "SHIPPED",
                                "PARTIALLY_SHIPPED",
                                "ALLOCATED",
                                "PARTIALLY_ALLOCATED",
                                "DELIVERED",
                                "PARTIALLY_DELIVERED",
                                "PICKED_UP",
                                "PARTIALLY_PICKED_UP"
                            ]
                        }
                    },
                    "description": "Backorder-preorder response details"
                },
                "saveDelayConsentRequest": {
                    "required": [
                        "consent"
                    ],
                    "type": "object",
                    "properties": {
                        "consent": {
                            "type": "string",
                            "description": "Consent type",
                            "example": "ACCEPT",
                            "enum": [
                                "ACCEPT",
                                "DECLINE"
                            ]
                        }
                    },
                    "description": "Delay consent request"
                },
                "backOrderPreOrderSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^backOrderPreOrder\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "backOrderPreOrder.events"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Search filter. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find backorders-preorders. To search using a single value, `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "backOrderPreOrderSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]backOrderPreOrder\\.[a-zA-Z.\\-_]*)(,([+-]backOrderPreOrder\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is sorted",
                            "example": "+backOrderPreOrder.invoicedAt",
                            "default": "-backOrderPreOrder.type"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Backorder preorder search request details",
                    "example": {
                        "sort": "-backOrderPreOrder.type",
                        "filters": [
                            {
                                "field": "backOrderPreOrder.cartId",
                                "value": "64391c190d3ce53e2ccc72b2",
                                "condition": "EQ"
                            },
                            {
                                "field": "backOrderPreOrder.itemId",
                                "values": [
                                    "1122345",
                                    "5544321"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "backOrderPreOrderSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/backOrderPreOrderResponse"
                            }
                        }
                    },
                    "description": "Backorder preorder search response"
                },
                "exportRequest": {
                    "required": [
                        "filters",
                        "module"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "type": "string",
                            "description": "Property by which data is sorted",
                            "example": "+updatedAt, +createdAt"
                        },
                        "filters": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "JSON to filter records. Json structure should match the schema of the target entity such as, order, shipment, invoice, and so on.",
                                "example": {
                                    "createdAt": "2022-08-01T20:03:28Z"
                                },
                                "default": {}
                            },
                            "description": "JSON to filter records. Json structure should match the schema of the target entity such as, order, shipment, invoice, and so on.",
                            "example": {
                                "createdAt": "2022-08-01T20:03:28Z"
                            },
                            "default": {}
                        },
                        "module": {
                            "type": "string",
                            "description": "Module (fabric service) for which data is exported. Accepted values are ORDER, LOCATION, ALLOCATION, INVENTORY, INVOICE, SHIPMENT, NETWORK, SHIPPING_METHODS, AGGREGATED_NETWORK",
                            "example": "ORDER"
                        },
                        "csvHeadersConfig": {
                            "type": "string",
                            "description": "Header name by which the module will be exported to csv",
                            "example": "default"
                        }
                    },
                    "description": "Sample request to export module"
                },
                "exportLog": {
                    "required": [
                        "module",
                        "version"
                    ],
                    "type": "object",
                    "properties": {
                        "exportId": {
                            "type": "string",
                            "description": "Unique ID for export request",
                            "example": "order_2022-11-25T17-25-38-417225543Z"
                        },
                        "version": {
                            "type": "integer",
                            "description": "Number of updates happened to this export document. This gets incremented with every update that happens to the export document. For example, when export of data is initiated, the status is marked `INITIATED`, then the status gets updated to `PROCESSING`, and then it is marked `FINISHED`, thereby the document gets updated thrice. So, the version will be 3.",
                            "format": "int64",
                            "example": 2
                        },
                        "status": {
                            "type": "string",
                            "description": "Export log status.<br>`INITIATED`: Export request is successfully initiated.<br>`PROCESSING`: Export request is accepted, and the export is under process.<br>`FINISHED`: Request is successfully completed. Use the *GET/exports/{exportId}* endpoint to download export records.<br>`SYSTEM_ERROR`: Request errored out for some reason.<br>",
                            "example": "INITIATED",
                            "enum": [
                                "INITIATED",
                                "PROCESSING",
                                "FINISHED",
                                "SYSTEM_ERROR"
                            ]
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time when the export operation was triggered for the first time",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time when the export operation was updated last time",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "url": {
                            "type": "string",
                            "description": "Download URL. The URL will be available to download only when status is `FINISHED`",
                            "example": "https://abc.zip"
                        },
                        "module": {
                            "type": "string",
                            "description": "Module (fabric service) for which data is exported. Accepted values are ORDER, LOCATION, ALLOCATION, INVENTORY, INVOICE, SHIPMENT, NETWORK, SHIPPING_METHODS, AGGREGATED_NETWORK",
                            "example": "ORDER"
                        },
                        "totalRowsExported": {
                            "type": "integer",
                            "description": "Total number of rows exported for a record",
                            "format": "int32",
                            "example": 20
                        },
                        "totalRecordsExported": {
                            "type": "integer",
                            "description": "Total number of records (allocation, order, etc) exported",
                            "format": "int32",
                            "example": 20
                        },
                        "csvHeadersConfig": {
                            "type": "string",
                            "description": "Header name by which the module is exported to csv",
                            "example": "default"
                        }
                    },
                    "description": "Export log details"
                },
                "exportHistorySearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]export\\.[a-zA-Z.\\-_]*)(,([+-]export\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is sorted",
                            "example": "+export.createdAt",
                            "default": "-export.createdAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Export search request details",
                    "example": {
                        "sort": "-export.createdAt",
                        "filters": [
                            {
                                "field": "export.module",
                                "value": "Order",
                                "condition": "EQ"
                            },
                            {
                                "field": "export.status",
                                "values": [
                                    "FINISHED",
                                    "PROCESSING"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "exportSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^export\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "export.module"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find export details. To search using a single value, `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "exportSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/exportLog"
                            }
                        }
                    },
                    "description": "Search response details for the exported data"
                },
                "exportHeader": {
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "Name of file that contains headers list",
                            "example": "appeasements"
                        },
                        "fileHeaders": {
                            "type": "array",
                            "description": "List of headers",
                            "items": {
                                "type": "string",
                                "description": "Headers of the exported file",
                                "example": "orderNumber"
                            }
                        }
                    },
                    "description": "Export header details"
                },
                "exportHeadersResponse": {
                    "type": "object",
                    "properties": {
                        "exportsHeaders": {
                            "type": "array",
                            "description": "Export headers list",
                            "items": {
                                "$ref": "#/components/schemas/exportHeader"
                            }
                        }
                    },
                    "description": "Export headers response details"
                },
                "importRequest": {
                    "required": [
                        "fileName",
                        "module",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "fileName": {
                            "type": "string",
                            "description": "Uploaded file name",
                            "example": "import-file.csv"
                        },
                        "module": {
                            "type": "string",
                            "description": "Uploaded file's module",
                            "example": "ORDER",
                            "enum": [
                                "ALLOCATION",
                                "ORDER",
                                "LOCATION",
                                "SHIPMENT",
                                "INVENTORY",
                                "INVOICE",
                                "TRANSFER"
                            ]
                        },
                        "type": {
                            "type": "string",
                            "description": "Import type. An overlay import will set all configured inventory counters to zero to \"true up\" on overlay, except for the counters in the file (the counters in the file will update the counters for inventory contained in the file).",
                            "example": "BULK",
                            "default": "BULK",
                            "enum": [
                                "BULK",
                                "OVERLAY",
                                "ROOT"
                            ]
                        }
                    },
                    "description": "Import request object"
                },
                "importResponse": {
                    "required": [
                        "createdAt",
                        "importId",
                        "uploadFileUrl"
                    ],
                    "type": "object",
                    "properties": {
                        "attributes": {
                            "description": "Custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "attribute": "12345"
                            },
                            "type": "object"
                        },
                        "importId": {
                            "type": "string",
                            "description": "Imported file's unique ID",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "uploadFileUrl": {
                            "type": "string",
                            "description": "Uploaded file's path (including security token) generated by the system and returned in the response of the `Create import request` endpoint.",
                            "example": "https://example.com/tenant/import/bulk/1654680575676.csv?X-Amz-Security-Token=IQoJb3JpZ2"
                        },
                        "module": {
                            "type": "string",
                            "description": "Uploaded file's module",
                            "example": "ORDER",
                            "enum": [
                                "ALLOCATION",
                                "ORDER",
                                "LOCATION",
                                "SHIPMENT",
                                "INVENTORY",
                                "INVOICE",
                                "TRANSFER"
                            ]
                        },
                        "type": {
                            "type": "string",
                            "description": "Import type",
                            "example": "BULK",
                            "enum": [
                                "BULK",
                                "OVERLAY",
                                "ROOT"
                            ]
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Uploaded file's current status",
                            "example": "INITIATED",
                            "enum": [
                                "INITIATED",
                                "PROCESSING",
                                "COMPLETED",
                                "SYSTEM_ERROR"
                            ]
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of import request",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Date and time record was last modified",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        }
                    },
                    "description": "Import response object"
                },
                "importSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]import\\.[a-zA-Z.\\-_]*)(,([+-]import\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property on which data is to be sorted. Prefix with `+` to sort ascending, and `-` to sort descending.",
                            "example": "+import.createdAt",
                            "default": "-import.createdAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/singleValueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/multipleValuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Import search request object",
                    "example": {
                        "sort": "-import.finishedAt",
                        "filters": [
                            {
                                "field": "import.statusCode",
                                "value": "INITIATED"
                            }
                        ]
                    }
                },
                "importsSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^import\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "import.events"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Search condition to apply filter",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Search filter",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/singleValueSearchFilter",
                            "NEQ": "#/components/schemas/singleValueSearchFilter",
                            "LT": "#/components/schemas/singleValueSearchFilter",
                            "GT": "#/components/schemas/singleValueSearchFilter",
                            "LTE": "#/components/schemas/singleValueSearchFilter",
                            "GTE": "#/components/schemas/singleValueSearchFilter",
                            "IN": "#/components/schemas/multipleValuesSearchFilter",
                            "NIN": "#/components/schemas/multipleValuesSearchFilter"
                        }
                    }
                },
                "singleValueSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "description": "Single-value search filter",
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/importsSearchFilter"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "object",
                                    "description": "A single value is used in combination with `field` (the singleValueSearchFilter), except when the condition is IN or NIN. When the condition is IN or NIN, multiple values are used (the multipleValuesSearchFilter).",
                                    "example": "ORDER_CREATE",
                                    "oneOf": [
                                        {
                                            "type": "string",
                                            "description": "Target record's non-numeric identifier",
                                            "example": "ORDER_CREATE"
                                        },
                                        {
                                            "type": "number",
                                            "description": "Target record's numeric identifier",
                                            "format": "int64",
                                            "example": 112233
                                        },
                                        {
                                            "type": "number",
                                            "description": "Target record's numeric identifier",
                                            "format": "double",
                                            "example": 1122.33
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                "multipleValuesSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "description": "Multiple-value search filter",
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/importsSearchFilter"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "values": {
                                    "maxItems": 25,
                                    "minItems": 1,
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "A single value is used in combination with `field` (the singleValueSearchFilter), except when the condition is IN or NIN. When the condition is IN or NIN, multiple values are used (the multipleValuesSearchFilter).",
                                        "example": "ORDER_CREATE",
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "description": "Target record's non-numeric identifier",
                                                "example": "ORDER_CREATE"
                                            },
                                            {
                                                "type": "number",
                                                "description": "Target record's numeric identifier",
                                                "format": "int64",
                                                "example": 112233
                                            },
                                            {
                                                "type": "number",
                                                "description": "Target record's numeric identifier",
                                                "format": "double",
                                                "example": 1122.33
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    ]
                },
                "importCount": {
                    "type": "object",
                    "properties": {
                        "uploaded": {
                            "type": "integer",
                            "description": "Total rows in the file",
                            "format": "int32",
                            "example": 10000
                        },
                        "processed": {
                            "type": "integer",
                            "description": "Total rows processed in the file. `processed` = `uploaded` - `error`<br>**Note:** Rows that are not formatted according to system requirements will not be imported.",
                            "format": "int32",
                            "example": 8000
                        },
                        "error": {
                            "type": "integer",
                            "description": "Total rows with errors in the file",
                            "format": "int32",
                            "example": 2000
                        }
                    },
                    "description": "Import count object"
                },
                "importStatusResponse": {
                    "required": [
                        "createdAt",
                        "importId"
                    ],
                    "type": "object",
                    "properties": {
                        "attributes": {
                            "description": "Custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "attribute": "12345"
                            },
                            "type": "object"
                        },
                        "importId": {
                            "type": "string",
                            "description": "Imported file's unique ID",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "module": {
                            "type": "string",
                            "description": "Uploaded file's module",
                            "example": "ORDER",
                            "enum": [
                                "ALLOCATION",
                                "ORDER",
                                "LOCATION",
                                "SHIPMENT",
                                "INVENTORY",
                                "INVOICE",
                                "TRANSFER"
                            ]
                        },
                        "type": {
                            "type": "string",
                            "description": "Import type",
                            "example": "BULK",
                            "enum": [
                                "BULK",
                                "OVERLAY",
                                "ROOT"
                            ]
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Uploaded file's current status",
                            "example": "INITIATED",
                            "enum": [
                                "INITIATED",
                                "PROCESSING",
                                "COMPLETED",
                                "SYSTEM_ERROR"
                            ]
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of import request",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483Z"
                        },
                        "finishedAt": {
                            "type": "string",
                            "description": "Date and time file import was completed",
                            "format": "date-time",
                            "example": "2022-08-01T18:03:28.483Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Date and time record was last modified",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        },
                        "originalFileUrl": {
                            "type": "string",
                            "description": "URL of originally uploaded file",
                            "example": "https://example.com/tenant/import/bulk/1654680575676.csv?X-Amz-Security-Token=IQoJb3JpZ2"
                        },
                        "errorFileUrl": {
                            "type": "string",
                            "description": "Path (including security token) the file was uploaded to",
                            "example": "https://example.com/tenant/import/bulk/1654680575676.csv?X-Amz-Security-Token=IQoJb3JpZ2"
                        },
                        "importCount": {
                            "$ref": "#/components/schemas/importCount"
                        }
                    },
                    "description": "Import status response object"
                },
                "searchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderResponse"
                            }
                        }
                    },
                    "description": "Search response"
                },
                "financialPostingAcknowledgeRequest": {
                    "required": [
                        "acknowledgedAt"
                    ],
                    "type": "object",
                    "properties": {
                        "acknowledgedAt": {
                            "type": "string",
                            "description": "Financial transaction acknowledgment time for the invoice. If omitted, fabric uses the time (UTC) of invoice acknowledgement call.",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "fraudStatus": "FRAUD_PASS",
                                "fraudCheckStatus": "UPDATED"
                            }
                        }
                    },
                    "description": "Request sample for acknowledging financial transaction"
                },
                "financialPostingAcknowledgeResponse": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "Generic response",
                            "example": "Success"
                        }
                    },
                    "description": "Financial transaction acknowledgement response"
                },
                "invoiceSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^invoice\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "invoice.invoiceType"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find invoice. To search using a single value, `valueSearchFilter` is used. To search using multiple values, `valuesSearchFilter` is used.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "invoiceSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]invoice\\.[a-zA-Z.\\-_]*)(,([+-]invoice\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is sorted. <p> **Note**: `-` refers to descending and `+` refers to ascending order",
                            "example": "+invoice.invoicedAt",
                            "default": "-invoice.invoicedAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Sort and filter criteria for invoice search",
                    "example": {
                        "sort": "-invoice.invoicedAt",
                        "filters": [
                            {
                                "field": "invoice.orders.orderNumber",
                                "value": "30490384",
                                "condition": "EQ"
                            },
                            {
                                "field": "invoice.invoiceType",
                                "values": [
                                    "RETURN",
                                    "SHIPMENT"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "addressWithContactsResource": {
                    "required": [
                        "addressLine1",
                        "city",
                        "countryCode",
                        "latitude",
                        "longitude",
                        "postalCode",
                        "region",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "type": {
                            "type": "string",
                            "description": "Address type",
                            "example": "Home"
                        },
                        "addressLine1": {
                            "description": "Address line 1",
                            "type": "string",
                            "example": "123 Main St."
                        },
                        "addressLine2": {
                            "description": "Address line 2",
                            "type": "string",
                            "example": "Suite 100"
                        },
                        "addressLine3": {
                            "description": "Address line 3",
                            "type": "string",
                            "example": "Seventh floor"
                        },
                        "addressLine4": {
                            "description": "Address line 4",
                            "type": "string",
                            "example": "Attention: Pat E. Kake"
                        },
                        "city": {
                            "description": "City name",
                            "type": "string",
                            "example": "Seattle"
                        },
                        "region": {
                            "description": "Region or state",
                            "type": "string",
                            "example": "WA"
                        },
                        "postalCode": {
                            "description": "Postal or ZIP code",
                            "type": "string",
                            "example": "98121"
                        },
                        "countryCode": {
                            "description": "ISO 3166-1 alpha-2 based country code",
                            "type": "string",
                            "example": "US"
                        },
                        "latitude": {
                            "description": "Address latitude, used with `longitude` to specify the address location. Decimal degrees format; negative is degrees South.<br>**Note:**Value must be between -90 and 90, both inclusive.",
                            "type": "number",
                            "format": "double",
                            "example": 47.6205
                        },
                        "longitude": {
                            "description": "Address longitude, used with `latitude` to specify the address location. Decimal degrees format; negative is degrees South.<br>**Note:**Value must be between -180 and 180, both inclusive.",
                            "type": "number",
                            "format": "double",
                            "example": -122.3493
                        },
                        "contacts": {
                            "type": "array",
                            "description": "Contacts",
                            "items": {
                                "$ref": "#/components/schemas/invoiceContact"
                            }
                        }
                    },
                    "description": "Address with contact details"
                },
                "discount": {
                    "required": [
                        "promotionId"
                    ],
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "integer",
                            "description": "Number of discounted items in an order; example- buy 2 get 2 free",
                            "format": "int32",
                            "example": 2
                        },
                        "amount": {
                            "type": "number",
                            "description": "Discounted amount for the given `quantity`",
                            "format": "double",
                            "example": 2
                        },
                        "promotionId": {
                            "type": "string",
                            "description": "Unique promotion ID either from fabric Offers service or external Offers service. When fabric Offers service is used, this is the 24-character system-generated promotion ID returned in the response of Create promotion endpoint.",
                            "example": "HNY2022"
                        },
                        "promotionCode": {
                            "type": "string",
                            "description": "Promotion code used by shoppers to take advantage of an ongoing promotion and avail discounts",
                            "example": "HNY2022"
                        },
                        "promotionName": {
                            "type": "string",
                            "description": "Promotion title or name",
                            "example": "Happy New Year"
                        },
                        "type": {
                            "type": "string",
                            "description": "Promotion type",
                            "example": "promotion"
                        }
                    },
                    "description": "Invoice discount details"
                },
                "invoiceAdjustmentResource": {
                    "type": "object",
                    "properties": {
                        "adjustmentCounter": {
                            "type": "integer",
                            "description": "Represents number of times adjustment has happened to the order",
                            "format": "int32",
                            "example": 1
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code for order adjustment, varies from merchant to merchant",
                            "example": "Incorrect Item"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Merchant-defined sub reason code",
                            "example": "Late shipping"
                        },
                        "notes": {
                            "type": "string",
                            "description": "An optional free text field and is saved as a metadata",
                            "example": "Any additional info"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Adjustment quantity",
                            "format": "int32",
                            "example": 1
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "Custom attributes specific to tenant"
                            },
                            "description": "Custom attributes specific to tenant"
                        },
                        "value": {
                            "type": "number",
                            "description": "Amount",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Invoice adjustment details"
                },
                "invoiceContact": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        }
                    },
                    "description": "Contact person's details"
                },
                "invoiceCustomer": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Identifier of the logged in user who initiated the request. This could be from either fabric Identity service or an external Identity service.",
                            "example": "62272e917b12209e68751d94"
                        },
                        "accountId": {
                            "type": "string",
                            "description": "Customer's loyalty account ID or external identifier that is used to track their loyalty program activity and rewards earned.",
                            "example": "62272e917b12209e68751d94"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated an update request",
                            "example": "62272e917b12209e68751d94"
                        },
                        "company": {
                            "type": "string",
                            "description": "Shopper's company name. This may be used for company discounts.",
                            "example": "Demo Inc"
                        },
                        "address": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    "description": "Invoice customer"
                },
                "invoiceTaxDetail": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Item fee type",
                            "example": "tax"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Amount for `type`",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Tax details for the invoice"
                },
                "invoiceFeeDetail": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Item fee type",
                            "example": "tax"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Quantity of items to which amount is charged",
                            "format": "int32",
                            "example": 1
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Refund amount for the invoice",
                            "format": "double",
                            "example": 345.56
                        },
                        "amount": {
                            "type": "number",
                            "description": "Amount charged for an item in the invoice",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Invoice fee details"
                },
                "invoiceItem": {
                    "type": "object",
                    "required": [
                        "invoiceLineNumber"
                    ],
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item. When omitted, fabric will generate it during order creation, in UUID format.",
                            "example": "1adfrghhh2346aaaf"
                        },
                        "lineItemNumber": {
                            "type": "integer",
                            "description": "Merchant-defined line item number to identify each item in an order",
                            "format": "int32",
                            "example": 1
                        },
                        "invoiceLineNumber": {
                            "type": "integer",
                            "description": "System-specified sequential number iterated for each item in the array of the invoice",
                            "format": "int32",
                            "example": 3
                        },
                        "shipmentLineItemId": {
                            "type": "string",
                            "description": "Unique identifier for shipment of the line item. This attribute is inherited from fabric shipment service.",
                            "example": "2adfrghhh2346aaaffff"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique identifier of item from fabric Products (previously called PIM) service",
                            "example": 1234455322
                        },
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated unique order ID (UUID) to which the item belongs",
                            "example": "33adfrghhh2346aaaffff"
                        },
                        "type": {
                            "type": "string",
                            "description": "Order item type",
                            "example": "WEB_PICKUP"
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock Keeping Unit (SKU), unique identifier of item",
                            "example": "P1234"
                        },
                        "invoiceQuantity": {
                            "type": "integer",
                            "description": "Total quantity invoiced. If a customer placed an order for 10 quantities of an item and only 2 got shipped, then 2 is the `invoiceQuantity`.",
                            "format": "int32",
                            "example": 10
                        },
                        "uom": {
                            "type": "string",
                            "description": "Item's unit of measurement. For example, for each quantity (EA), or GAL (Gallon), DZ (Dozens), etc.",
                            "example": "EA"
                        },
                        "itemUnitPrice": {
                            "type": "number",
                            "description": "Item's unit price",
                            "format": "double",
                            "example": 33.4
                        },
                        "invoiceLineTotal": {
                            "type": "number",
                            "description": "Total invoiced amount per line item",
                            "format": "double",
                            "example": 600
                        },
                        "itemDiscountsTotal": {
                            "type": "number",
                            "description": "Total invoiced discount amount per line item",
                            "format": "double",
                            "example": 3.45
                        },
                        "itemTaxTotal": {
                            "type": "number",
                            "description": "Total invoiced tax amount per line item",
                            "format": "double",
                            "example": 2.4
                        },
                        "itemFeeTotal": {
                            "type": "number",
                            "description": "Total invoiced fee per line item. For fee, refer to `amount` in `invoiceFeeDetail`.",
                            "format": "double",
                            "example": 33.4
                        },
                        "adjustmentTotal": {
                            "description": "Adjustment total",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                        },
                        "itemAppeasementTotal": {
                            "type": "number",
                            "description": "Total invoiced appeasement amount per line item",
                            "format": "double",
                            "example": 344.455
                        },
                        "lineItemCreatedAt": {
                            "type": "string",
                            "description": "Time order line item was created",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "locationStoreId": {
                            "type": "string",
                            "description": "ID of the store from where the item is picked for shipment",
                            "example": "4512345"
                        },
                        "returnExpirationDays": {
                            "type": "string",
                            "description": "Return expiration in days",
                            "example": "21"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Invoiced amount currency",
                            "example": "USD"
                        },
                        "fees": {
                            "type": "array",
                            "description": "Fees charged for individual items of an invoice",
                            "items": {
                                "$ref": "#/components/schemas/invoiceFeeDetail"
                            }
                        },
                        "taxDetails": {
                            "type": "array",
                            "description": "Item tax details",
                            "items": {
                                "$ref": "#/components/schemas/invoiceTaxDetail"
                            }
                        },
                        "appeasements": {
                            "type": "array",
                            "description": "Appeasements information, if `invoiceType= APPEASEMENT`",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        },
                        "adjustments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/invoiceAdjustmentResource"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "description": "Discount applicable for Item",
                            "items": {
                                "$ref": "#/components/schemas/discount"
                            }
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "If `invoiceType= SHIPPING`, the Ship-to ID corresponds to the shipment for which the invoice was generated.",
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        "returns": {
                            "type": "array",
                            "description": "If `invoiceType= RETURN`, the details of the returned items will be included in the invoice.",
                            "items": {
                                "$ref": "#/components/schemas/orderReturns"
                            }
                        }
                    },
                    "description": "Invoice item sample"
                },
                "invoiceLocation": {
                    "type": "object",
                    "properties": {
                        "locationNumber": {
                            "type": "string",
                            "description": "If `invoiceType= SHIPPING`, location number refers to the inventory location from where the order is fulfilled.",
                            "example": "3235"
                        },
                        "address": {
                            "$ref": "#/components/schemas/addressWithContactsResource"
                        }
                    },
                    "description": "Contains location details regarding shipment if `invoiceType= SHIPPING`"
                },
                "invoiceOrder": {
                    "required": [
                        "invoiceOrderTotal",
                        "orderId"
                    ],
                    "type": "object",
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated unique order ID (UUID) for which invoice is created",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-specified order number for which invoice is created.<p> **Note**: Order number can either be merchant-defined during Order creation request or it can be generated by fabric’s sequence generator feature in the Configuration service",
                            "example": "217088603"
                        },
                        "orderedAt": {
                            "type": "string",
                            "description": "System-generated order creation time",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "orderType": {
                            "type": "string",
                            "description": "Order type. Critical in order life cycle as it indicates the workflow that varies with the type. For example, Storefront orders have a different workflow than a Call Center order. fabric Orders service offers default configurations for Storefront, Call Center, Point of Sale, iOS, Android, and International",
                            "example": "WEB",
                            "enum": [
                                "WEB",
                                "CSC",
                                "MOBILE_APP",
                                "POS"
                            ]
                        },
                        "orderSubtype": {
                            "type": "string",
                            "description": "Order subtype for further order classification",
                            "example": "INTERNATIONAL",
                            "enum": [
                                "IOS",
                                "ANDROID",
                                "INTERNATIONAL"
                            ]
                        },
                        "invoiceOrderTotal": {
                            "type": "number",
                            "description": "Total amount charged for the order",
                            "format": "double",
                            "example": 245.7
                        },
                        "items": {
                            "type": "array",
                            "description": "Invoicing item list",
                            "items": {
                                "$ref": "#/components/schemas/invoiceItem"
                            }
                        },
                        "payments": {
                            "type": "array",
                            "description": "Invoicing payment list",
                            "items": {
                                "$ref": "#/components/schemas/invoicePaymentResource"
                            }
                        },
                        "fees": {
                            "type": "array",
                            "description": "Invoice fee details",
                            "items": {
                                "$ref": "#/components/schemas/invoiceFeeDetail"
                            }
                        },
                        "appeasements": {
                            "type": "array",
                            "description": "Invoice appeasement details",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        },
                        "adjustments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/invoiceAdjustmentResource"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "description": "Invoicing discount list",
                            "items": {
                                "$ref": "#/components/schemas/discount"
                            }
                        },
                        "taxDetails": {
                            "type": "array",
                            "description": "Invoicing tax details",
                            "items": {
                                "$ref": "#/components/schemas/invoiceTaxDetail"
                            }
                        },
                        "returns": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderReturnsInfo"
                            }
                        }
                    },
                    "description": "Invoice order details"
                },
                "invoicePaymentIdentifier": {
                    "type": "object",
                    "properties": {
                        "cardIdentifier": {
                            "type": "string",
                            "description": "Card number",
                            "example": "***********3456"
                        }
                    },
                    "description": "Invoice payment identifier"
                },
                "invoicePaymentResource": {
                    "type": "object",
                    "properties": {
                        "paymentCounter": {
                            "type": "integer",
                            "description": "Unique incremented number for this payment object",
                            "format": "int32",
                            "example": 1
                        },
                        "paidAt": {
                            "type": "string",
                            "description": "System-generated time (UTC) when payment was captured. In case of payment captured at checkout, this is a merchant-defined value given during order creation (UTC).",
                            "example": "2022-01-27T16:15:58.000-05:00"
                        },
                        "paymentIdentifier": {
                            "$ref": "#/components/schemas/invoicePaymentIdentifier"
                        },
                        "paymentProvider": {
                            "type": "string",
                            "description": "Name of the payment provider",
                            "example": "stripe"
                        },
                        "paymentToken": {
                            "$ref": "#/components/schemas/invoicePaymentToken"
                        },
                        "paymentMethod": {
                            "type": "string",
                            "description": "Payment method such as Paypal or Credit Card",
                            "example": "CREDIT_CARD"
                        },
                        "paymentType": {
                            "type": "string",
                            "description": "Payment type such as VISA or MasterCard",
                            "example": "VISA"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "conversion": {
                            "type": "number",
                            "description": "Conversion required for currency",
                            "format": "double",
                            "example": 1
                        },
                        "paymentStatus": {
                            "type": "string",
                            "description": "Payment status. There are no predefined values; possible values are Paid, Partially Paid, Authorized, and Error.",
                            "example": "PAID"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)",
                            "additionalProperties": {
                                "type": "object",
                                "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)"
                            }
                        },
                        "billToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "settlement": {
                            "$ref": "#/components/schemas/invoiceSettlement"
                        },
                        "authorizedAmount": {
                            "type": "number",
                            "description": "Amount authorized to be debited from the given `paymentMethod`",
                            "format": "double",
                            "example": 256.1
                        }
                    },
                    "description": "Payment resource details for the invoice"
                },
                "invoicePaymentToken": {
                    "type": "object",
                    "properties": {
                        "token": {
                            "type": "string",
                            "description": "Payment token number",
                            "example": "pi_34tr6787rt"
                        }
                    },
                    "description": "Invoice payment token"
                },
                "invoiceResponse": {
                    "required": [
                        "channelId",
                        "currency",
                        "invoiceId",
                        "invoiceTotal",
                        "shipmentId",
                        "statusCode",
                        "totalTaxAmount"
                    ],
                    "type": "object",
                    "properties": {
                        "invoiceId": {
                            "type": "string",
                            "description": "System-generated unique invoice ID",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "invoiceNumber": {
                            "type": "string",
                            "description": "Merchant-defined unique invoice number. If omitted, this is generated by fabric’s sequence generator using Configuration service.",
                            "example": "23940791"
                        },
                        "invoiceStatus": {
                            "type": "string",
                            "description": "System-generated invoice status.<br>**CAPTURED:** `authorizedAmount` is successfully captured.<br>**SETTLED:** `authorizedAmount` is successfully settled with the customer, meaning the authorized amount is fully paid by the shopper or is returned to the shopper in case of return of the item.<br>**SETTLED_FAILED:** Settlement for the `authorizedAmount` fails for a reason.<br>**PARTIAL_SETTLED:** `authorizedAmount` is partially settled. For example, the shopper might have paid some amount of the total authorized amount.",
                            "example": "CAPTURED",
                            "enum": [
                                "CAPTURED",
                                "SETTLED",
                                "SETTLE_FAILED",
                                "PARTIAL_SETTLED"
                            ]
                        },
                        "invoiceType": {
                            "type": "string",
                            "description": "System-updated invoice type.<br>**RETURN:** Return invoices are generated in the event of order returns.<br>**SHIPPING:** Shipping invoices are generated during standard invoice creation when an item is shipped.<br>**APPEASEMENT:** These invoices are created when customers are provided appeasements to fulfill their needs.<br>**ORDER_DONATION:** These invoices are created when order is not purchased by customer, but is donated.<br>**ORDER_CARRY:** These invoices are generated when it is a Cash N Carry order.<br>**EXCHANGE:** Exchange invoices are generated in the event of order exchanges.",
                            "example": "SHIPPING",
                            "enum": [
                                "RETURN",
                                "SHIPPING",
                                "APPEASEMENT",
                                "ORDER_DONATION",
                                "ORDER_CARRY",
                                "EXCHANGE"
                            ]
                        },
                        "invoicedAt": {
                            "type": "string",
                            "description": "System-generated invoice creation time (UTC)",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        },
                        "shipmentId": {
                            "type": "string",
                            "description": "24-character system-generated shipment ID for which invoice is generated",
                            "example": "62ff5c0bec0aed3c86202c32"
                        },
                        "shipmentNumber": {
                            "type": "string",
                            "description": "Merchant-specified shipment number for which invoice is generated",
                            "example": "217088603"
                        },
                        "shippedAt": {
                            "type": "string",
                            "description": "Order shipment time (UTC)",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        },
                        "orders": {
                            "type": "array",
                            "description": "Invoice order details",
                            "items": {
                                "$ref": "#/components/schemas/invoiceOrder"
                            }
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Unique value to identify ship-from location. This must be the `locationNumber` stored in the fabric Location service.",
                            "example": "3235"
                        },
                        "location": {
                            "$ref": "#/components/schemas/invoiceLocation"
                        },
                        "retail": {
                            "$ref": "#/components/schemas/invoiceRetail"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time invoice was created",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time invoice was updated",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "postedAt": {
                            "type": "string",
                            "description": "Time invoice was emitted to third-party system for financial processing",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "acknowledgedAt": {
                            "type": "string",
                            "description": "Invoice acknowledgement time by merchant",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483Z"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Current invoice status.<br>**CREATED:** Initially, the status is set as CREATED when invoice is generated automatically by fabric <br>**POSTED:** When Invoice service sends an event notification to webhook service, status gets updated to POSTED.<br>**ACKNOWLEDGED:** When retailers successfully acknowledge an invoice, status is changed to ACKNOWLEDGED.",
                            "example": "CREATED",
                            "enum": [
                                "CREATED",
                                "POSTED",
                                "ACKNOWLEDGED"
                            ]
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Sales channel ID",
                            "example": "10"
                        },
                        "invoiceTotal": {
                            "type": "number",
                            "description": "Total invoiced amount captured for the order",
                            "format": "double",
                            "example": 245.7
                        },
                        "totalTaxAmount": {
                            "type": "number",
                            "description": "Total tax amount invoiced",
                            "format": "double",
                            "example": 245.7
                        },
                        "currency": {
                            "type": "string",
                            "description": "Currency type in which amount is invoiced",
                            "example": "USD"
                        },
                        "customer": {
                            "$ref": "#/components/schemas/invoiceCustomer"
                        },
                        "auditLogs": {
                            "type": "array",
                            "description": "Audit log",
                            "items": {
                                "$ref": "#/components/schemas/auditLog"
                            }
                        },
                        "shipInfo": {
                            "$ref": "#/components/schemas/orderShipInfo"
                        }
                    },
                    "description": "Invoice response"
                },
                "invoiceRetail": {
                    "type": "object",
                    "properties": {
                        "locationNumber": {
                            "type": "integer",
                            "description": "Unique value to identify ship-from location. This must be the `locationNumber` stored in the fabric Location service.",
                            "format": "int64",
                            "example": 334
                        },
                        "cashierId": {
                            "type": "string",
                            "description": "Merchant-specified cashier ID during invoice creation",
                            "example": "CE-321"
                        }
                    },
                    "description": "Invoice retail sample"
                },
                "invoiceSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/invoiceResponse"
                            }
                        }
                    },
                    "description": "Invoice search response"
                },
                "invoiceSettlement": {
                    "type": "object",
                    "properties": {
                        "settledAt": {
                            "type": "string",
                            "description": "System-generated invoice settlement time",
                            "format": "date-time",
                            "example": "2022-01-27T21:15:58Z"
                        },
                        "settlementStatusCode": {
                            "type": "string",
                            "description": "Invoice settlement status code<br>**SETTLED:** Amount is captured successfully from the payment service<br>**PARTIAL_SETTLED:** Amount is partially captured from the payment service<br>**SETTLEMENT_FAILED:** Amount is not captured from the payment service",
                            "enum": [
                                "SETTLED",
                                "PARTIAL_SETTLED",
                                "SETTLEMENT_FAILED"
                            ],
                            "example": "SETTLED"
                        },
                        "settlementAmount": {
                            "type": "number",
                            "description": "Amount that needs to be collected from or refunded to the shopper. It is `invoicedAmount - chargedAmount`.",
                            "format": "double",
                            "example": 10.3
                        }
                    },
                    "description": "Invoice settlement details"
                },
                "orderAppeasementDetail": {
                    "type": "object",
                    "properties": {
                        "appeasementCounter": {
                            "type": "integer",
                            "description": "Sequential or incremental counter for appeasement. Used for keeping track of duplicates in the request. If omitted in the request, it is automatically generated and will not be used to check duplicates. Multiple appeasement calls for the same order can cause repetition of appeasement counter and may cause the request to be rejected completely.",
                            "format": "int32",
                            "example": 1
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined appeasement reason code; varies from merchant to merchant",
                            "example": "Incorrect Item"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code for appeasement, for another layer of classification",
                            "example": "Late shipping"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Merchant-defined appeasement amount, which should not exceed (charged amount - already refunded amount)",
                            "format": "double",
                            "example": 34.56
                        },
                        "invoicedAmount": {
                            "type": "number",
                            "description": "System-generated amount from Invoice service based on requested `amount`",
                            "format": "double",
                            "example": 34.56
                        },
                        "payments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementPaymentInfo"
                            }
                        },
                        "attributes": {
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "number": "XlQZTmFDFtPFGMxJP6oiAqN3vo+qKZ"
                            },
                            "type": "object"
                        }
                    },
                    "description": "Appeasement details"
                },
                "orderAppeasementPaymentInfo": {
                    "type": "object",
                    "properties": {
                        "paymentCounter": {
                            "type": "integer",
                            "description": "Payment counter to identify which payment to refund",
                            "format": "int32",
                            "example": 1
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Refund amount for appeasement",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Order appeasement payment info"
                },
                "orderReturns": {
                    "type": "object",
                    "properties": {
                        "returnRequestCounter": {
                            "type": "integer",
                            "description": "Unique, sequential, or incremental counter for return request",
                            "format": "int32",
                            "example": 1
                        },
                        "shipmentId": {
                            "type": "string",
                            "description": "24-character system-generated shipment ID",
                            "example": "62b37697c67b204dd18a7465"
                        },
                        "shipmentLineItemId": {
                            "type": "string",
                            "description": "Unique identifier for each item in the shipment",
                            "example": "234"
                        },
                        "shipmentQuantity": {
                            "type": "integer",
                            "description": "Shipped quantity of given item",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Refund amount",
                            "format": "double",
                            "example": 11.29
                        },
                        "invoicedAmount": {
                            "type": "number",
                            "description": "System-generated amount from Invoice service based on requested `amount`",
                            "format": "double",
                            "example": 11.29
                        },
                        "returnsReceivedAt": {
                            "type": "string",
                            "description": "System-generated time of returned item that has come back to the facility (UTC)",
                            "format": "date-time",
                            "example": "2022-09-14T14:07:36.861Z"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code for return",
                            "example": "Incorrect item"
                        },
                        "exchangeLineItemId": {
                            "type": "string",
                            "description": "Exchange line item ID",
                            "example": "62f3dfc438bcab1951be0a19"
                        },
                        "isExchangeItemReturned": {
                            "type": "boolean",
                            "description": "true: Item received for exchange is returned<br>false: Item received for exchange is not returned",
                            "default": false,
                            "example": true
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "refunds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        }
                    },
                    "description": "Order return details"
                },
                "orderReturnsInfo": {
                    "type": "object",
                    "properties": {
                        "totalRefundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount for the return request",
                            "format": "double",
                            "example": 11.29
                        },
                        "invoicedAmount": {
                            "type": "number",
                            "description": "System-generated invoiced amount for the return request",
                            "format": "double",
                            "example": 11.29
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "refunds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "paymentCounterRefundDetails": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/paymentCounterRefundInfo"
                            }
                        },
                        "returnCounter": {
                            "type": "integer",
                            "description": "Unique, sequential or incremental counter for return request",
                            "format": "int32",
                            "example": 1
                        }
                    },
                    "description": "Order returns info"
                },
                "orderShipInfo": {
                    "required": [
                        "shipToId"
                    ],
                    "type": "object",
                    "properties": {
                        "shipToId": {
                            "type": "string",
                            "description": "System-generated UUID associated with `shipInfo`, generated from CnC service. <p> **Note**: An order can have multiple ship-to (delivery) locations and items going to the same location have one `shipToId`.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Applicable tax code, varies from state to state",
                            "example": "FR01"
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Unique value to identify ship-from or Buy Online Pickup from Store location. This must be the locationNumber stored in the fabric Location service.",
                            "example": "123"
                        },
                        "pickups": {
                            "type": "array",
                            "description": "Order pickup details",
                            "items": {
                                "$ref": "#/components/schemas/orderPickup"
                            }
                        },
                        "shipToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "taxDetails": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/taxDetail"
                            }
                        },
                        "shipMethod": {
                            "type": "string",
                            "description": "Shipping method",
                            "example": "Parcel post delivery"
                        },
                        "shipToType": {
                            "type": "string",
                            "description": "Type of shipping address. There are no pre-defined values; the possible values are SDD (Same Day Delivery), Point-of-Sale (POS), etc.",
                            "example": "SHIP_TO_ADDRESS"
                        },
                        "estimatedShipDate": {
                            "type": "string",
                            "description": "Estimated shipping time (UTC) provided by merchant",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "estimatedDeliveryDate": {
                            "type": "string",
                            "description": "Estimated delivery time (UTC) provided by carrier",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "shipToPrice": {
                            "type": "number",
                            "description": "Merchant-defined shipping cost",
                            "format": "double",
                            "example": 20
                        },
                        "shipToDiscount": {
                            "type": "number",
                            "description": "Merchant-defined shipping discount amount",
                            "format": "double",
                            "example": 12.6
                        },
                        "discounts": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/shippingDiscount"
                            }
                        },
                        "shipToTaxTotal": {
                            "type": "number",
                            "description": "Total shipping tax",
                            "format": "double",
                            "example": 12.6
                        },
                        "shipmentInstructions": {
                            "type": "string",
                            "description": "Shipment instructions",
                            "example": "Handle with care"
                        },
                        "isInvoiced": {
                            "type": "boolean",
                            "example": true,
                            "description": "true: At least one captured invoice is created by Invoice service <br> false: Captured invoice is not created",
                            "default": false
                        },
                        "attributes": {
                            "type": "object",
                            "description": "User defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "giftMessage": "[]"
                            }
                        }
                    },
                    "description": "Order shipment details"
                },
                "paymentCounterRefundInfo": {
                    "type": "object",
                    "properties": {
                        "paymentCounter": {
                            "type": "integer",
                            "description": "Unique incremented number for this payment object",
                            "format": "int32",
                            "example": 1
                        },
                        "amount": {
                            "type": "number",
                            "description": "Final refunded amount",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Payment counter refund details"
                },
                "returnFeeDetail": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Return fee type",
                            "example": "FEE",
                            "enum": [
                                "TAX",
                                "DISCOUNT",
                                "FEE",
                                "ITEM"
                            ]
                        },
                        "name": {
                            "type": "string",
                            "description": "Fee name",
                            "example": "RETURN_FEE"
                        },
                        "reason": {
                            "type": "string",
                            "description": "Merchant-defined return reason",
                            "example": "Return fee"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Merchant-defined return amount",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Return fee details"
                },
                "shippingDiscount": {
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "integer",
                            "description": "Number of discounted items in an order such as `buy 2 get 1 free`. In this case `1` is the discounted quantity.",
                            "format": "int32",
                            "example": 1
                        },
                        "amount": {
                            "type": "number",
                            "description": "Discounted amount for the given `quantity`",
                            "format": "double",
                            "example": 2.99
                        },
                        "unit": {
                            "type": "string",
                            "description": "Indicates whether the discount is in amount or percentage",
                            "example": "AMOUNT_OFF"
                        },
                        "value": {
                            "type": "integer",
                            "description": "Value corresponding to `unit`",
                            "format": "int32",
                            "example": 10
                        },
                        "promotionId": {
                            "type": "string",
                            "description": "Unique promotion ID either from fabric Offers service or external Offers serice. When fabric Offers service is used, this is the 24-character system-generated promotion ID returned in the response of create promotion endpoint.",
                            "example": "SHIPFREE"
                        },
                        "promotionCode": {
                            "type": "string",
                            "description": "Promotion code used by shoppers to take advantage of an ongoing promotion.",
                            "example": "SHIPFREE"
                        },
                        "promotionName": {
                            "type": "string",
                            "description": "Promotion name",
                            "example": "Free Shipping"
                        }
                    },
                    "description": "Details of shipping discount"
                },
                "taxDetail": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Applied tax name",
                            "example": "STATE"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code applied",
                            "example": "FR01"
                        },
                        "rateType": {
                            "type": "string",
                            "description": "Rate type",
                            "example": "PERCENTAGE"
                        },
                        "rate": {
                            "type": "number",
                            "description": "Rate",
                            "format": "double",
                            "example": 10
                        },
                        "amount": {
                            "type": "number",
                            "description": "Tax amount",
                            "format": "double",
                            "example": 34.56
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                            },
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                        }
                    },
                    "description": "Tax details"
                },
                "listRequest": {
                    "required": [
                        "name",
                        "userId"
                    ],
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Shopping list name",
                            "example": "list1"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Unique identifier of a logged-in user, from Identity service. <p> **Note**: Only a logged-in user can create shopping lists.",
                            "example": "user1"
                        },
                        "listType": {
                            "type": "string",
                            "description": "List type",
                            "example": "type1"
                        },
                        "notes": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "note11"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "key": "value"
                            }
                        }
                    },
                    "description": "Details to create shopping list"
                },
                "listResponse": {
                    "required": [
                        "name",
                        "userId"
                    ],
                    "type": "object",
                    "properties": {
                        "listId": {
                            "type": "string",
                            "description": "24-character system-generated list ID",
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        "name": {
                            "type": "string",
                            "description": "Shopping list name",
                            "example": "list1"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Unique identifier of a logged-in user, from Identity service. <p> **Note**: Only a logged-in user can create shopping lists.",
                            "example": "user1"
                        },
                        "listType": {
                            "type": "string",
                            "description": "List type",
                            "example": "type1"
                        },
                        "notes": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "note11"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "key": "value"
                            }
                        },
                        "itemCount": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "Number of items in a list",
                            "format": "int32",
                            "example": 1
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of shopping list creation (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to shopping list (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        }
                    },
                    "description": "Shopping list details"
                },
                "deleteListDetailsRequest": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "maxItems": 100,
                            "minItems": 1,
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/skuItem"
                            }
                        }
                    },
                    "description": "Request to delete list"
                },
                "skuItem": {
                    "required": [
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), a unique item identifier",
                            "example": "sku1"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "A unique item identifier similar to `sku`",
                            "example": 123
                        }
                    },
                    "description": "Item identifiers"
                },
                "deleteListDetailsResponse": {
                    "type": "object",
                    "properties": {
                        "errors": {
                            "type": "array",
                            "description": "Errors",
                            "items": {
                                "$ref": "#/components/schemas/errorWhileDeletion"
                            }
                        },
                        "data": {
                            "type": "array",
                            "description": "Current shopping list",
                            "items": {
                                "$ref": "#/components/schemas/listItemResponse"
                            }
                        }
                    },
                    "description": "Details of current list"
                },
                "errorWhileDeletion": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Error type",
                            "example": "NOT_FOUND"
                        },
                        "message": {
                            "type": "string",
                            "description": "Error message",
                            "example": "SKU does not exist for user ID"
                        }
                    },
                    "description": "Error response"
                },
                "listItemResponse": {
                    "required": [
                        "listId",
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "listId": {
                            "type": "string",
                            "description": "24-character system-generated list ID",
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), a unique item identifier",
                            "example": "sku1"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "A unique item identifier similar to `sku`",
                            "example": 123
                        },
                        "quantity": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "Item quantity",
                            "format": "int32",
                            "example": 1
                        },
                        "attributes": {
                            "type": "object",
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "additionalProperties": {
                                "type": "object",
                                "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                                "example": {
                                    "key": "value"
                                }
                            },
                            "example": {
                                "key": "value"
                            }
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of shopping list creation (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to shopping list (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        }
                    },
                    "description": "Details of items in a list"
                },
                "createItem": {
                    "required": [
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), a unique item identifier",
                            "example": "sku1"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "A unique item identifier similar to `sku`",
                            "example": 123
                        },
                        "incrementQuantity": {
                            "type": "boolean",
                            "description": "true: Quantity will be incremented <br> false: Quantity will remain the same <br> Applicable for update scenario",
                            "example": true,
                            "default": false
                        }
                    },
                    "description": "Details to add or update items"
                },
                "createListDetailsRequest": {
                    "type": "object",
                    "properties": {
                        "items": {
                            "maxItems": 100,
                            "minItems": 1,
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/createItem"
                            }
                        }
                    },
                    "description": "Details to create or update a list"
                },
                "listItemsResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/listItemResponse"
                            }
                        }
                    },
                    "description": "Item details and pagination specifications"
                },
                "listWithItemResponse": {
                    "required": [
                        "name",
                        "userId"
                    ],
                    "type": "object",
                    "properties": {
                        "listId": {
                            "type": "string",
                            "description": "24-character system-generated list ID",
                            "example": "62fa3796841ea417fa71d2a9"
                        },
                        "name": {
                            "type": "string",
                            "description": "Shopping list name",
                            "example": "list1"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Unique identifier of a logged-in user, from Identity service. <p> **Note**: Only a logged-in user can create shopping lists.",
                            "example": "user1"
                        },
                        "listType": {
                            "type": "string",
                            "description": "List type",
                            "example": "type1"
                        },
                        "notes": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "note11"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "key": "value"
                            }
                        },
                        "itemCount": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "Number of items in a list",
                            "format": "int32",
                            "example": 1
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of shopping list creation (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to shopping list (UTC)",
                            "format": "date-time",
                            "example": "2022-11-22T10:26:38Z"
                        },
                        "items": {
                            "type": "array",
                            "description": "List of items",
                            "items": {
                                "$ref": "#/components/schemas/listItemResponse"
                            }
                        }
                    },
                    "description": "List item details"
                },
                "listsResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "description": "Details of shopping list",
                            "items": {
                                "$ref": "#/components/schemas/listResponse"
                            }
                        }
                    },
                    "description": "List details and pagination specifications"
                },
                "listDetails": {
                    "type": "object",
                    "properties": {
                        "count": {
                            "type": "integer",
                            "description": "Total number of records in response",
                            "format": "int32",
                            "example": 100
                        },
                        "limit": {
                            "type": "integer",
                            "description": "Maximum number of records per page",
                            "format": "int32",
                            "example": 10,
                            "default": 10
                        },
                        "offset": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "Number of records to skip before returning all records. For example, `offset=20, limit=10` returns records 21-30.",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "data": {
                            "type": "array",
                            "description": "Details of shopping lists",
                            "items": {
                                "$ref": "#/components/schemas/listWithItemResponse"
                            }
                        }
                    },
                    "description": "Details of lists and pagination specifications"
                },
                "resendNotificationRequest": {
                    "required": [
                        "documentId",
                        "documentType",
                        "notificationType"
                    ],
                    "type": "object",
                    "properties": {
                        "documentId": {
                            "type": "string",
                            "description": "Unique ID based on `documentType`. When `documentType` is `ORDER`, this is the order ID.",
                            "example": "62e17f90842dbc2f43abd072"
                        },
                        "documentType": {
                            "type": "string",
                            "description": "Document type",
                            "example": "ORDER",
                            "enum": [
                                "ALLOCATION",
                                "ORDER",
                                "LOCATION",
                                "SHIPMENT",
                                "INVENTORY",
                                "INVOICE",
                                "TRANSFER"
                            ]
                        },
                        "notificationType": {
                            "type": "string",
                            "description": "Notification type",
                            "example": "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                            "enum": [
                                "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                                "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                                "BOPIS_ORDER_CONFIRMATION_EMAIL",
                                "SHIPPING_CONFIRMATION_EMAIL",
                                "BOPIS_ORDER_READY_FOR_PICKUP",
                                "BOPIS_ORDER_COMPLETED",
                                "BOPIS_REMINDER_EMAIL",
                                "BACKORDER_NOTIFICATION_EMAIL",
                                "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                                "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                                "BACKORDER_CANCEL_EMAIL",
                                "BACKORDER_AUTH_DECLINE_EMAIL",
                                "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                                "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                                "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                                "RETURN_NOTIFICATION_EMAIL",
                                "REFUND_NOTIFICATION_EMAIL",
                                "APPEASEMENT_NOTIFICATION_EMAIL",
                                "EXCHANGE_NOTIFICATION_EMAIL",
                                "SHIPMENT_CREATED",
                                "ORDER_CREATED",
                                "INVOICE_POSTED",
                                "HIGH_ALERT_NOTIFICATION_EMAIL",
                                "MEDIUM_ALERT_NOTIFICATION_EMAIL",
                                "LOW_ALERT_NOTIFICATION_EMAIL"
                            ]
                        },
                        "overrideContactInfo": {
                            "type": "array",
                            "description": "Details to override existing contact info",
                            "items": {
                                "$ref": "#/components/schemas/invoiceContact"
                            }
                        }
                    },
                    "description": "Resend notification request"
                },
                "apiResponse": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "Response message",
                            "example": "OK"
                        }
                    },
                    "description": "Response message"
                },
                "documentType": {
                    "type": "string",
                    "description": "Document type",
                    "example": "ORDER",
                    "enum": [
                        "ALLOCATION",
                        "ORDER",
                        "LOCATION",
                        "SHIPMENT",
                        "INVENTORY",
                        "INVOICE",
                        "TRANSFER"
                    ]
                },
                "notificationResponse": {
                    "type": "object",
                    "properties": {
                        "documentId": {
                            "type": "string",
                            "description": "Unique ID based on `documentType`. When `documentType` is `ORDER`, this is the order ID.",
                            "example": "6319c04f2ec591b653f328dd"
                        },
                        "documentType": {
                            "$ref": "#/components/schemas/documentType"
                        },
                        "notificationType": {
                            "$ref": "#/components/schemas/notificationType"
                        },
                        "overrideContactInfo": {
                            "type": "array",
                            "description": "New details of contact person",
                            "items": {
                                "$ref": "#/components/schemas/invoiceContact"
                            }
                        },
                        "notificationIds": {
                            "type": "array",
                            "description": "Notification IDs",
                            "items": {
                                "type": "string",
                                "description": "Notification ID",
                                "example": "6sfd76678ec591b653f328dd"
                            }
                        }
                    },
                    "description": "Notification details"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Notification type",
                    "example": "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                    "enum": [
                        "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                        "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                        "BOPIS_ORDER_CONFIRMATION_EMAIL",
                        "SHIPPING_CONFIRMATION_EMAIL",
                        "BOPIS_ORDER_READY_FOR_PICKUP",
                        "BOPIS_ORDER_COMPLETED",
                        "BOPIS_REMINDER_EMAIL",
                        "BACKORDER_NOTIFICATION_EMAIL",
                        "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                        "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                        "BACKORDER_CANCEL_EMAIL",
                        "BACKORDER_AUTH_DECLINE_EMAIL",
                        "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                        "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                        "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                        "RETURN_NOTIFICATION_EMAIL",
                        "REFUND_NOTIFICATION_EMAIL",
                        "APPEASEMENT_NOTIFICATION_EMAIL",
                        "EXCHANGE_NOTIFICATION_EMAIL",
                        "SHIPMENT_CREATED",
                        "ORDER_CREATED",
                        "INVOICE_POSTED",
                        "HIGH_ALERT_NOTIFICATION_EMAIL",
                        "MEDIUM_ALERT_NOTIFICATION_EMAIL",
                        "LOW_ALERT_NOTIFICATION_EMAIL"
                    ]
                },
                "acknowledgmentRequest": {
                    "required": [
                        "acknowledgedAt",
                        "documentId",
                        "documentType",
                        "notificationType"
                    ],
                    "type": "object",
                    "properties": {
                        "documentId": {
                            "type": "string",
                            "description": "Unique ID based on `documentType`. When `documentType` is `ORDER`, this is the order ID.",
                            "example": "6319c04f2ec591b653f328dd"
                        },
                        "documentType": {
                            "type": "string",
                            "description": "Document type",
                            "example": "ORDER",
                            "enum": [
                                "ALLOCATION",
                                "ORDER",
                                "LOCATION",
                                "SHIPMENT",
                                "INVENTORY",
                                "INVOICE",
                                "TRANSFER"
                            ]
                        },
                        "notificationType": {
                            "type": "string",
                            "description": "Notification type",
                            "example": "BOPIS_ORDER_COMPLETED",
                            "enum": [
                                "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                                "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                                "BOPIS_ORDER_CONFIRMATION_EMAIL",
                                "SHIPPING_CONFIRMATION_EMAIL",
                                "BOPIS_ORDER_READY_FOR_PICKUP",
                                "BOPIS_ORDER_COMPLETED",
                                "BOPIS_REMINDER_EMAIL",
                                "BACKORDER_NOTIFICATION_EMAIL",
                                "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                                "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                                "BACKORDER_CANCEL_EMAIL",
                                "BACKORDER_AUTH_DECLINE_EMAIL",
                                "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                                "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                                "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                                "RETURN_NOTIFICATION_EMAIL",
                                "REFUND_NOTIFICATION_EMAIL",
                                "APPEASEMENT_NOTIFICATION_EMAIL",
                                "EXCHANGE_NOTIFICATION_EMAIL",
                                "SHIPMENT_CREATED",
                                "ORDER_CREATED",
                                "INVOICE_POSTED",
                                "HIGH_ALERT_NOTIFICATION_EMAIL",
                                "MEDIUM_ALERT_NOTIFICATION_EMAIL",
                                "LOW_ALERT_NOTIFICATION_EMAIL"
                            ]
                        },
                        "acknowledgedAt": {
                            "type": "string",
                            "description": "Notification event acknowledgement time (UTC format)",
                            "example": "2022-07-14T10:27:28-05:00"
                        }
                    },
                    "description": "Acknowledgment request details"
                },
                "updateItemsShipInfoRequest": {
                    "required": [
                        "shipInfo",
                        "lineItemIds"
                    ],
                    "type": "object",
                    "properties": {
                        "shipinfo": {
                            "$ref": "#/components/schemas/orderShipInfo"
                        },
                        "lineItemIds": {
                            "type": "array",
                            "description": "List of lineItemIds of items for which shipping information is to be updated",
                            "example": [
                                "123k4h123k",
                                "123k4h124k"
                            ]
                        },
                        "updatedBy": {
                            "type": "string",
                            "description": "User (ID or name) who is requesting the update",
                            "example": "JohnDoe123"
                        }
                    }
                },
                "orderCreditUpdateRequest": {
                    "required": [
                        "creditId",
                        "statusCode"
                    ],
                    "type": "object",
                    "properties": {
                        "creditId": {
                            "type": "string",
                            "description": "Unique UUID of credit",
                            "example": "a05b72dc-78d8-4ea4-90fc-2fe6a1fe1111"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Credit status",
                            "example": "PENDING",
                            "enum": [
                                "PENDING",
                                "CONFIRMED",
                                "FAILED",
                                "CANCELED"
                            ]
                        },
                        "note": {
                            "type": "string",
                            "description": "Placeholder for additional information, if any.",
                            "example": "Credit request initiated"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "giftCardNumber": "XlQZTmFDFtPFGMxJP6oiAqN3vo+qKZ"
                            }
                        }
                    },
                    "description": "Request to update credits details"
                },
                "creditsRequest": {
                    "required": [
                        "amount",
                        "currency",
                        "reasonCode",
                        "source",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Credit type. Currently, supports only Gift Card",
                            "example": "GIFT_CARD",
                            "enum": [
                                "GIFT_CARD"
                            ]
                        },
                        "source": {
                            "type": "string",
                            "description": "Source of credits request",
                            "example": "CSR"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Credits amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "paymentCounter": {
                            "type": "integer",
                            "description": "A sequential or incremental counter associated with a payment for an order. Applicable in refund scenarios to identify the specific payment for refund.",
                            "format": "int32",
                            "example": 1
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "giftCardNumber": "XlQZTmFDFtPFGMxJP6oiAqN3vo+qKZ"
                            }
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code",
                            "example": "EC"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code",
                            "example": "ACC"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated a the credits request",
                            "example": "12312232"
                        },
                        "note": {
                            "type": "string",
                            "description": "Note",
                            "example": "Credit request initiated"
                        },
                        "policyCode": {
                            "type": "string",
                            "description": "Merchant-defined policy code, varies from merchant to merchant. If omitted, the default policy is used.",
                            "example": "RC1"
                        }
                    },
                    "description": "Request for credits"
                },
                "creditsResponse": {
                    "required": [
                        "amount",
                        "currency",
                        "reasonCode",
                        "source",
                        "type"
                    ],
                    "type": "object",
                    "properties": {
                        "creditId": {
                            "type": "string",
                            "description": "Unique UUID of credit",
                            "example": "a05b72dc-78d8-4ea4-90fc-2fe6a1fe1111"
                        },
                        "type": {
                            "type": "string",
                            "description": "Credit type. Currently, supports only Gift Card",
                            "example": "GIFT_CARD",
                            "enum": [
                                "GIFT_CARD"
                            ]
                        },
                        "source": {
                            "type": "string",
                            "description": "Source of credits request",
                            "example": "CSR"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Credits amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "paymentCounter": {
                            "type": "integer",
                            "description": "A sequential or incremental counter associated with a payment for an order. Applicable in refund scenarios to identify the specific payment for refund.",
                            "format": "int32",
                            "example": 1
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "giftCardNumber": "XlQZTmFDFtPFGMxJP6oiAqN3vo+qKZ"
                            }
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Credit status",
                            "example": "PENDING",
                            "enum": [
                                "PENDING",
                                "CONFIRMED",
                                "FAILED",
                                "CANCELED"
                            ]
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code",
                            "example": "EC"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code",
                            "example": "ACC"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated a the credits request",
                            "example": "12312232"
                        },
                        "note": {
                            "type": "string",
                            "description": "Note",
                            "example": "Credit request initiated"
                        },
                        "policyCode": {
                            "type": "string",
                            "description": "Merchant-defined policy code, varies from merchant to merchant. If omitted, the default policy is used.",
                            "example": "RC1"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Credits creation time, in UTC format",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to credits, in UTC format.",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        }
                    },
                    "description": "Credit response"
                },
                "creditsEligibilityResponse": {
                    "type": "object",
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated order ID",
                            "example": "62f3982438bcab1951be0a19"
                        },
                        "description": {
                            "type": "string",
                            "description": "Description provided while requesting credits (for reference)",
                            "example": "Policy used to add credits"
                        },
                        "eligibleReasonCodes": {
                            "type": "array",
                            "description": "Reason codes to support credits request",
                            "items": {
                                "$ref": "#/components/schemas/reasonCodeAndDescription"
                            }
                        },
                        "policyType": {
                            "type": "string",
                            "description": "Policy type used to check credits eligibility",
                            "example": "credits"
                        },
                        "policyName": {
                            "type": "string",
                            "description": "Merchant-given policy name.",
                            "example": "Credits policy"
                        }
                    },
                    "description": "Credits eligibility model"
                },
                "orderCreditsRequest": {
                    "required": [
                        "credits"
                    ],
                    "type": "object",
                    "properties": {
                        "credits": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/creditsRequest"
                            }
                        }
                    },
                    "description": "Credits request"
                },
                "orderCreditsResponse": {
                    "type": "object",
                    "properties": {
                        "credits": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/creditsResponse"
                            }
                        }
                    },
                    "description": "Credits response"
                },
                "updateCustomerRequest": {
                    "type": "object",
                    "properties": {
                        "orderIds": {
                            "type": "array",
                            "description": "Order IDs for which customer information will be updated",
                            "example": [
                                "123k4h123k",
                                "123k4h124k"
                            ],
                            "items": {
                                "type": "string",
                                "description": "Order IDs for which customer information will be updated",
                                "example": "[\"123k4h123k\",\"123k4h124k\"]"
                            }
                        },
                        "customer": {
                            "$ref": "#/components/schemas/UpdateCustomerRequest"
                        }
                    },
                    "description": "Request to update customer info"
                },
                "UpdateCustomerRequest": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Identifier of the logged in user who initiated the request. This could be from either fabric Identity service or an external Identity service.",
                            "example": "62272e917b12209e68751d94"
                        },
                        "accountId": {
                            "type": "string",
                            "description": "Customer's loyalty account ID or external identifier that is used to track their loyalty program activity and rewards earned.",
                            "example": "62272e917b12209e68751d94"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated an update request",
                            "example": "62272e917b12209e68751d94"
                        },
                        "company": {
                            "type": "string",
                            "description": "Shopper's company name. This may be used for company discounts.",
                            "example": "Demo Inc"
                        }
                    },
                    "description": "Update customer info request"
                },
                "customerResponse": {
                    "type": "object",
                    "properties": {
                        "totalRecordCount": {
                            "type": "integer",
                            "description": "Total record count",
                            "format": "int32",
                            "example": 10
                        },
                        "successCount": {
                            "type": "integer",
                            "description": "Success count",
                            "format": "int32",
                            "example": 18
                        },
                        "failedCount": {
                            "type": "integer",
                            "description": "Failed count",
                            "format": "int32",
                            "example": 2
                        },
                        "failedOrderIds": {
                            "type": "array",
                            "description": "OrderIds of orders for which update failed",
                            "example": [
                                "123k4h123k",
                                "123k4h124k"
                            ],
                            "items": {
                                "type": "string",
                                "description": "OrderIds of orders for which update failed",
                                "example": "[\"123k4h123k\",\"123k4h124k\"]"
                            }
                        }
                    },
                    "description": "Response for customer update request"
                },
                "pickupRequest": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Contact person's email",
                            "example": "test@example.com"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        },
                        "pickupType": {
                            "type": "string",
                            "description": "Order pickup type",
                            "example": "PRIMARY",
                            "enum": [
                                "PRIMARY",
                                "ALTERNATE"
                            ]
                        }
                    },
                    "description": "Pickup details"
                },
                "orderDiscount": {
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "integer",
                            "description": "Number of discounted items in an order such as buy 2 get 1 free. In this case 1 is the discounted quantity.",
                            "format": "int32",
                            "example": 1
                        },
                        "amount": {
                            "type": "number",
                            "description": "Discounted amount for the given `quantity`",
                            "format": "double",
                            "example": 2.99
                        },
                        "unit": {
                            "type": "string",
                            "description": "Indicates whether the discount is in amount or percentage",
                            "example": "AMOUNT_OFF"
                        },
                        "value": {
                            "type": "integer",
                            "description": "Value corresponding to `unit`",
                            "format": "int32",
                            "example": 10
                        },
                        "promotionId": {
                            "type": "string",
                            "description": "Unique promotion ID either from fabric Offers service or external Offers serice. When fabric Offers service is used, this is the 24-character system-generated promotion ID returned in the response of create promotion endpoint.",
                            "example": "HNY2022"
                        },
                        "promotionCode": {
                            "type": "string",
                            "description": "Promotion code used by shoppers to take advantage of an ongoing promotion.",
                            "example": "HNY2022"
                        },
                        "promotionName": {
                            "type": "string",
                            "description": "Promotion name",
                            "example": "New Year"
                        },
                        "invoiceQuantity": {
                            "type": "integer",
                            "description": "Total quantity invoiced. If customer placed order for 10 quantity of an item and only 2 got shipped, then 2 is the `invoiceQuantity`.",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    "description": "Details of order discount"
                },
                "orderFeeDetail": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Applied tax name",
                            "example": "STATE"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code applied",
                            "example": "FR01"
                        },
                        "rateType": {
                            "type": "string",
                            "description": "Rate type",
                            "example": "PERCENTAGE"
                        },
                        "rate": {
                            "type": "number",
                            "description": "Rate",
                            "format": "double",
                            "example": 10
                        },
                        "amount": {
                            "type": "number",
                            "description": "Tax amount",
                            "format": "double",
                            "example": 34.56
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                            },
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                        },
                        "invoicedAmount": {
                            "type": "number",
                            "description": "System-generated amount from Invoice service based on requested `amount`",
                            "format": "double",
                            "example": 34.56
                        }
                    },
                    "description": "Fee details"
                },
                "itemFeeDetails": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Applied tax name",
                            "example": "STATE"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code applied",
                            "example": "FR01"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Tax amount",
                            "format": "double",
                            "example": 34.56
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                            },
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs)."
                        },
                        "invoiceQuantity": {
                            "type": "integer",
                            "description": "Total quantity invoiced. If customer placed order for 10 quantity of an item and only 2 got shipped then 2 is the `invoiceQuantity`",
                            "format": "int32",
                            "example": 10
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Total refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Total number of items in the order",
                            "format": "int32",
                            "example": 12
                        }
                    },
                    "description": "Details of item fees"
                },
                "orderItem": {
                    "required": [
                        "itemId",
                        "lineItemId",
                        "lineItemNumber",
                        "shipToId",
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it (in UUID format) during order creation.",
                            "example": "d538b1f1-0e45-43c6-bfc6-9666fc1188ca"
                        },
                        "lineItemNumber": {
                            "type": "integer",
                            "description": "Merchant-defined line item number to identify each item in an order",
                            "format": "int32",
                            "example": 1
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "System-generated unique identifier of item from fabric Products (PIM) service",
                            "example": 1234
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique identifier of item",
                            "example": "P1234"
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Sales channel ID",
                            "example": "WHBM"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID. Applicable in drop shipping to indicate vendor responsible for given item.",
                            "example": "P1234"
                        },
                        "adjustments": {
                            "items": {
                                "$ref": "#/components/schemas/adjustmentDetail"
                            },
                            "type": "array",
                            "description": "Price adjustments are made to modify product prices during order creation, aiming to incentivize shoppers by offering discounts and promotions based on specified criteria. Price adjustments are also made to apply coupons that the shopper has used."
                        },
                        "itemAdjustmentTotal": {
                            "description": "Total price adjustment made to the item.",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                        },
                        "itemName": {
                            "type": "string",
                            "description": "Item name",
                            "example": "Item"
                        },
                        "type": {
                            "type": "string",
                            "description": "Order type. Critical in order life cycle as it indicates the workflow that varies with the type. For example, Storefront orders have a different workflow than Call Center orders. fabric Orders service offers default configurations for Storefront, Call Center, Point of Sale, iOS, Android, and International.",
                            "example": "WEB_SHIP"
                        },
                        "itemSubtype": {
                            "type": "string",
                            "description": "Subtype of `type`, for another layer of classification",
                            "example": "Borderfree"
                        },
                        "orderedQuantity": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 60
                        },
                        "backOrderedQuantity": {
                            "type": "integer",
                            "description": "Backordered quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "orderedQuantityToShip": {
                            "type": "integer",
                            "description": "Quantity of given item that is yet to ship, out of the initially allocated quantity. For example, if a customer orders four units of an item, inventory will reserve four units of the item. If only two units are currently available and are shipped, the remaining two units will be considered as the `pendingShippedQuantity`.",
                            "format": "int32",
                            "example": 10
                        },
                        "pendingShippedBackOrderQuantity": {
                            "type": "integer",
                            "description": "Backordered quantity that is yet to be shipped. For example, If a customer places a backorder for four units of an item, inventory will reserve four units of the item to ship when they become available. If only two units are available and are shipped, the remaining two backordered units will be considered as the `pendingShippedBackOrderQuantity`.",
                            "format": "int32",
                            "example": 10
                        },
                        "shippedQuantity": {
                            "type": "integer",
                            "description": "Shipped quantity of an item",
                            "format": "int32",
                            "example": 10
                        },
                        "deliveredQuantity": {
                            "type": "integer",
                            "description": "Delivered quantity of an item",
                            "format": "int32",
                            "example": 10
                        },
                        "invoicedQuantity": {
                            "type": "integer",
                            "description": "Invoiced quantity of an item",
                            "format": "int32",
                            "example": 10
                        },
                        "cancelledQuantity": {
                            "type": "integer",
                            "description": "Cancelled quantity of an item",
                            "format": "int32",
                            "example": 10
                        },
                        "pendingReturnQuantity": {
                            "type": "integer",
                            "description": "Quantity of an item awaiting approval for return. For example, when customer initiates return request for 2 units of an item, the request will be initially in a pending status because they are awaiting approval from merchant. They are referred to as `pendingReturnQuantity`.",
                            "format": "int32",
                            "example": 10
                        },
                        "processingReturnQuantity": {
                            "type": "integer",
                            "description": "Quantity of an item currently being processed for return. For example, when merchant approves return of 1 out of 2 units of an item, then 1 is the `processingReturnQuantity`",
                            "format": "int32",
                            "example": 10
                        },
                        "rejectedReturnQuantity": {
                            "type": "integer",
                            "description": "Quantity of an item rejected in return request. For example, For example, when merchant rejects return of 1 out of 2 units of an item, then 1 is the `rejectedReturnQuantity`",
                            "format": "int32",
                            "example": 10
                        },
                        "returnedQuantity": {
                            "type": "integer",
                            "description": "Returned quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "reshippedQuantity": {
                            "type": "integer",
                            "description": "Reshipped quantity of given item (in case of lost shipment)",
                            "format": "int32",
                            "example": 10
                        },
                        "quantityInStatus": {
                            "$ref": "#/components/schemas/quantityInStatus"
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is sold or measured. It is important to accurately fulfill orders and ensure customers receive the correct quantity of products they have ordered. The possible values are EA (Each) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "System-generated ship-to ID (UUID) associated with `shipInfo`, generated from CnC service. <p> **Note**: An order can have multiple ship-to (delivery) locations and items going to the one location will have the same `shipToId`.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "itemUnitPrice": {
                            "type": "number",
                            "description": "Item's unit price",
                            "format": "double",
                            "example": 10
                        },
                        "itemSubtotal": {
                            "type": "number",
                            "description": "Recalculated item's subtotal = `itemUnitPrice x (orderedQuantity - cancelledQuantity)`",
                            "format": "double",
                            "example": 600
                        },
                        "originalItemSubtotal": {
                            "type": "number",
                            "description": "System-generated total discount, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 800
                        },
                        "itemFeeTotal": {
                            "type": "number",
                            "description": "Recalculated item's fee = `summationOfAll(itemFeeTotal)`. Refer to `amount` in `itemFeeDetails`",
                            "format": "double",
                            "example": 200
                        },
                        "originalFeeTotal": {
                            "type": "number",
                            "description": "System-generated fee total, auto-filled by Orders service when the order is placed. This is saved for reference in case the value changes later.",
                            "format": "double",
                            "example": 300
                        },
                        "itemShippingTotal": {
                            "type": "number",
                            "description": "Merchant-defined item's shipping total",
                            "format": "double",
                            "example": 10
                        },
                        "originalShippingTotal": {
                            "type": "number",
                            "description": "System-generated total shipping cost, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 80
                        },
                        "appeasementTotal": {
                            "type": "number",
                            "description": "Appeasement total = `summationOfAll(appeasements[].amount and items[].appeasements[].amount)`",
                            "format": "double",
                            "example": 5.5
                        },
                        "itemDiscountsTotal": {
                            "type": "number",
                            "description": "Item's total discount = `summationOfAll(discounts[].amount)'. Refer to `amount` in `orderDiscount`",
                            "format": "double",
                            "example": 80
                        },
                        "originalDiscounts": {
                            "type": "number",
                            "description": "System-generated total discount, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 50
                        },
                        "itemTaxTotal": {
                            "type": "number",
                            "description": "Recalculated total tax on item = `summationOfAll(itemTaxTotal)`",
                            "format": "double",
                            "example": 80
                        },
                        "originalTaxTotal": {
                            "type": "number",
                            "description": "System-generated total tax, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 90
                        },
                        "itemTotal": {
                            "type": "number",
                            "description": "Recalculated item's total cost = `itemSubTotal - itemDiscountTotal  + itemTaxTotal + itemFeeTotal`",
                            "format": "double",
                            "example": 800
                        },
                        "originalItemTotal": {
                            "type": "number",
                            "description": "System-generated item total cost, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 500
                        },
                        "invoiceTotal": {
                            "type": "number",
                            "description": "Invoice total is updated once invoice created",
                            "format": "double",
                            "example": 800
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the request",
                            "example": "5345HJH"
                        },
                        "fees": {
                            "type": "array",
                            "description": "Fee details",
                            "items": {
                                "$ref": "#/components/schemas/itemFeeDetails"
                            }
                        },
                        "appeasements": {
                            "type": "array",
                            "description": "Appeasement info",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        },
                        "returns": {
                            "type": "array",
                            "description": "Order return details",
                            "items": {
                                "$ref": "#/components/schemas/orderReturns"
                            }
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Applicable tax code, varies from state to state",
                            "example": "FR01"
                        },
                        "taxDetails": {
                            "type": "array",
                            "description": "Tax details",
                            "items": {
                                "$ref": "#/components/schemas/taxDetail"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "description": "Discount details",
                            "items": {
                                "$ref": "#/components/schemas/orderDiscount"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "style": "570223020",
                                "colorCode": "001",
                                "isDonation": "false"
                            }
                        },
                        "parentLineItemNumber": {
                            "type": "integer",
                            "description": "Applicable in exchange scenarios. Item being returned is the `parentLineItemNumber`.",
                            "format": "int32",
                            "example": 12
                        },
                        "pendingExchangeQuantity": {
                            "type": "integer",
                            "description": "System-generated item quantity pending for exchange",
                            "format": "int32",
                            "example": 12
                        },
                        "exchangeQuantity": {
                            "type": "integer",
                            "description": "System-generated item quantity that are exchanged",
                            "format": "int32",
                            "example": 13
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "cancelledAmount": {
                            "type": "number",
                            "description": "Cancelled amount is either voided (payment is only authorized but not captured at checkout) or refunded (amount is authorized and captured at checkout)",
                            "format": "double",
                            "example": 12.4
                        },
                        "lineOrderStatus": {
                            "type": "string",
                            "description": "System-generated status for each item in the orders - SHIPPED, RETURNED, CANCELLED,  EXHANGED, VALID, and so on",
                            "example": "VALID"
                        },
                        "notes": {
                            "type": "array",
                            "description": "For additional information, to be used by Customer Service Representative (CSR) only",
                            "items": {
                                "$ref": "#/components/schemas/orderNote"
                            }
                        },
                        "isBackorder": {
                            "type": "boolean",
                            "description": "Merchant-defined value. <br> true: Backordered item <br> false: Ordered item",
                            "example": true
                        },
                        "isPreorder": {
                            "type": "boolean",
                            "description": "Merchant-defined value. <br> true: Pre-ordered item <br> false: Ordered item",
                            "example": true
                        },
                        "isExchangeItem": {
                            "type": "boolean",
                            "description": "Merchant-defined value for exchange scenarios. <br> true: Item is an exchange <br> false: Item is not an exchange",
                            "example": true
                        },
                        "hasInfiniteConsent": {
                            "type": "boolean",
                            "description": "Applicable for backorder and preorder scenarios where customer consents for further delay in delivery of preordered and backordered items than the initial estimate. <br> true: Customer consents for delayed delivery <br> false: Customer does not consent for delayed delivery",
                            "example": true
                        },
                        "isGifting": {
                            "type": "boolean",
                            "description": "true: Item is a gift <br> false: Item is not a gift",
                            "example": true
                        },
                        "isDonation": {
                            "type": "boolean",
                            "description": "true: Item is a donation <br> false: Item is not a donation",
                            "example": true
                        }
                    },
                    "description": "Item details"
                },
                "orderNote": {
                    "type": "object",
                    "properties": {
                        "createdAt": {
                            "type": "string",
                            "description": "Time note was created (UTC)",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "user": {
                            "type": "string",
                            "description": "Customer Service Representative or Employee (ID or name) who created the note",
                            "example": "62272e917b12209e68751d94"
                        },
                        "notes": {
                            "type": "string",
                            "description": "Additional info about the order, if any",
                            "example": "Fragile - handle with care"
                        }
                    },
                    "description": "Note for attention"
                },
                "orderPayment": {
                    "type": "object",
                    "properties": {
                        "paymentCounter": {
                            "type": "integer",
                            "description": "A sequential or incremental counter associated with a payment for an order. Applicable in refund scenarios to identify the specific payment for refund.",
                            "format": "int32",
                            "example": 1
                        },
                        "paidAt": {
                            "type": "string",
                            "description": "System-generated time when payment was captured at shipment. In case of payment captured at checkout, this is a merchant-defined value given during order creation.",
                            "format": "date-time",
                            "example": "2022-01-27T16:15:58-05:00"
                        },
                        "paymentIdentifier": {
                            "$ref": "#/components/schemas/orderPaymentIdentifier"
                        },
                        "paymentProvider": {
                            "type": "string",
                            "description": "Payment provider",
                            "example": "stripe"
                        },
                        "paymentToken": {
                            "$ref": "#/components/schemas/orderPaymentToken"
                        },
                        "paymentMethod": {
                            "type": "string",
                            "description": "Payment method such as PayPal or credit card",
                            "example": "CREDIT_CARD"
                        },
                        "authorizedAmount": {
                            "type": "number",
                            "description": "Amount authorized to be debited from the given `paymentMethod`",
                            "format": "double",
                            "example": 123.2
                        },
                        "chargedAmount": {
                            "type": "number",
                            "description": "Amount charged to the given `paymentMethod`",
                            "format": "double",
                            "example": 60
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Merchant-defined refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "paymentStatus": {
                            "type": "string",
                            "description": "Payment status. There are no pre-defined values; possible values are Paid, Partially Paid, Authorized, and Error.",
                            "example": "Paid"
                        },
                        "paymentLogs": {
                            "type": "array",
                            "description": "Payment details",
                            "items": {
                                "$ref": "#/components/schemas/paymentResponse"
                            }
                        },
                        "billToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "referenceId": "4DY41894J2904533S",
                                "payerId": "M7AWTK3YK3B46",
                                "captureCurrencyCode": "USD"
                            }
                        },
                        "isPartialCapture": {
                            "type": "boolean",
                            "description": "true: Payment is partial capture <br> false: Payment is full capture",
                            "example": false
                        },
                        "isFinalCapture": {
                            "type": "boolean",
                            "description": "true: Payment is final capture <br> false: Payment is not a final capture",
                            "example": false
                        }
                    },
                    "description": "Payment details"
                },
                "orderPaymentIdentifier": {
                    "type": "object",
                    "properties": {
                        "cardIdentifier": {
                            "type": "string",
                            "description": "Last 4 digits of the card",
                            "example": "3456"
                        },
                        "expirationYear": {
                            "type": "string",
                            "description": "Card expiration year",
                            "example": "2029"
                        },
                        "expirationMonth": {
                            "type": "string",
                            "description": "Card expiration month",
                            "example": "12"
                        },
                        "paymentId": {
                            "type": "string",
                            "description": "Merchant provided unique identifier for a payment based on payment connector. When omitted, it is a fabric-generated UUID.",
                            "example": "62272e917b12209e68751d94"
                        },
                        "fabricPaymentReference": {
                            "type": "string",
                            "description": "System-generated UUID referenced internally for Invoice and Orders services.",
                            "example": "f886c96c-5f65-11ed-9b6a-0242ac120002"
                        }
                    },
                    "description": "Details of payment mode and payment identifiers"
                },
                "orderResponse": {
                    "required": [
                        "channelId",
                        "items",
                        "orderNumber",
                        "shipInfo",
                        "statusCode",
                        "version"
                    ],
                    "type": "object",
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated order ID",
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier. If omitted, this is generated by fabric's sequence generator using Configuration service",
                            "example": "309019176"
                        },
                        "version": {
                            "type": "integer",
                            "description": "Current version of order document. Indicates the number of times the order is updated by any operation.",
                            "format": "int64",
                            "example": 2
                        },
                        "orderedAt": {
                            "type": "string",
                            "description": "Merchant-defined order creation time (UTC). It is mandatory in the request body of Create Order endpoint - `POST /orders`.",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "cancelledAt": {
                            "type": "string",
                            "description": "System-generated order cancellation time (UTC). This is returned in the response of Cancel order by ID - `POST /orders/{orderId}/actions/cancel` or Cancel order by order number - `POST /orders/order-number/{orderNumber}/actions/cancel` once the order is successfully cancelled.",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "allocatedAt": {
                            "type": "string",
                            "description": "System-generated order allocation time (UTC) once the order is allocated using Allocation service",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Sales channel ID",
                            "example": "12"
                        },
                        "cartId": {
                            "type": "string",
                            "description": "Unique cart identifier, either from fabric Cart service or an external Cart service. It is used for linking an order to a specific cart. If available, it is also used for inventory reservation from cart workflow.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "type": {
                            "type": "string",
                            "description": "Order type. It is critical for order life cycle as it indicates the workflow that varies with the type. For example, Storefront orders have a different workflow than Call Center orders. fabric Orders service offers standard configurations for Storefront, Call Center, Point of Sale, iOS, Android, and International.",
                            "example": "WEB",
                            "enum": [
                                "WEB",
                                "CSC",
                                "MOBILE_APP",
                                "POS"
                            ]
                        },
                        "subtype": {
                            "type": "string",
                            "description": "Order subtype, for further classification",
                            "example": "INTERNATIONAL",
                            "enum": [
                                "IOS",
                                "ANDROID",
                                "INTERNATIONAL"
                            ]
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the request",
                            "example": "43278"
                        },
                        "retail": {
                            "$ref": "#/components/schemas/orderRetail"
                        },
                        "orderSubtotal": {
                            "type": "number",
                            "description": "Recalculated orderSubtotal - `summationOfAll(itemSubTotal)`",
                            "format": "double",
                            "example": 123.45
                        },
                        "originalSubtotal": {
                            "type": "number",
                            "description": "System-generated order subtotal, auto-filled by Orders service when the order is placed. This is saved for reference in case the value changes later.",
                            "format": "double",
                            "example": 113.45
                        },
                        "orderDiscount": {
                            "type": "number",
                            "description": "Recalculated order discount",
                            "format": "double",
                            "example": 1.23
                        },
                        "originalDiscount": {
                            "type": "number",
                            "description": "System-generated total discount, auto-filled by Orders service when the order is placed. This is saved for reference in case the value changes later.",
                            "format": "double",
                            "example": 1.45
                        },
                        "feeTotal": {
                            "type": "number",
                            "description": "Recalculated total fee, calculated as `orderedQuantity* itemFeeTotal`",
                            "format": "double",
                            "example": 12.34
                        },
                        "originalFeeTotal": {
                            "type": "number",
                            "description": "System-generated total fees, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 12.34
                        },
                        "taxTotal": {
                            "type": "number",
                            "description": "Recalculated total tax on order `summationOfAll(itemTaxTotal)+summationOf(tax[].value)`",
                            "format": "double",
                            "example": 12.34
                        },
                        "appeasementTotal": {
                            "type": "number",
                            "description": "Final appeasement amount",
                            "format": "double",
                            "example": 12.34
                        },
                        "originalTaxTotal": {
                            "type": "number",
                            "description": "System-generated total tax, auto-filled by Orders service when the order is placed",
                            "format": "double",
                            "example": 12.34
                        },
                        "returnTotal": {
                            "type": "number",
                            "description": "Return total of order, for return scenarios, calculated as `summationOfAll(itemReturnTotal)`",
                            "format": "double",
                            "example": 12.34
                        },
                        "cancelTotal": {
                            "type": "number",
                            "description": "Amount to be returned after order cancellation, calculated as `cancelledQuantity / orderedQuantity * itemTotal`",
                            "format": "double",
                            "example": 12.34
                        },
                        "invoiceTotal": {
                            "type": "number",
                            "description": "Total payment captured by fabric Invoice service. If merchant is using third-party service, then this amount will be null. For partial payment scenarios, this value will be different from `orderTotal`.",
                            "format": "double",
                            "example": 12.34
                        },
                        "orderTotal": {
                            "type": "number",
                            "description": "Total amount to be charged for the order = orderSubTotal - orderDiscountTotal + orderFeeTotal + orderTaxTotal",
                            "format": "double",
                            "example": 146.9
                        },
                        "originalOrderTotal": {
                            "type": "number",
                            "description": "System-generated order total, auto-filled by Orders service when the order is placed. This is saved for reference in case the `orderTotal` changes later.",
                            "format": "double",
                            "example": 146.9
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Status code. There are no pre-defined values; possible values are - ORDER_ALLOCATED (\"Order Allocated\"), ORDER_SHIPPED (\"Order Shipped\"), ORDER_PARTIALLY_SHIPPED (\"Order Partially Shipped\"), ORDER_PICKED_UP (\"Order Picked Up\"), ORDER_PARTIALLY_PICKED_UP (\"Order Partially Picked Up\"), ORDER_DELIVERED (\"Order Delivered\", ORDER_PARTIALLY_DELIVERED (\"Order Partially Delivered\"), ORDER_RETURNED (\"Order Returned\"), etc.",
                            "example": "ORDER_CREATED"
                        },
                        "statusDescription": {
                            "type": "string",
                            "description": "Human-readable brief description based on `statusCode`",
                            "example": "Order Created"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "loyaltyStatus": "N",
                                "fraudCheckStatus": "UPDATED"
                            }
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderFeeDetail"
                            }
                        },
                        "appeasements": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderDiscount"
                            }
                        },
                        "customer": {
                            "$ref": "#/components/schemas/invoiceCustomer"
                        },
                        "payments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderPayment"
                            }
                        },
                        "returns": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderReturnsInfo"
                            }
                        },
                        "items": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Item details",
                            "items": {
                                "$ref": "#/components/schemas/orderItem"
                            }
                        },
                        "shipInfo": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderShipInfo"
                            }
                        },
                        "auditLogs": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/auditLog"
                            }
                        },
                        "notes": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderNote"
                            }
                        },
                        "orderReleasedAt": {
                            "type": "string",
                            "description": "Order released time (UTC). When an order is placed, its status is On Hold by default and the duration of hold may vary from merchant to merchant (~1 min). After the hold period, the order is released from hold.",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Order creation time (UTC)",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to order (UTC)",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        }
                    },
                    "description": "Order details"
                },
                "orderRetail": {
                    "type": "object",
                    "properties": {
                        "locationNumber": {
                            "type": "integer",
                            "description": "Unique value to identify ship-from or Buy Online Pickup from Store location. This must be the locationNumber stored in the fabric Location service.",
                            "format": "int32",
                            "example": 334
                        },
                        "cashierId": {
                            "type": "string",
                            "description": "Merchant-defined cashier ID during order creation",
                            "example": "C-123"
                        },
                        "registerId": {
                            "type": "string",
                            "description": "Merchant-defined register ID during order creation",
                            "example": "113"
                        },
                        "transactionId": {
                            "type": "string",
                            "description": "Transaction ID such as the Point-of-Sale system's version of the `orderId`.",
                            "example": "328942333412"
                        }
                    },
                    "description": "Optionally used as reference, for orders created from Point-of-Sale systems"
                },
                "paymentDetails": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "$ref": "#/components/schemas/paymentDetailsResponseBody"
                        },
                        "paymentStatusCode": {
                            "type": "string",
                            "description": "Status code for payment. There are no pre-defined values; possible values are 200, 400, 402, etc.",
                            "example": "200"
                        }
                    },
                    "description": "Payment details"
                },
                "paymentDetailsResponseBody": {
                    "type": "object",
                    "properties": {
                        "transactionId": {
                            "type": "string",
                            "description": "Transaction ID such as the point-of-sale system's version of the `orderId`.",
                            "example": "328942333412"
                        },
                        "transactionTimestamp": {
                            "type": "string",
                            "description": "Transaction time (UTC) when the payment was successful",
                            "example": "2022-04-10T23:00:45:12.111Z"
                        },
                        "responseCode": {
                            "type": "string",
                            "description": "Response code such as success, OK, or failure",
                            "example": "OK"
                        },
                        "status": {
                            "type": "string",
                            "description": "Payment status such as Authorized, Captured, etc.",
                            "example": "Authorized"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "key": "value"
                            }
                        },
                        "errors": {
                            "type": "array",
                            "description": "Error details",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "description": "Error map",
                                    "example": {
                                        "key": "value"
                                    }
                                },
                                "description": "Error map",
                                "example": {
                                    "key": "value"
                                }
                            }
                        }
                    },
                    "description": "Payment info"
                },
                "paymentResponse": {
                    "type": "object",
                    "properties": {
                        "paymentId": {
                            "type": "string",
                            "description": "Merchant-provided unique identifier for a payment based on payment connector. When omitted, this value will be generated by fabric in UUID format.",
                            "example": "328942333412"
                        },
                        "id": {
                            "type": "string",
                            "description": "ID provided by payment gateway in response to payment operation",
                            "example": "328942333412"
                        },
                        "status": {
                            "type": "string",
                            "description": "Payment status such as Authorized, Captured, etc.",
                            "example": "Authorized"
                        },
                        "data": {
                            "$ref": "#/components/schemas/paymentDetails"
                        },
                        "type": {
                            "type": "string",
                            "description": "Transaction type such as VOID, CAPTURED, REDUND, etc.",
                            "example": "REFUND"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Transaction amount for the payment operation",
                            "example": -12.4
                        },
                        "paymentLogId": {
                            "type": "string",
                            "description": "ID generated by fabric to uniquely identify the payment log",
                            "example": "328942333412"
                        },
                        "paymentLogRefId": {
                            "type": "string",
                            "description": "Payment reference log ID with which this record is associated",
                            "example": "328942333412"
                        }
                    },
                    "description": "Payment information"
                },
                "quantityInStatus": {
                    "type": "object",
                    "properties": {
                        "created": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "pendingShipped": {
                            "type": "integer",
                            "description": "Pending quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "shipped": {
                            "type": "integer",
                            "description": "Shipped quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "returned": {
                            "type": "integer",
                            "description": "Returned quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "cancelled": {
                            "type": "integer",
                            "description": "Cancelled quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "hold": {
                            "type": "integer",
                            "description": "Held quantity of given item",
                            "format": "int32",
                            "example": 10
                        },
                        "delivered": {
                            "type": "integer",
                            "description": "Delivered quantity of given item",
                            "format": "int32",
                            "example": 10
                        }
                    },
                    "description": "Item quantity for each status"
                },
                "acknowledgePackageTrackingRequest": {
                    "required": [
                        "eventType"
                    ],
                    "type": "object",
                    "properties": {
                        "eventType": {
                            "type": "string",
                            "description": "Event type for which acknowledgement is received",
                            "example": "ORDER_CREATE_IN_PTS",
                            "enum": [
                                "ORDER_CREATE_IN_PTS",
                                "ORDER_CANCELLED_IN_PTS",
                                "SHIPMENT_CREATE_IN_PTS",
                                "SHIPMENT_CANCELLED_IN_PTS"
                            ]
                        }
                    },
                    "description": "Acknowledgement for package tracking"
                },
                "createOrderRequest": {
                    "required": [
                        "items",
                        "orderNumber",
                        "statusCode"
                    ],
                    "type": "object",
                    "properties": {
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier. If omitted, this is generated by fabric's sequence generator using Configuration service.",
                            "example": "309019176"
                        },
                        "orderedAt": {
                            "type": "string",
                            "description": "Merchant-defined order creation time (UTC). It is mandatory in the request body of Create Order endpoint - `POST /orders`.",
                            "format": "date-time",
                            "example": "2022-05-12T09:30:31.198Z"
                        },
                        "adjustments": {
                            "type": "array",
                            "description": "Price adjustments are made to modify product prices during order creation, aiming to incentivize shoppers by offering discounts and promotions based on specified criteria. Price adjustments are also made to apply coupons that the shopper has used.",
                            "items": {
                                "$ref": "#/components/schemas/adjustmentDetail"
                            }
                        },
                        "adjustmentTotal": {
                            "description": "Total price adjustments for all items of the order.",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                        },
                        "cartId": {
                            "type": "string",
                            "description": "Unique identifier of a cart, either from fabric Cart service or an external Cart service. It is used for linking an order to a specific cart. If available, it is also used for inventory reservation from cart workflow.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "type": {
                            "type": "string",
                            "description": "Order type. It is critical for order life cycle as it indicates the workflow that varies with the type. For example, Storefront orders have different workflows than Call Center orders. fabric Orders service offers standard configurations for Storefront, Call Center, Point of Sale, iOS, Android, and International.",
                            "example": "WEB",
                            "enum": [
                                "WEB",
                                "CSC",
                                "MOBILE_APP",
                                "POS"
                            ]
                        },
                        "subtype": {
                            "type": "string",
                            "description": "Order subtype, for additional classification",
                            "example": "INTERNATIONAL",
                            "enum": [
                                "IOS",
                                "ANDROID",
                                "INTERNATIONAL"
                            ]
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the order creation request",
                            "example": "62272e917b12209e68751d94"
                        },
                        "retail": {
                            "$ref": "#/components/schemas/orderRetail"
                        },
                        "orderSubtotal": {
                            "type": "number",
                            "description": "Recalculated order subtotal = `summationOfAll(itemSubTotal)`",
                            "format": "double",
                            "example": 123.45
                        },
                        "orderDiscount": {
                            "type": "number",
                            "description": "Order discount = `summationOfAll(itemDiscountTotal)`",
                            "format": "double",
                            "example": 1.23
                        },
                        "feeTotal": {
                            "type": "number",
                            "description": "Total item fee = orderedQuantity * Item Fee Total",
                            "format": "double",
                            "example": 12.34
                        },
                        "taxTotal": {
                            "type": "number",
                            "description": "Total tax on order = `summationOfAll(itemTaxTotal)+summationOfAll(tax[].value)`",
                            "format": "double",
                            "example": 12.34
                        },
                        "orderTotal": {
                            "type": "number",
                            "description": "Total amount to be charged for the order = orderSubTotal - orderDiscountTotal + orderFeeTotal + orderTaxTotal",
                            "format": "double",
                            "example": 146.9
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Status code. Primarily used for Point-of-Sale (POS) orders.",
                            "example": "ORDER_CREATED"
                        },
                        "statusDescription": {
                            "type": "string",
                            "description": "Description corresponding to `statusCode`",
                            "example": "Order Created"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "fraudStatus": "FRAUD_PASS",
                                "fraudCheckStatus": "UPDATED"
                            }
                        },
                        "fees": {
                            "type": "array",
                            "description": "Fees",
                            "items": {
                                "$ref": "#/components/schemas/orderFeeDetail"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "description": "Discounts",
                            "items": {
                                "$ref": "#/components/schemas/orderDiscountRequest"
                            }
                        },
                        "customer": {
                            "$ref": "#/components/schemas/invoiceCustomer"
                        },
                        "payments": {
                            "type": "array",
                            "description": "Payments",
                            "items": {
                                "$ref": "#/components/schemas/orderPaymentRequest"
                            }
                        },
                        "items": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Items",
                            "items": {
                                "$ref": "#/components/schemas/orderItemRequest"
                            }
                        },
                        "shipInfo": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Shipping info",
                            "items": {
                                "$ref": "#/components/schemas/orderShipInfo"
                            }
                        },
                        "notes": {
                            "type": "array",
                            "description": "Additional info, if any. To be used by customer service representative (CSR) only",
                            "items": {
                                "$ref": "#/components/schemas/orderNote"
                            }
                        }
                    },
                    "description": "Details to create order"
                },
                "orderDiscountRequest": {
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "integer",
                            "description": "Discounted quantity of given item",
                            "format": "int32",
                            "example": 2
                        },
                        "amount": {
                            "type": "number",
                            "description": "Discount amount for `quantity`",
                            "format": "double",
                            "example": 2.4
                        },
                        "unit": {
                            "type": "string",
                            "description": "Discount offer - dollar value or percentage",
                            "example": "AMOUNT_OFF"
                        },
                        "value": {
                            "type": "integer",
                            "description": "Discount value in amount or percentage",
                            "format": "int32",
                            "example": 2
                        },
                        "promotionId": {
                            "type": "string",
                            "description": "Unique promotion ID either from fabric Offers service or external Offers service. When fabric Offers service is used, this is the 24-character system-generated promotion ID returned in the response of Create promotion endpoint.",
                            "example": "HNY2022"
                        },
                        "promotionCode": {
                            "type": "string",
                            "description": "Promotion code used by shoppers to take advantage of an ongoing promotion and available.",
                            "example": "HNY2022"
                        },
                        "promotionName": {
                            "type": "string",
                            "description": "Promotion name",
                            "example": "New Year"
                        },
                        "type": {
                            "type": "string",
                            "description": "Promotion type. There are no pre-defined values.",
                            "example": "promotion"
                        }
                    },
                    "description": "Order discount"
                },
                "orderItemRequest": {
                    "required": [
                        "itemId",
                        "lineItemId",
                        "lineItemNumber",
                        "shipToId",
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric auto-generates this value during order creation, in UUID format.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "lineItemNumber": {
                            "type": "integer",
                            "description": "Merchant-defined line item number to identify each item in an order.",
                            "format": "int32",
                            "example": 1
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique identifier of item from fabric Products (PIM) service.",
                            "example": 1234
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique identifier of item.",
                            "example": "P1234"
                        },
                        "segment": {
                            "type": "string",
                            "description": "Segment",
                            "example": "P1234"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID",
                            "example": "P1234"
                        },
                        "adjustments": {
                            "items": {
                                "$ref": "#/components/schemas/adjustmentDetail"
                            },
                            "type": "array",
                            "description": "Price adjustments are made to modify product prices during order creation, aiming to incentivize shoppers by offering discounts and promotions based on specified criteria. Price adjustments are also made to apply coupons that the shopper has used."
                        },
                        "itemAdjustmentTotal": {
                            "description": "Total price adjustment made to the item.",
                            "example": 123.45,
                            "format": "double",
                            "type": "number"
                        },
                        "itemName": {
                            "type": "string",
                            "description": "Item name",
                            "example": "Item"
                        },
                        "type": {
                            "type": "string",
                            "description": "Identify order type whether it's a pickup, web ship, or international order.",
                            "example": "WEB_SHIP"
                        },
                        "itemSubtype": {
                            "type": "string",
                            "description": "Subtype of `type`, for another layer of classification.",
                            "example": "Borderfree"
                        },
                        "orderedQuantity": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 60
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is sold or measured. It is important for accurately fulfilling orders and ensuring customers receive the correct quantity of products they have ordered. The possible values are EA (Each) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "System-generated UUID associated with `shipInfo`, generated from CnC service. <p> **Note**: An order can have multiple ship-to (delivery) locations and items going to the same location have one `shipToId`.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "itemUnitPrice": {
                            "type": "number",
                            "description": "Item's unit price",
                            "format": "double",
                            "example": 10
                        },
                        "itemSubtotal": {
                            "type": "number",
                            "description": "Recalculated item's subtotal - `Item unit price x (orderedQuantity - cancelledQuantity)`",
                            "format": "double",
                            "example": 600
                        },
                        "itemFeeTotal": {
                            "type": "number",
                            "description": "Recalculated item's fee = `summationOfAll(fees[].amount)`. Refer to `amount` in `itemFeeDetails`",
                            "format": "double",
                            "example": 10
                        },
                        "itemDiscountsTotal": {
                            "type": "number",
                            "description": "Item's total discount = `summationOfAll(discounts[].amount)'. Refer to `amount` in `orderDiscount`.",
                            "format": "double",
                            "example": 10
                        },
                        "itemTaxTotal": {
                            "type": "number",
                            "description": "Recalculated total tax on item = `summationOfAll(itemTaxTotal)`",
                            "format": "double",
                            "example": 10
                        },
                        "itemTotal": {
                            "type": "number",
                            "description": "Recalculated item's total cost = `itemSubTotal - itemDiscountTotal  + itemTaxTotal + itemFeeTotal`",
                            "format": "double",
                            "example": 10
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the request",
                            "example": "62272e917b12209e68751d94"
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/taxDetail"
                            }
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Applicable tax code, varies from state to state",
                            "example": "FR01"
                        },
                        "taxDetails": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/taxDetail"
                            }
                        },
                        "discounts": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/orderDiscountRequest"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "style": "570223020",
                                "colorCode": "001",
                                "isDonation": "false"
                            }
                        },
                        "notes": {
                            "type": "array",
                            "description": "Notes section to be used by customer service representative (CSR) only",
                            "items": {
                                "$ref": "#/components/schemas/orderNote"
                            }
                        },
                        "isBackorder": {
                            "type": "boolean",
                            "description": "true: Backordered item <br> false: Ordered item",
                            "example": true
                        },
                        "isPreorder": {
                            "type": "boolean",
                            "description": "true: Preordered item <br> false: Ordered item",
                            "example": true
                        },
                        "isDonation": {
                            "type": "boolean",
                            "example": true,
                            "description": "true: Item is a donation <br> false: Item is not a donation"
                        }
                    },
                    "description": "Order item model"
                },
                "orderPaymentRequest": {
                    "type": "object",
                    "properties": {
                        "paymentCounter": {
                            "type": "integer",
                            "description": "A sequential or incremental counter associated with a payment for an order. Applicable in refund scenarios to identify the specific payment for refund.",
                            "format": "int32",
                            "example": 1
                        },
                        "paidAt": {
                            "type": "string",
                            "description": "System-generated time of payment capture at shipment. When payment is captured at checkout, this is a merchant-defined value during order creation.",
                            "format": "date-time",
                            "example": "2022-01-27T16:15:58-05:00"
                        },
                        "paymentIdentifier": {
                            "$ref": "#/components/schemas/orderPaymentIdentifier"
                        },
                        "paymentProvider": {
                            "type": "string",
                            "description": "Payment provider",
                            "example": "stripe"
                        },
                        "paymentToken": {
                            "$ref": "#/components/schemas/orderPaymentToken"
                        },
                        "paymentMethod": {
                            "type": "string",
                            "description": "Payment method",
                            "example": "CREDIT_CARD"
                        },
                        "authorizedAmount": {
                            "type": "number",
                            "description": "Amount authorized to be debited from the given `paymentMethod`",
                            "format": "double",
                            "example": 123.2
                        },
                        "chargedAmount": {
                            "type": "number",
                            "description": "Charged amount",
                            "format": "double",
                            "example": 60
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "paymentStatus": {
                            "type": "string",
                            "description": "Payment status. There are no pre-defined values; possible values are Paid, Partially Paid, Authorized, and Error.",
                            "example": "Paid"
                        },
                        "authorizationExpirationDate": {
                            "type": "string",
                            "description": "Expiration time for authorization",
                            "format": "date-time",
                            "example": "2022-01-27T16:15:58-05:00"
                        },
                        "billToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "referenceId": "4DY41894J2904533S",
                                "payerId": "M7AWTK3YK3B46",
                                "captureCurrencyCode": "USD"
                            }
                        }
                    },
                    "description": "Payment details for order"
                },
                "orderUpdatePaymentStatusConnectorInfo": {
                    "type": "object",
                    "properties": {
                        "connectorName": {
                            "type": "string",
                            "description": "Connector name",
                            "example": "checkout"
                        },
                        "paymentMethodType": {
                            "type": "string",
                            "description": "Payment method type",
                            "example": "Visa"
                        },
                        "eventId": {
                            "type": "string",
                            "description": "Event ID",
                            "example": "abc12345"
                        }
                    },
                    "description": "Order update payment status request connector info model"
                },
                "orderUpdatePaymentStatusRequestBalances": {
                    "type": "object",
                    "properties": {
                        "authorized": {
                            "type": "number",
                            "description": "Authorized amount",
                            "format": "double",
                            "example": 123.2
                        },
                        "captured": {
                            "type": "number",
                            "description": "Captured amount",
                            "format": "double",
                            "example": 13.2
                        },
                        "capturable": {
                            "type": "number",
                            "description": "Amount authorized but pending to be captured",
                            "format": "double",
                            "example": 12.2
                        },
                        "refunded": {
                            "type": "number",
                            "description": "Refunded amount",
                            "format": "double",
                            "example": 3.2
                        },
                        "refundable": {
                            "type": "number",
                            "description": "Refundable amount. That is, pending refund.",
                            "format": "double",
                            "example": 23.22
                        }
                    },
                    "description": "Order update payment status request balances model"
                },
                "updatePaymentRequest": {
                    "required": [
                        "paymentIdentifier"
                    ],
                    "type": "object",
                    "properties": {
                        "paymentIdentifier": {
                            "type": "string",
                            "description": "Payment identifier",
                            "example": "12321343223"
                        },
                        "status": {
                            "type": "string",
                            "description": "Payment status such as Authorized, Captured, etc.",
                            "example": "Authorized"
                        },
                        "balances": {
                            "$ref": "#/components/schemas/orderUpdatePaymentStatusRequestBalances"
                        },
                        "connectorInfo": {
                            "$ref": "#/components/schemas/orderUpdatePaymentStatusConnectorInfo"
                        }
                    },
                    "description": "Update payment status model"
                },
                "orderRefund": {
                    "required": [
                        "amount"
                    ],
                    "type": "object",
                    "properties": {
                        "amount": {
                            "type": "number",
                            "description": "Merchant-defined refund amount",
                            "format": "double",
                            "example": 34.56
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        },
                        "conversion": {
                            "type": "number",
                            "description": "Conversion required for currency",
                            "format": "double",
                            "example": 1
                        }
                    },
                    "description": "Order refund"
                },
                "orderReturnRequest": {
                    "required": [
                        "items",
                        "source"
                    ],
                    "type": "object",
                    "properties": {
                        "returnedAt": {
                            "type": "string",
                            "description": "Merchant-defined time for return (UTC)",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "credits": {
                            "items": {
                                "$ref": "#/components/schemas/creditsRequest"
                            },
                            "type": "array"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiatedthe request",
                            "example": "62272e917b12209e68751d94"
                        },
                        "source": {
                            "type": "string",
                            "description": "Merchant-defined source from where the return request was initiated. There are no pre-defined values; possible values are Customer Service Representative (CSR), point-of-sale (POS), etc.",
                            "example": "CSR"
                        },
                        "totalRefundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "refunds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "reasonCode": {
                            "description": "Merchant-defined reason code for return",
                            "example": "Incorrect item",
                            "type": "string"
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "Item details",
                            "items": {
                                "$ref": "#/components/schemas/returnItem"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs",
                            "example": {
                                "fraudStatus": "FRAUD_PASS",
                                "fraudCheckSessionId": "59f1d2b88de74aef96d3ec900ad548e0"
                            }
                        },
                        "isExchange": {
                            "type": "boolean",
                            "description": "true: Return includes one or more exchanges <br> false: Only returns, no exchange",
                            "example": false,
                            "default": false
                        }
                    },
                    "description": "Return request"
                },
                "returnItem": {
                    "required": [
                        "orderLineItemId",
                        "quantity",
                        "returnType",
                        "scannedAt",
                        "shipmentId",
                        "shipmentLineId"
                    ],
                    "type": "object",
                    "properties": {
                        "returnType": {
                            "type": "string",
                            "description": "Return type",
                            "example": "RECEIVED",
                            "enum": [
                                "PENDING",
                                "PROCESSING",
                                "REJECTED",
                                "RECEIVED"
                            ]
                        },
                        "orderLineItemId": {
                            "type": "string",
                            "description": "Unique identifier for each item in order",
                            "example": "1"
                        },
                        "shipmentId": {
                            "type": "string",
                            "description": "24-character system-generated shipment ID",
                            "example": "62b37697c67b204dd18a7465"
                        },
                        "shipmentLineId": {
                            "type": "string",
                            "description": "Unique identifier for each item in the shipment",
                            "example": "12"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Returned quantity of the given item",
                            "format": "int32",
                            "example": 1
                        },
                        "scannedAt": {
                            "type": "string",
                            "description": "Scanned time of return (UTC)",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code for return, varies from merchant to merchant.",
                            "example": "Incorrect order"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Sub-reason code for return, for another layer of classification",
                            "example": "Incorrect specification"
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "refunds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "fees": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "exchange": {
                            "$ref": "#/components/schemas/returnsExchangeData"
                        },
                        "isPolicyOverride": {
                            "type": "boolean",
                            "description": "true: Disable policy check <br> false: Enable the policy check",
                            "example": true
                        }
                    },
                    "description": "Return details of item"
                },
                "returnsExchangeData": {
                    "required": [
                        "items"
                    ],
                    "type": "object",
                    "properties": {
                        "refund": {
                            "$ref": "#/components/schemas/orderRefund"
                        },
                        "items": {
                            "type": "array",
                            "description": "Item to be shipped in exchange for returned item",
                            "items": {
                                "$ref": "#/components/schemas/returnsExchangeItem"
                            }
                        },
                        "isRefundingDisabled": {
                            "type": "boolean",
                            "description": "true: Refund is disabled <br> false: Refund is enabled",
                            "example": true
                        }
                    },
                    "description": "Item exchange and return details"
                },
                "returnsExchangeItem": {
                    "required": [
                        "itemId",
                        "quantity",
                        "sku"
                    ],
                    "type": "object",
                    "properties": {
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique identifier of item from fabric Products (PIM) service",
                            "example": 1234
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock Keeping Unit (SKU), unique identifier of item",
                            "example": "P1234"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Number of items to be exchanged",
                            "format": "int32",
                            "example": 10
                        },
                        "itemUnitPrice": {
                            "type": "number",
                            "description": "Item's unit price",
                            "format": "double",
                            "example": 10
                        },
                        "initiateReshipment": {
                            "type": "boolean",
                            "description": "true: Proceed with reshipment immediately, do not wait for return <br> false: Proceed with the reshipment after return is successful",
                            "example": true
                        }
                    },
                    "description": "Item details for return or exchange"
                },
                "returnItemResponse": {
                    "type": "object",
                    "properties": {
                        "returnStatus": {
                            "type": "string",
                            "description": "Return status",
                            "example": "VALID",
                            "enum": [
                                "VALID",
                                "POLICY_VIOLATION",
                                "PENDING",
                                "PROCESSING",
                                "REJECTED"
                            ]
                        },
                        "policyCode": {
                            "type": "string",
                            "description": "Merchant-defined policy code, varies from merchant to merchant. If omitted, the default policy is used.",
                            "example": "policyCode"
                        },
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it (in UUID format) during order creation.",
                            "example": "62f3dfc438bcab1951be0a19"
                        },
                        "returnQuantity": {
                            "type": "integer",
                            "description": "Returned quantity of given item",
                            "format": "int32",
                            "example": 2
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount",
                            "format": "double",
                            "example": 21.5
                        }
                    },
                    "description": "Return details"
                },
                "returnOrderResponse": {
                    "type": "object",
                    "properties": {
                        "refundStatus": {
                            "type": "string",
                            "description": "Refund status",
                            "example": "REFUND_INITIATED",
                            "enum": [
                                "REFUND_INITIATED",
                                "REFUND_SUCCESS",
                                "REFUND_FAILURE",
                                "REFUND_PENDING"
                            ]
                        },
                        "totalRefundAmount": {
                            "type": "number",
                            "description": "Merchant-defined total refund amount",
                            "format": "double",
                            "example": 21.5
                        },
                        "items": {
                            "type": "array",
                            "description": "Item details",
                            "items": {
                                "$ref": "#/components/schemas/returnItemResponse"
                            }
                        }
                    },
                    "description": "Details of returned order"
                },
                "fraudCancelRequest": {
                    "required": [
                        "reasonCode"
                    ],
                    "type": "object",
                    "properties": {
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code for fraud cancellation",
                            "example": "Fraudulent order"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code for fraud cancellation, for another layer of classification",
                            "example": "Impersonation"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the request of fraud cancellation",
                            "example": "12312232"
                        },
                        "note": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "Fraud cancellation"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "salesRepId": "123456789"
                            }
                        }
                    },
                    "description": "Fraud cancellation"
                },
                "orderCreateAppeasementRequest": {
                    "required": [
                        "source",
                        "userId"
                    ],
                    "type": "object",
                    "properties": {
                        "customer": {
                            "$ref": "#/components/schemas/invoiceCustomer"
                        },
                        "userId": {
                            "type": "string",
                            "description": "Identifier of the logged in user who initiated the request. This could be from either fabric Identity service or an external Identity service.",
                            "example": "12"
                        },
                        "source": {
                            "type": "string",
                            "description": "Merchant-defined source from where the appeasement request was initiated. There are no pre-defined values; possible values are Customer Service Representative (CSR), point-of-sale (POS), etc.",
                            "example": "Storefront"
                        },
                        "appeasements": {
                            "type": "array",
                            "description": "Order-level appeasement details. At least one order-level or item-level appeasement must be added.",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "Item-level appeasements. At least one order-level or item-level appeasement must be added.",
                            "items": {
                                "$ref": "#/components/schemas/orderLineItemAppeasement"
                            }
                        }
                    },
                    "description": "Appeasement request"
                },
                "orderLineItemAppeasement": {
                    "required": [
                        "appeasements",
                        "lineItemId"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it (in UUID format) during order creation.",
                            "example": "d538b1f1-0e45-43c6-bfc6-9666fc1188ca"
                        },
                        "appeasements": {
                            "type": "array",
                            "description": "Item-level appeasements. <p> **Note**: If the same appeasement counter is found twice at order level as well as item-level appeasement, item-level appeasement request is considered as duplicate. However, if the same appeasement counter is found under different items, then, it is not considered as duplicates.",
                            "items": {
                                "$ref": "#/components/schemas/orderAppeasementDetail"
                            }
                        }
                    },
                    "description": "Item-level appeasement details"
                },
                "appeasementResponse": {
                    "type": "object",
                    "properties": {
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier. If omitted, this is generated by fabric's sequence generator using Configuration service",
                            "example": "12"
                        },
                        "totalAmountRefunded": {
                            "type": "number",
                            "description": "Total refunded amount",
                            "format": "double",
                            "example": 25.5
                        }
                    },
                    "description": "Appeasement info"
                },
                "eligibilityResponse": {
                    "type": "object",
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated order ID",
                            "example": "62f3982438bcab1951be0a19"
                        },
                        "eligibleReasonCodes": {
                            "type": "array",
                            "description": "Reason codes for returns",
                            "items": {
                                "$ref": "#/components/schemas/reasonCodeAndDescription"
                            }
                        },
                        "policyType": {
                            "type": "string",
                            "description": "Policy type that determines eligibility of exchange, return, or cancellation. If omitted, the default policy is considered.",
                            "example": "Company Policy 2023"
                        },
                        "period": {
                            "type": "string",
                            "description": "Return, exchange or cancellation window as per merchant policy",
                            "example": "30D00H00M"
                        },
                        "items": {
                            "type": "array",
                            "description": "Item's eligibility for return, cancellation, or exchange",
                            "items": {
                                "$ref": "#/components/schemas/itemEligibilityResource"
                            }
                        },
                        "fees": {
                            "type": "array",
                            "description": "Fee details",
                            "items": {
                                "$ref": "#/components/schemas/policyFeeResource"
                            }
                        }
                    },
                    "description": "Eligibility details"
                },
                "itemEligibilityResource": {
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it during order creation, in UUID format.",
                            "example": "62f3dfc438bcab1951be0a19"
                        },
                        "eligibleQuantity": {
                            "type": "integer",
                            "description": "Quantity of the given item eligible for return, cancellation, or exchange",
                            "format": "int32",
                            "example": 10
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique identifier of item",
                            "example": "P1234"
                        },
                        "isEligible": {
                            "type": "boolean",
                            "description": "true: Item is eligible for return or exchange <br> false: Item is not eligible for return or exchange",
                            "example": true
                        }
                    },
                    "description": "Item's eligibility for return, cancellation, or exchange"
                },
                "policyFeeResource": {
                    "type": "object",
                    "properties": {
                        "platinumFee": {
                            "type": "number",
                            "description": "Fees applicable for return, cancellation, or exchange of an item as per the policy",
                            "format": "double",
                            "example": 33.9
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD"
                        }
                    },
                    "description": "Policy fee"
                },
                "reasonCodeAndDescription": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "Reason code for return, cancellation, or exchange. Values are configurable as per requirement.",
                            "example": "1DMG"
                        },
                        "description": {
                            "type": "string",
                            "description": "Brief description for the return `code`",
                            "example": "Damaged"
                        }
                    },
                    "description": "Return or exchange reason"
                },
                "orderCancelLineItem": {
                    "required": [
                        "itemUnitNumber",
                        "lineItemId",
                        "quantity"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it (in UUID format) during order creation.",
                            "example": "12"
                        },
                        "quantity": {
                            "minimum": 1,
                            "type": "integer",
                            "description": "Quantity of given item to be cancelled",
                            "format": "int32",
                            "example": 1
                        },
                        "itemUnitNumber": {
                            "type": "integer",
                            "description": "Item unit number cancelled",
                            "format": "int32",
                            "example": 1
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code for item cancellation; varies from merchant to merchant",
                            "example": "Incorrect item"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code for item cancellation, for another layer of classification.",
                            "example": "Not the right color"
                        }
                    },
                    "description": "Cancellation details of an item"
                },
                "orderCancellationRequest": {
                    "required": [
                        "reasonCode"
                    ],
                    "type": "object",
                    "properties": {
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code for cancellation, varies from merchant to merchant",
                            "example": "Incorrect order"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Subreason code for order cancellation, for another layer of classification",
                            "example": "Incorrect specification"
                        },
                        "source": {
                            "type": "string",
                            "description": "Merchant-defined source from where the cancellation request was initiated. There are no pre-defined values; possible values could be Customer Service Representative (CSR), point-of-sale (POS), etc.",
                            "example": "CSR"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who initiated the order cancellation request",
                            "example": "12312232"
                        },
                        "note": {
                            "type": "string",
                            "description": "Additional notes, if any",
                            "example": "This is a note"
                        },
                        "policyCode": {
                            "type": "string",
                            "description": "Merchant-defined policy code, varies from merchant to merchant. If omitted, the default policy is used.",
                            "example": "RC1"
                        },
                        "items": {
                            "type": "array",
                            "description": "Cancellation request",
                            "items": {
                                "$ref": "#/components/schemas/orderCancelLineItem"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info (in key: value pairs).",
                            "example": {
                                "isPerishable": "false"
                            }
                        },
                        "releaseSoftReservation": {
                            "type": "boolean"
                        }
                    },
                    "description": "Order cancellation request"
                },
                "orderSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^order\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "order.orderId"
                        },
                        "condition": {
                            "type": "string",
                            "description": "SearchCondition to apply filter",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Search filter",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "orderSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]order\\.[a-zA-Z.\\-_]*)(,([+-]order\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Field or property name to sort the results. + represents ascending and - represents descending order of sorting.",
                            "example": "+order.createdAt",
                            "default": "-order.createdAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Filter conditions with sort option",
                    "example": {
                        "sort": "-order.createdAt",
                        "filters": [
                            {
                                "field": "order.type",
                                "value": "WEB"
                            },
                            {
                                "field": "order.items.type",
                                "values": [
                                    "WEB_SHIP",
                                    "WEB_PICKUP",
                                    "WEB_SDD"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "adjustmentDetail": {
                    "description": "Details of price adjustment",
                    "properties": {
                        "adjustmentCounter": {
                            "description": "Sequential or incremental counter for price adjustment",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                        },
                        "amount": {
                            "description": "Adjustment amount",
                            "example": 2.4,
                            "format": "double",
                            "type": "number"
                        },
                        "attributes": {
                            "description": "Merchant-defined custom attributes. This is a placeholder for additional info in key: value pairs.",
                            "example": {
                                "number": "XlQZTmFDFtPFGMxJP6oiAqN3vo+qKZ"
                            },
                            "type": "object"
                        },
                        "cancelQuantity": {
                            "description": "Cancel quantity",
                            "example": 2,
                            "format": "int32",
                            "type": "integer"
                        },
                        "invoiceQuantity": {
                            "description": "Total quantity invoiced",
                            "example": 10,
                            "format": "int32",
                            "type": "integer"
                        },
                        "notes": {
                            "description": "Placeholder for additional info, if any.",
                            "example": "Any additional info",
                            "type": "string"
                        },
                        "quantity": {
                            "description": "Adjustment quantity",
                            "example": 2,
                            "format": "int32",
                            "type": "integer"
                        },
                        "reasonCode": {
                            "description": "Reason code",
                            "example": "RFC",
                            "type": "string"
                        },
                        "returnQuantity": {
                            "default": 0,
                            "description": "Returned quantity of given item",
                            "example": 1,
                            "format": "int32",
                            "type": "integer"
                        },
                        "subReasonCode": {
                            "description": "Subreason code",
                            "example": "Late shipping",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "shipmentCarton": {
                    "type": "object",
                    "properties": {
                        "cartonNumber": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier. This can optionally be generated by fabric by using the resource generator feature of the Configuration service.",
                            "example": "1"
                        },
                        "cartonType": {
                            "type": "string",
                            "description": "Carton type",
                            "example": "Package"
                        },
                        "promisedDeliveryDate": {
                            "type": "string",
                            "description": "Promised delivery date given by seller (UTC)",
                            "format": "date-time",
                            "example": "2023-03-26T07:58:30.996Z"
                        },
                        "estimatedShipmentDate": {
                            "type": "string",
                            "description": "Estimated ship date given by seller based on availability of items, their processing time, delivery location, and selected shipping method (UTC).",
                            "format": "date-time",
                            "example": "2023-03-25T07:58:30.996Z"
                        },
                        "estimatedDeliveryDate": {
                            "type": "string",
                            "description": "Estimated delivery date given by carrier based on several factors including selected shipping method and delivery location (UTC).",
                            "format": "date-time",
                            "example": "2023-04-26T07:58:30.996Z"
                        },
                        "shipmentMethod": {
                            "type": "string",
                            "description": "Shipment method",
                            "example": "ground"
                        },
                        "shipmentCarrier": {
                            "type": "string",
                            "description": "Shipment carrier name",
                            "example": "FEDEX"
                        },
                        "weight": {
                            "type": "string",
                            "description": "Carton weight",
                            "example": "500 grams"
                        },
                        "trackingNumber": {
                            "type": "string",
                            "description": "Carton tracking number. There is a single tracking number per carton",
                            "example": "1Z999AA10123456784"
                        },
                        "trackingURL": {
                            "type": "string",
                            "description": "Carton tracking URL",
                            "example": "https://example.com/tracking"
                        },
                        "tracking": {
                            "type": "array",
                            "description": "Carton tracking details",
                            "items": {
                                "$ref": "#/components/schemas/trackingResource"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "Carton item details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentItem"
                            }
                        }
                    },
                    "description": "Carton details"
                },
                "shipmentGiftCardDetail": {
                    "type": "object",
                    "properties": {
                        "giftCardNumber": {
                            "type": "string",
                            "description": "Gift card number",
                            "example": "453456765"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Gift card amount",
                            "format": "double",
                            "example": 50
                        },
                        "giftCardStatus": {
                            "type": "string",
                            "description": "Gift card status",
                            "example": "ACTIVE",
                            "enum": [
                                "PENDING_ACTIVATION",
                                "ACTIVE",
                                "FAILED"
                            ]
                        },
                        "giftCardActivationRequestedAt": {
                            "type": "string",
                            "description": "Time of placing gift card activation request (UTC)",
                            "example": "2023-03-26T07:58:30.996Z",
                            "format": "date-time"
                        },
                        "giftCardActivatedAt": {
                            "type": "string",
                            "description": "Time gift card was activated (UTC)",
                            "example": "2023-04-26T07:58:30.996Z",
                            "format": "date-time"
                        }
                    },
                    "description": "Gift card details"
                },
                "shipmentItem": {
                    "type": "object",
                    "properties": {
                        "shipmentLineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify item in a shipment. When this value is not provided, fabric will auto generate it (UUID format) during shipment.",
                            "example": "607f1f77bcf86cd799439011"
                        },
                        "orderId": {
                            "type": "string",
                            "description": "24-character order ID generated in the response of Create Order endpoint - `POST /orders`",
                            "example": "6413e370cb0dc859b6c0dcb0"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier",
                            "example": "309020213"
                        },
                        "lineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify each item in an order. When this value is not provided, fabric will auto generate (in UUID format) during order creation.",
                            "example": "1"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique item identifier",
                            "example": 100023
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique item identifier",
                            "example": "SKU0023"
                        },
                        "segment": {
                            "type": "string",
                            "description": "Item segment",
                            "example": "segment"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID. Applicable in dropshipping scenarios to indicate the vendor responsible for the given item.",
                            "example": "vend12346667"
                        },
                        "orderedQuantity": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 2,
                            "default": 0
                        },
                        "shippedQuantity": {
                            "type": "integer",
                            "description": "Shipped quantity of given item",
                            "format": "int32",
                            "example": 2,
                            "default": 0
                        },
                        "returnQuantity": {
                            "type": "integer",
                            "description": "Returned quantity of given item",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Refund amount for returned items",
                            "format": "double",
                            "example": 10
                        },
                        "fees": {
                            "type": "array",
                            "description": "Fee details",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is measured or sold. UOM can be set to 'each' (EA) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "giftCards": {
                            "type": "array",
                            "description": "Gift card details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentGiftCardDetail"
                            }
                        }
                    },
                    "description": "Details of item in shipment"
                },
                "shipmentRecipient": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "$ref": "#/components/schemas/orderContactName"
                        },
                        "email": {
                            "type": "string",
                            "description": "Recipient's email",
                            "example": "support@example.inc"
                        },
                        "phone": {
                            "$ref": "#/components/schemas/orderContactPhone"
                        }
                    },
                    "description": "Shipment recipient details"
                },
                "shipmentScratchedItem": {
                    "required": [
                        "reasonCode"
                    ],
                    "type": "object",
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character ID displayed in the response of Create Order endpoint - `POST /orders`",
                            "example": "6413e370cb0dc859b6c0dcb0"
                        },
                        "lineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify each item in an order. When this value is not provided, fabric will auto generate it (in UUID format) during order creation.",
                            "example": "2"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique item identifier",
                            "example": 100043
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique item identifier",
                            "example": "SKU00043"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Number of scratched items",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is measured or sold. UOM can be set to 'each' (EA) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code for scratch",
                            "example": "ReasonCode23454"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Sub-reason code",
                            "example": "SubReasonCode23242"
                        }
                    },
                    "description": "Customer may cancel allocation line items as part of the shipment post request. In fabric Shipments service, this is called 'Scratched Items' or 'scratchedItems'."
                },
                "trackingResource": {
                    "type": "object",
                    "properties": {
                        "event": {
                            "type": "string",
                            "description": "Shipment-specific event. Mandatory in the request body of Update shipment tracking - `POST /shipments/actions/update-tracking` endpoint",
                            "example": "picked up"
                        },
                        "eventId": {
                            "type": "string",
                            "description": "Event ID provided by carrier",
                            "example": "627963716b19511e8a3a631b"
                        },
                        "eventRecordedAt": {
                            "type": "string",
                            "description": "Time event was recorded (UTC)",
                            "example": "2019-09-30T07:58:30.996Z",
                            "format": "date-time"
                        },
                        "shipmentCarrier": {
                            "type": "string",
                            "description": "Shipment carrier",
                            "example": "FEDEX"
                        },
                        "location": {
                            "type": "string",
                            "description": "Delivery location",
                            "example": "Reno, NV"
                        },
                        "notes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string",
                                "description": "Attributes to save any additional info",
                                "example": "{\"description\":\"Shipment picked up\"}"
                            },
                            "description": "Attributes to save any additional info",
                            "example": {
                                "description": "Shipment picked up"
                            }
                        }
                    },
                    "description": "Shipment tracking details"
                },
                "shipmentAuditLog": {
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier for each item in an order. When omitted, fabric will generate it during order creation, in UUID format.",
                            "example": "b03b72dc-78d8-4ea4-90fc-2fe6a1fe6569"
                        },
                        "auditId": {
                            "type": "string",
                            "description": "System-generated audit ID (UUID format)",
                            "example": "a05b72dc-78d8-4ea4-90fc-2fe6a1fe1111"
                        },
                        "auditType": {
                            "type": "string",
                            "description": "Audit type such as cancel, return, etc.",
                            "example": "CANCEL"
                        },
                        "employeeId": {
                            "type": "string",
                            "description": "Employee (ID or name) who made the last update",
                            "example": "6227"
                        },
                        "auditedAt": {
                            "type": "string",
                            "description": "Audit time (UTC)",
                            "format": "date-time",
                            "example": "2023-03-12T09:24:54.804Z"
                        },
                        "source": {
                            "type": "string",
                            "description": "Merchant-defined source from where the update was initiated. There are no predefined values; possible values could be Customer Service Representative (CSR), Point-of-Sale (POS), etc.",
                            "example": "POS"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Merchant-defined reason code, varies from merchant to merchant",
                            "example": "Scratched item"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Merchant-defined sub reason code; provides more clarity to audit reason",
                            "example": "Scratched item"
                        },
                        "note": {
                            "type": "string",
                            "description": "Additional info, if any",
                            "example": "Note"
                        },
                        "updatedFields": {
                            "type": "array",
                            "description": "Audit log for change history",
                            "items": {
                                "$ref": "#/components/schemas/orderAuditLogUpdatedField"
                            }
                        }
                    },
                    "description": "Details for updating shipment"
                },
                "shipmentResponse": {
                    "type": "object",
                    "properties": {
                        "shipmentId": {
                            "type": "string",
                            "description": "System-generated shipment ID (UUID)",
                            "example": "627963716b19511e8a3a631b"
                        },
                        "shipmentNumber": {
                            "type": "string",
                            "description": "Merchant-defined unique shipment identifier. <p> **Note**: It can be optionally generated by fabric by using resource generator feature in the Configuration service",
                            "example": "78974156816152"
                        },
                        "invoiceId": {
                            "type": "string",
                            "description": "Invoice ID generated from fabric Invoice service during shipment creation. <p> **Note**: Invoices are only created for Shipments where merchants have payment **Capture at Shipment** feature enabled. The value will be “Null” if merchants do not have “Capture at Shipment” feature enabled.",
                            "example": "63ef4360aafa8a7f5247fe48"
                        },
                        "allocationId": {
                            "type": "string",
                            "description": "System-generated allocation ID (UUID) from the Create allocation endpoint of fabric Allocation service. It refers to the given shipment. <p> **Note**: Allocation occurs prior to Shipment Creation. `allocationId` is mandatory to create a Shipment.",
                            "example": "6413e3d3fd03a35efccb426e"
                        },
                        "orderNumbers": {
                            "type": "array",
                            "description": "List of order numbers associated with a shipment. <p> **Note**: Currently, a shipment can be associated with only one order. In the future, this property will support a scenario where a customer places a second order for the same product immediately after their first order. Multiple order numbers can be linked to one shipment in such cases.",
                            "items": {
                                "type": "string",
                                "example": "309020213, 459020213"
                            }
                        },
                        "poNumber": {
                            "type": "string",
                            "description": "Merchant-defined purchase order number",
                            "example": "1125"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID. Applicable in dropshipping scenarios to indicate the vendor responsible for the given item.",
                            "example": "56"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Current shipment status (fabric-defined codes). <p> **Note**: For standard shipments, the status would be SHIPMENT_CREATED. For pickup shipment, the initial status would be PICKUP_CREATED and once the customer picks up, the status changes to PICKUP_COMPLETED",
                            "example": "SHIPMENT_CREATED",
                            "enum": [
                                "SHIPMENT_CREATED",
                                "SHIPMENT_UPDATED",
                                "SHIPMENT_CANCELLED",
                                "PICKUP_CREATED",
                                "PICKUP_COMPLETED",
                                "SHIPMENT_DELIVERED",
                                "SHIPMENT_RETURN_PENDING",
                                "SHIPMENT_RETURN_RECEIVED",
                                "SHIPMENT_PARTIALLY_DELIVERED"
                            ]
                        },
                        "type": {
                            "type": "string",
                            "description": "Shipment types",
                            "example": "STANDARD",
                            "enum": [
                                "STANDARD",
                                "RESHIP",
                                "RETURN",
                                "SCRATCH",
                                "PENDING_RETURN",
                                "PICKUP",
                                "TRANSFER"
                            ]
                        },
                        "subtype": {
                            "type": "string",
                            "description": "Shipment subtype, for another layer of classification. There are no pre-defined values; the possible value is Cash On Delivery (COD)",
                            "example": "COD"
                        },
                        "reshipmentReasonCode": {
                            "type": "string",
                            "description": "Reshipment reason code",
                            "example": "Order is missing"
                        },
                        "shippedAt": {
                            "type": "string",
                            "description": "Order shipment time (UTC)",
                            "format": "date-time",
                            "example": "2023-04-06T07:58:30.996Z"
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Unique value to identify ship-from location. This must be the `locationNumber` stored in the fabric Location service.",
                            "example": "132412"
                        },
                        "locationType": {
                            "type": "string",
                            "description": "Location type, such as distribution center (DC) or warehouse",
                            "example": "DC"
                        },
                        "totalCartons": {
                            "type": "integer",
                            "description": "Total number of cartons in the given shipment. There can be only one carton per trackingNumber.",
                            "format": "int64",
                            "example": 2
                        },
                        "masterTrackingNumber": {
                            "type": "string",
                            "description": "Master tracking number for all cartons in the shipment",
                            "example": "TX112345678"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "Ship-to ID generated in the response of Create shipping endpoint of Shipping service",
                            "example": "1"
                        },
                        "shipToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "recipients": {
                            "type": "array",
                            "description": "Recipient details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentRecipient"
                            }
                        },
                        "cartons": {
                            "type": "array",
                            "description": "Carton details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentCarton"
                            }
                        },
                        "scratchedItems": {
                            "type": "array",
                            "description": "Details of scratched items",
                            "items": {
                                "$ref": "#/components/schemas/shipmentScratchedItem"
                            }
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Shipment creation time (UTC)",
                            "format": "date-time",
                            "example": "2023-04-06T07:58:30.996Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to shipment (UTC)",
                            "format": "date-time",
                            "example": "2023-04-06T07:58:30.996Z"
                        },
                        "auditLogs": {
                            "type": "array",
                            "description": "Audit log details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentAuditLog"
                            }
                        }
                    },
                    "description": "Shipment details"
                },
                "cartonDetails": {
                    "type": "object",
                    "properties": {
                        "cartonNumber": {
                            "type": "string",
                            "description": "Merchant-defined unique identifier. This can optionally be generated by fabric by using the resource generator feature of the Configuration service.",
                            "example": "1"
                        },
                        "cartonType": {
                            "type": "string",
                            "description": "Carton type",
                            "example": "Package"
                        },
                        "promisedDeliveryDate": {
                            "type": "string",
                            "description": "Promised delivery date given by seller (UTC)",
                            "format": "date-time",
                            "example": "2023-03-26T07:58:30.996Z"
                        },
                        "estimatedShipDate": {
                            "type": "string",
                            "description": "Estimated ship date given by carrier (UTC)",
                            "format": "date-time",
                            "example": "2023-03-25T07:58:30.996Z"
                        },
                        "estimatedDeliveryDate": {
                            "type": "string",
                            "description": "Estimated delivery date given by carrier (UTC). It is based on several factors including selected shipping method and delivery location.",
                            "format": "date-time",
                            "example": "2023-03-26T07:58:30.996Z"
                        },
                        "shipmentMethod": {
                            "type": "string",
                            "description": "Shipment method",
                            "example": "ground"
                        },
                        "shipmentCarrier": {
                            "type": "string",
                            "description": "Shipment carrier",
                            "example": "FEDEX"
                        },
                        "weight": {
                            "type": "string",
                            "description": "Carton weight",
                            "example": "500 gram"
                        },
                        "trackingNumber": {
                            "type": "string",
                            "description": "Merchant-defined shipment tracking number for the given carton. Used for tracking shipment, also for updating tracking status of given carton.",
                            "example": "1Z999AA10123456784"
                        },
                        "trackingURL": {
                            "type": "string",
                            "description": "Shipment tracking URL for the given carton",
                            "example": "https://fedex.com/tracking"
                        },
                        "tracking": {
                            "type": "array",
                            "description": "Tracking details",
                            "items": {
                                "$ref": "#/components/schemas/trackingResource"
                            }
                        },
                        "items": {
                            "type": "array",
                            "description": "Item",
                            "items": {
                                "$ref": "#/components/schemas/cartonItems"
                            }
                        }
                    },
                    "description": "Carton details"
                },
                "createShipmentRequest": {
                    "required": [
                        "allocationId",
                        "shipmentNumber"
                    ],
                    "type": "object",
                    "properties": {
                        "shipmentNumber": {
                            "type": "string",
                            "description": "Merchant-defined shipment identifier",
                            "example": "78974156816152"
                        },
                        "allocationId": {
                            "type": "string",
                            "description": "Allocation ID for this shipment, generated by the fabric Allocation service through Create allocation (internal) endpoint, which occurs prior to Shipment Creation. This is mandatory to create a new shipment.",
                            "example": "112345678912340"
                        },
                        "invoiceId": {
                            "type": "string",
                            "description": "Invoice ID generated from fabric Invoice service during shipment creation. <p> **Note**: Invoices are only created for Shipments where merchants have payment **Capture at Shipment** feature enabled. The value will be “Null” if merchants do not have “Capture at Shipment” feature enabled.",
                            "example": "63ef4360aafa8a7f5247fe48"
                        },
                        "poNumber": {
                            "type": "string",
                            "description": "Merchant-defined purchase order number",
                            "example": "1125"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID. Applicable in dropshipping scenarios to indicate the vendor responsible for the given item.",
                            "example": "56"
                        },
                        "statusCode": {
                            "type": "string",
                            "description": "Current shipment status (fabric-defined codes). For standard shipments, the initial status would be SHIPMENT_CREATED. For pickup shipment, the initial status would be PICKUP_CREATED and once the customer picks up, the status changes to PICKUP_COMPLETED",
                            "example": "SHIPMENT_CREATED",
                            "enum": [
                                "SHIPMENT_CREATED",
                                "SHIPMENT_UPDATED",
                                "SHIPMENT_CANCELLED",
                                "PICKUP_CREATED",
                                "PICKUP_COMPLETED",
                                "SHIPMENT_RETURN_PENDING",
                                "SHIPMENT_RETURN_RECEIVED",
                                "SHIPMENT_PARTIALLY_DELIVERED",
                                "SHIPMENT_DELIVERED"
                            ]
                        },
                        "type": {
                            "type": "string",
                            "description": "Shipment types",
                            "example": "STANDARD",
                            "enum": [
                                "STANDARD",
                                "RESHIP",
                                "RETURN",
                                "SCRATCH",
                                "PENDING_RETURN",
                                "PICKUP",
                                "TRANSFER"
                            ]
                        },
                        "subtype": {
                            "type": "string",
                            "description": "Shipment subtype. Free-form text to add another layer of classification, if required.",
                            "example": "COD"
                        },
                        "reshipmentReasonCode": {
                            "type": "string",
                            "description": "Reshipment reason code",
                            "example": "Order is missing"
                        },
                        "shippedAt": {
                            "type": "string",
                            "description": "Order shipment time (UTC)",
                            "format": "date-time",
                            "example": "2023-04-06T07:58:30.996Z"
                        },
                        "locationNumber": {
                            "type": "string",
                            "description": "Unique value to identify ship-from location. This must be the `locationNumber` stored in the fabric Location service.",
                            "example": "132412"
                        },
                        "locationType": {
                            "type": "string",
                            "description": "Location type, such as distribution center (DC) or warehouse. This must be the type stored in the fabric Location service.",
                            "example": "DC"
                        },
                        "totalCartons": {
                            "type": "integer",
                            "description": "Total number of cartons in the given shipment.",
                            "format": "int32",
                            "example": 2
                        },
                        "masterTrackingNumber": {
                            "type": "string",
                            "description": "Master tracking number for all cartons in the shipment",
                            "example": "TX112345678"
                        },
                        "shipToId": {
                            "type": "string",
                            "description": "Ship-to ID generated in the response of Create Shipping endpoint of Shipping service",
                            "example": "sg6683620405"
                        },
                        "shipToAddress": {
                            "$ref": "#/components/schemas/address"
                        },
                        "recipients": {
                            "type": "array",
                            "description": "Recipient details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentRecipient"
                            }
                        },
                        "cartons": {
                            "type": "array",
                            "description": "Carton details",
                            "items": {
                                "$ref": "#/components/schemas/cartonDetails"
                            }
                        },
                        "scratchedItems": {
                            "type": "array",
                            "description": "Scratched items",
                            "items": {
                                "$ref": "#/components/schemas/scratchedItemDetails"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "attribute1": "value"
                            }
                        }
                    },
                    "description": "Details to create shipment"
                },
                "giftCardDetails": {
                    "type": "object",
                    "properties": {
                        "giftCardNumber": {
                            "type": "string",
                            "description": "Gift card number",
                            "example": "453456765"
                        },
                        "amount": {
                            "type": "number",
                            "description": "Gift card amount",
                            "format": "double",
                            "example": 50
                        }
                    },
                    "description": "Gift card details"
                },
                "cartonItems": {
                    "required": [
                        "lineItemId",
                        "shippedQuantity"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify each item in an order. When this value is not provided, fabric will auto generate (in UUID format) during order creation.",
                            "example": "1"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique item identifier from fabric Products service",
                            "example": 100023
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique item identifier",
                            "example": "SKU0023"
                        },
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated ID displayed in the response of Create Order endpoint - `POST /orders`",
                            "example": "6413e370cb0dc859b6c0dcb0"
                        },
                        "orderNumber": {
                            "type": "string",
                            "description": "Merchant-defined order identifier",
                            "example": "309020213"
                        },
                        "segment": {
                            "type": "string",
                            "description": "Item segment",
                            "example": "segment"
                        },
                        "vendorId": {
                            "type": "string",
                            "description": "Vendor ID. Applicable in dropshipping scenarios to indicate the vendor responsible for the given item.",
                            "example": "56"
                        },
                        "orderedQuantity": {
                            "type": "integer",
                            "description": "Ordered quantity of given item",
                            "format": "int32",
                            "example": 2
                        },
                        "shippedQuantity": {
                            "type": "integer",
                            "description": "Shipped quantity of given item",
                            "format": "int32",
                            "example": 2
                        },
                        "returnQuantity": {
                            "type": "integer",
                            "description": "Returned quantity of given item. Applicable for return shipment scenarios.",
                            "format": "int32",
                            "example": 1
                        },
                        "refundAmount": {
                            "type": "number",
                            "description": "Return amount. Applicable for return shipment scenarios.",
                            "format": "double",
                            "example": 10
                        },
                        "returnRequestCounter": {
                            "type": "integer",
                            "description": "Number of times return request is made for the given order. Applicable only for return shipment scenario.",
                            "format": "int32",
                            "example": 1
                        },
                        "fees": {
                            "type": "array",
                            "description": "Return fee details",
                            "items": {
                                "$ref": "#/components/schemas/returnFeeDetail"
                            }
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is measured or sold. UOM can be set to 'each' (EA) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "giftCards": {
                            "type": "array",
                            "description": "Gift card details",
                            "items": {
                                "$ref": "#/components/schemas/giftCardDetails"
                            }
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "attribute1": "value"
                            }
                        }
                    },
                    "description": "Item details"
                },
                "scratchedItemDetails": {
                    "required": [
                        "lineItemId",
                        "quantity",
                        "reasonCode"
                    ],
                    "type": "object",
                    "properties": {
                        "lineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify each item in an order. When this value is not provided, fabric will auto generate (in UUID format) during order creation.",
                            "example": "2"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Unique item identifier",
                            "example": 100043
                        },
                        "sku": {
                            "type": "string",
                            "description": "Stock keeping unit (SKU), unique item identifier",
                            "example": "SKU00043"
                        },
                        "quantity": {
                            "type": "integer",
                            "description": "Number of scratched items",
                            "format": "int32",
                            "example": 1,
                            "default": 0
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit in which a product is measured or sold. UOM can be set to 'each' (EA) or GAL (Gallon), DZ (Dozen), etc.",
                            "example": "EA"
                        },
                        "reasonCode": {
                            "type": "string",
                            "description": "Reason code",
                            "example": "ReasonCode23454"
                        },
                        "subReasonCode": {
                            "type": "string",
                            "description": "Sub-reason code",
                            "example": "SubReasonCode23242"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "attribute1": "value"
                            }
                        }
                    },
                    "description": "Details of scratched items in shipment"
                },
                "giftCardActivation": {
                    "required": [
                        "giftCardNumber",
                        "giftCardStatus"
                    ],
                    "type": "object",
                    "properties": {
                        "giftCardNumber": {
                            "type": "string",
                            "description": "Gift card number",
                            "example": "453456765"
                        },
                        "giftCardStatus": {
                            "type": "string",
                            "description": "Gift card status",
                            "example": "ACTIVE",
                            "enum": [
                                "PENDING_ACTIVATION",
                                "ACTIVE",
                                "FAILED"
                            ]
                        }
                    },
                    "description": "Gift card info"
                },
                "giftCardItem": {
                    "required": [
                        "giftCards",
                        "shipmentLineItemId"
                    ],
                    "type": "object",
                    "properties": {
                        "shipmentLineItemId": {
                            "type": "string",
                            "description": "Unique number assigned by merchant to identify item in a shipment. When this value is not provided, fabric will auto generate (UUID format) during shipment.",
                            "example": "607f1f77bcf86cd799439011"
                        },
                        "giftCards": {
                            "maxItems": 100,
                            "minItems": 1,
                            "type": "array",
                            "description": "Gift cards",
                            "items": {
                                "$ref": "#/components/schemas/giftCardActivation"
                            }
                        }
                    },
                    "description": "Gift card details"
                },
                "giftCardItemsActivationRequest": {
                    "required": [
                        "items"
                    ],
                    "type": "object",
                    "properties": {
                        "items": {
                            "maxItems": 1000,
                            "minItems": 1,
                            "type": "array",
                            "description": "Items",
                            "items": {
                                "$ref": "#/components/schemas/giftCardItem"
                            }
                        }
                    },
                    "description": "Gift card activation request"
                },
                "shipmentAcknowledge": {
                    "type": "object",
                    "properties": {
                        "acknowledgedAt": {
                            "type": "string",
                            "description": "Shipment acknowledgement time from middleware. If omitted, fabric uses the time (UTC) of Acknowledgement shipment call - `POST /shipments/{shipmentId}/acknowledge`.",
                            "format": "date-time",
                            "example": "2023-08-01T20:03:28.483971941Z"
                        },
                        "attributes": {
                            "type": "object",
                            "description": "Merchant-defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "shipmentId": "627963716b19511e8a3a631b"
                            }
                        }
                    },
                    "description": "Shipment acknowledgement details"
                },
                "shipmentAcknowledgeResponse": {
                    "type": "object",
                    "properties": {
                        "acknowledgedAt": {
                            "type": "string",
                            "description": "Shipment acknowledgement time (UTC)",
                            "format": "date-time",
                            "example": "2023-02-01T20:03:28.483971941Z"
                        }
                    },
                    "description": "Shipment acknowledgement response"
                },
                "shipmentSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^shipment\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "shipment.shipmentNum"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "LT",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find shipments. To search using a single value, the `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "shipmentsSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]shipment\\.[a-zA-Z.\\-_]*)(,([+-]shipment\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property name on which response needed to be sorted. <p> **Note**: `-` refers to descending and `+` refers to ascending order",
                            "example": "-shipment.shipDate",
                            "default": "-shipment.shipDate"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Sort and filter criteria for shipment search",
                    "example": {
                        "sort": "-shipment.shipDate",
                        "filters": [
                            {
                                "field": "shipment.shipmentNum",
                                "value": "Shipment_112255",
                                "condition": "EQ"
                            },
                            {
                                "field": "shipment.cartons.cartonNum",
                                "values": [
                                    "Tracking_*"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "shipmentsSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/shipmentResponse"
                            }
                        }
                    },
                    "description": "Shipment search response"
                },
                "shipmentTrackingDetail": {
                    "type": "object",
                    "required": [
                        "shipmentNumber",
                        "trackingNumber"
                    ],
                    "properties": {
                        "orderId": {
                            "type": "string",
                            "description": "24-character system-generated ID displayed in the response of Create Order endpoint - `POST /orders`",
                            "example": "6413e370cb0dc859b6c0dcb0"
                        },
                        "shipmentNumber": {
                            "type": "string",
                            "description": "Merchant-defined unique shipment identifier",
                            "example": "78974156816152"
                        },
                        "trackingNumber": {
                            "type": "string",
                            "description": "Tracking number",
                            "example": "1Z999AA10123456784"
                        },
                        "trackingURL": {
                            "type": "string",
                            "description": "Tracking URL",
                            "example": "https://example.com/tracking"
                        },
                        "tracking": {
                            "type": "array",
                            "description": "Tracking details",
                            "items": {
                                "$ref": "#/components/schemas/trackingResource"
                            }
                        }
                    },
                    "description": "Shipment tracking details"
                },
                "shipmentsResponse": {
                    "type": "object",
                    "properties": {
                        "shipments": {
                            "type": "array",
                            "description": "Shipment details",
                            "items": {
                                "$ref": "#/components/schemas/shipmentResponse"
                            }
                        }
                    },
                    "description": "Shipment response"
                },
                "shippingMethod": {
                    "required": [
                        "code",
                        "name"
                    ],
                    "type": "object",
                    "properties": {
                        "shippingMethodId": {
                            "type": "string",
                            "description": "Shipping method ID",
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        "code": {
                            "type": "string",
                            "description": "Shipping method code such as Same Day Delivery (SDD), Standard Shipping (STH), etc.",
                            "example": "SDD"
                        },
                        "name": {
                            "type": "string",
                            "description": "Shipping method name",
                            "example": "Express Delivery"
                        },
                        "description": {
                            "type": "string",
                            "description": "Brief description of shipping method",
                            "example": "Express Delivery 2 - 5 days"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code associated with a shipping method. Depends on the applicable tax laws and regulations in each jurisdiction.",
                            "example": "FR01"
                        },
                        "minimumDays": {
                            "type": "integer",
                            "description": "Minimum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 2
                        },
                        "maximumDays": {
                            "type": "integer",
                            "description": "Maximum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 5
                        },
                        "cutoffTime": {
                            "type": "integer",
                            "description": "Time at which the current 'order day' is over. <p> **Note**: If an order is delivered after the cutoff time, it is considered as delivered the next working day. For example, if the cutoff time is set to 5:00 PM, any orders delivered after this time will be considered to have been delivered the following business day.",
                            "format": "int32",
                            "example": 1330
                        },
                        "cost": {
                            "type": "number",
                            "description": "Shipping cost given by merchant",
                            "format": "double",
                            "example": 20.5
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Channel ID",
                            "example": "12"
                        },
                        "region": {
                            "type": "string",
                            "description": "State or region of delivery",
                            "example": "CA"
                        },
                        "createdBy": {
                            "type": "string",
                            "description": "User (ID or name) who created the shipping method",
                            "example": "User1"
                        },
                        "updatedBy": {
                            "type": "string",
                            "description": "User (ID or name) who update the shipping method",
                            "example": "User2"
                        },
                        "configuredBy": {
                            "type": "string",
                            "description": "User (ID or name) who configured the shipping method",
                            "example": "User3"
                        },
                        "carrier": {
                            "type": "string",
                            "description": "Shipping carrier name",
                            "example": "FedEx"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "addressType": {
                            "type": "string",
                            "description": "Address type. For example - APO: Army Post Office or MPO: Military Post Office",
                            "example": "APO",
                            "enum": [
                                "APO",
                                "MPO",
                                "PO",
                                "Business",
                                "Residence"
                            ]
                        },
                        "weight": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "cartValue": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "dimension": {
                            "$ref": "#/components/schemas/minMaxDimensions"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Time of shipping method creation (UTC)",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Time of last update to shipping method (UTC)",
                            "format": "date-time",
                            "example": "2022-08-01T20:03:28.483971941Z"
                        },
                        "isDeleted": {
                            "type": "boolean",
                            "description": "true: Shipping method is deleted <br> false: Shipping method is not deleted",
                            "example": false
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                                "example": {
                                    "carrier": "FedEx",
                                    "type": "Next Day"
                                }
                            },
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "carrier": "FedEx",
                                "type": "Next Day"
                            }
                        }
                    },
                    "description": "Shipping method response model"
                },
                "dimensions": {
                    "type": "object",
                    "properties": {
                        "height": {
                            "type": "number",
                            "description": "Item height",
                            "format": "double",
                            "example": 2.4
                        },
                        "width": {
                            "type": "number",
                            "description": "Item width",
                            "format": "double",
                            "example": 3.5
                        },
                        "length": {
                            "type": "number",
                            "description": "Item length",
                            "format": "double",
                            "example": 4.6
                        },
                        "uom": {
                            "type": "string",
                            "description": "Unit of measurement (UOM)",
                            "example": "EA"
                        }
                    },
                    "description": "Item dimensions"
                },
                "minMaxDimensions": {
                    "type": "object",
                    "properties": {
                        "min": {
                            "$ref": "#/components/schemas/dimensions"
                        },
                        "max": {
                            "$ref": "#/components/schemas/dimensions"
                        }
                    },
                    "description": "Minimum and maximum dimensions"
                },
                "minMaxValues": {
                    "type": "object",
                    "properties": {
                        "min": {
                            "type": "number",
                            "description": "Minimum value",
                            "format": "double",
                            "example": 2.1
                        },
                        "max": {
                            "type": "number",
                            "description": "Maximum value",
                            "format": "double",
                            "example": 3.1
                        }
                    },
                    "description": "Minimum and maximum values (weight, cost, etc.)"
                },
                "updateShippingMethodRequest": {
                    "required": [
                        "code",
                        "name"
                    ],
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "Shipping method code such as Same Day Delivery (SDD), Standard Shipping (STH), etc.",
                            "example": "SDD"
                        },
                        "name": {
                            "type": "string",
                            "description": "Shipping method name",
                            "example": "Express Delivery"
                        },
                        "description": {
                            "type": "string",
                            "description": "Brief description of shipping method",
                            "example": "Express Delivery 2 - 5 days"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code associated with a shipping method. Depends on the applicable tax laws and regulations in each jurisdiction.",
                            "example": "FR01"
                        },
                        "minimumDays": {
                            "type": "integer",
                            "description": "Minimum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 2
                        },
                        "maximumDays": {
                            "type": "integer",
                            "description": "Maximum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 5
                        },
                        "cutoffTime": {
                            "type": "integer",
                            "description": "Time at which the current 'order day' is over. <p> **Note**: If an order is delivered after the cutoff time, it is considered as delivered the next working day. For example, if the cutoff time is set to 5:00 PM, any orders delivered after this time will be considered to have been delivered the following business day.",
                            "format": "int32",
                            "example": 1330
                        },
                        "cost": {
                            "type": "number",
                            "description": "Shipping cost given by merchant",
                            "format": "double",
                            "example": 20.5
                        },
                        "region": {
                            "type": "string",
                            "description": "State or region of delivery",
                            "example": "CA"
                        },
                        "createdBy": {
                            "type": "string",
                            "description": "User (ID or name) who created the shipping method",
                            "example": "User1"
                        },
                        "updatedBy": {
                            "type": "string",
                            "description": "User (ID or name) who update the shipping method",
                            "example": "User2"
                        },
                        "carrier": {
                            "type": "string",
                            "description": "Shipping carrier name",
                            "example": "FedEx"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "addressType": {
                            "type": "string",
                            "description": "Address type. For example - APO: Army Post Office or MPO: Military Post Office",
                            "example": "APO",
                            "enum": [
                                "APO",
                                "MPO",
                                "PO",
                                "Business",
                                "Residence"
                            ]
                        },
                        "weight": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "cartValue": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "dimension": {
                            "$ref": "#/components/schemas/minMaxDimensions"
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                                "example": {
                                    "carrier": "FedEx",
                                    "type": "Next Day"
                                }
                            },
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "carrier": "FedEx",
                                "type": "Next Day"
                            }
                        },
                        "isDeleted": {
                            "type": "boolean",
                            "description": "true: Shipping method is deleted <br> false: Shipping method is not deleted",
                            "example": false
                        }
                    },
                    "description": "Details to update shipping method"
                },
                "createShippingMethodRequest": {
                    "required": [
                        "code",
                        "name"
                    ],
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "Shipping method code such as Same Day Delivery (SDD), Standard Shipping (STH), etc.",
                            "example": "SDD"
                        },
                        "name": {
                            "type": "string",
                            "description": "Shipping method name",
                            "example": "Express Delivery"
                        },
                        "description": {
                            "type": "string",
                            "description": "Brief description of shipping method",
                            "example": "Express Delivery 2 - 5 days"
                        },
                        "taxCode": {
                            "type": "string",
                            "description": "Tax code associated with a shipping method. Depends on the applicable tax laws and regulations in each jurisdiction.",
                            "example": "FR01"
                        },
                        "minimumDays": {
                            "type": "integer",
                            "description": "Minimum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 2
                        },
                        "maximumDays": {
                            "type": "integer",
                            "description": "Maximum duration required to deliver an order starting from the time it is placed",
                            "format": "int32",
                            "example": 5
                        },
                        "cutoffTime": {
                            "type": "integer",
                            "description": "Time at which the current 'order day' is over. <p> **Note**: If an order is delivered after the cutoff time, it is considered as delivered the next working day. For example, if the cutoff time is set to 5:00 PM, any orders delivered after this time will be considered to have been delivered the following business day.",
                            "format": "int32",
                            "example": 1330
                        },
                        "cost": {
                            "type": "number",
                            "description": "Shipping cost given by merchant",
                            "format": "double",
                            "example": 20.5
                        },
                        "region": {
                            "type": "string",
                            "description": "State or region of delivery",
                            "example": "CA"
                        },
                        "createdBy": {
                            "type": "string",
                            "description": "User (ID or name) who created the shipping method",
                            "example": "User1"
                        },
                        "carrier": {
                            "type": "string",
                            "description": "Shipping carrier name",
                            "example": "FedEx"
                        },
                        "currency": {
                            "type": "string",
                            "description": "Three-letter currency code as defined by ISO-4217",
                            "example": "USD",
                            "default": "USD"
                        },
                        "addressType": {
                            "type": "string",
                            "description": "Address type. For example - APO: Army Post Office or MPO: Military Post Office",
                            "example": "APO",
                            "enum": [
                                "APO",
                                "MPO",
                                "PO",
                                "Business",
                                "Residence"
                            ]
                        },
                        "weight": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "cartValue": {
                            "$ref": "#/components/schemas/minMaxValues"
                        },
                        "dimension": {
                            "$ref": "#/components/schemas/minMaxDimensions"
                        },
                        "attributes": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                                "example": {
                                    "carrier": "FedEx",
                                    "type": "Next Day"
                                }
                            },
                            "description": "User defined custom attributes. This is a placeholder for addition info (in key: value pairs)",
                            "example": {
                                "carrier": "FedEx",
                                "type": "Next Day"
                            }
                        }
                    },
                    "description": "Details to create shipping method"
                },
                "shippingMethodItemsRequest": {
                    "required": [
                        "itemIds"
                    ],
                    "type": "object",
                    "properties": {
                        "itemIds": {
                            "maxItems": 50,
                            "minItems": 1,
                            "type": "array",
                            "description": "Item IDs associated with a shipping method",
                            "example": [
                                111223,
                                224444
                            ],
                            "items": {
                                "type": "integer",
                                "description": "Shipping methods items",
                                "format": "int32",
                                "example": 111223
                            }
                        }
                    },
                    "description": "Items to be associated with a shipping method"
                },
                "shippingMethodItemResource": {
                    "required": [
                        "itemId",
                        "shippingMethodId"
                    ],
                    "type": "object",
                    "properties": {
                        "shippingMethodId": {
                            "type": "string",
                            "description": "24-character system-generated shipping method ID",
                            "example": "5349b4ddd2781d08c09890f4"
                        },
                        "itemId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Item ID",
                            "example": 1234
                        },
                        "isDeleted": {
                            "type": "boolean",
                            "description": "true: Shipping method is deleted <br> false: Shipping method is not deleted",
                            "example": false
                        }
                    },
                    "description": "Details to add items to or delete items from shipping method"
                },
                "shippingMethodItemsResponse": {
                    "required": [
                        "shippingMethodItems"
                    ],
                    "type": "object",
                    "properties": {
                        "shippingMethodItems": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/shippingMethodItemResource"
                            }
                        }
                    },
                    "description": "Details to add items to or delete items from shipping method"
                },
                "shippingMethodSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]shippingMethod\\.[a-zA-Z.\\-_]*)(,([+-]shippingMethod\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Field or property name to sort the results. + represents ascending and - represents descending order of sorting",
                            "example": "+shippingMethod.createdAt",
                            "default": "-shippingMethod.createdAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Search criteria",
                    "example": {
                        "sort": "-shippingMethod.createdAt",
                        "filters": [
                            {
                                "field": "shippingMethod.addressType",
                                "value": "APO",
                                "condition": "EQ"
                            },
                            {
                                "field": "shippingMethod.maximumDays",
                                "values": [
                                    10,
                                    20
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "shippingMethodsSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^shippingMethod\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "shippingMethod.addressType"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Search condition to apply filter",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Search criteria to to search shipping methods. If shipping methods are searched using a single value, valueSearchFilter is considered. If shipping methods are searched using multiple values, valuesSearchFilter is considered",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "shippingMethodsSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/shippingMethod"
                            }
                        }
                    },
                    "description": "Search response"
                },
                "shippingMethodsResponse": {
                    "type": "object",
                    "properties": {
                        "shippingMethods": {
                            "type": "array",
                            "description": "Details of shipping methods",
                            "items": {
                                "$ref": "#/components/schemas/shippingMethod"
                            }
                        }
                    },
                    "description": "List of shipping methods and their details"
                },
                "shippingMethodItemIdsResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "description": "Item IDs",
                            "items": {
                                "type": "string",
                                "description": "Item",
                                "example": "1233434"
                            }
                        }
                    },
                    "description": "Item IDs associated with a shipping method"
                },
                "customHeader": {
                    "type": "object",
                    "properties": {
                        "headerName": {
                            "type": "string",
                            "description": "Merchant defined header name",
                            "example": "Accept"
                        },
                        "headerValue": {
                            "type": "string",
                            "description": "Merchant defined header value",
                            "example": "application/json"
                        },
                        "isSecret": {
                            "type": "boolean",
                            "description": "true: Stores the `headerName` and `headerValue` in encrypted format<br/>false: `headerName` and `headerValue` are stored as plain text",
                            "default": false,
                            "example": false
                        }
                    },
                    "description": "Custom header details"
                },
                "updateWebhookDefinitionRequest": {
                    "required": [
                        "events",
                        "protocol",
                        "requestType",
                        "source",
                        "target"
                    ],
                    "type": "object",
                    "properties": {
                        "target": {
                            "type": "string",
                            "description": "Target URL to which the webhook sends event message when a subscribed event is modified",
                            "example": "https://www.example.com"
                        },
                        "targetApiKey": {
                            "type": "string",
                            "description": "API key of the target service, if authentication is required",
                            "example": "adfasdWdsaQFSsdf"
                        },
                        "headers": {
                            "type": "array",
                            "description": "Custom header list. These data will be sent to `target`.",
                            "items": {
                                "$ref": "#/components/schemas/customHeader"
                            }
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol used while triggering the webhook",
                            "example": "HTTP",
                            "enum": [
                                "HTTP"
                            ]
                        },
                        "source": {
                            "type": "string",
                            "description": "Source of event trigger",
                            "example": "Orders"
                        },
                        "format": {
                            "type": "string",
                            "description": "Content-type of request body while triggering the webhook",
                            "example": "application/json"
                        },
                        "events": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Events subscription. When the subscribed event is modified, the webhook sends a notification message to the `target`.",
                            "example": [
                                "ORDER_CREATE",
                                "ORDER_CONFIRMED"
                            ],
                            "items": {
                                "maxLength": 2147483647,
                                "minLength": 1,
                                "type": "string",
                                "description": "Webhook events",
                                "example": "ORDER_CREATE",
                                "enum": [
                                    "CROSS_BORDER_VALIDATION",
                                    "ORDER_CREATE",
                                    "ORDER_HOLD_CROSSBORDER",
                                    "ORDER_HOLD_FRAUD",
                                    "ORDER_HOLD_CSR",
                                    "ORDER_CONFIRMED",
                                    "ORDER_IN_PROGRESS",
                                    "ORDER_CANCEL",
                                    "ORDER_EXCHANGE",
                                    "FRAUD_CANCEL",
                                    "FRAUD_RELEASE",
                                    "ORDER_PARTIALLY_RETURNED",
                                    "RETURN_PENDING",
                                    "RETURN_PROCESSING",
                                    "RETURN_REJECTED",
                                    "ORDER_CANCELLED",
                                    "ORDER_PARTIALLY_CANCELLED",
                                    "ORDER_RETURNED",
                                    "ORDER_SHIPPED",
                                    "EXCHANGE_PENDING",
                                    "EXCHANGE_TO_SHIPMENT",
                                    "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_CONFIRMATION_EMAIL",
                                    "SHIPPING_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_READY_FOR_PICKUP",
                                    "BOPIS_ORDER_COMPLETED",
                                    "BOPIS_REMINDER_EMAIL",
                                    "BACKORDER_NOTIFICATION_EMAIL",
                                    "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_CANCEL_EMAIL",
                                    "BACKORDER_AUTH_DECLINE_EMAIL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                                    "RETURN_NOTIFICATION_EMAIL",
                                    "REFUND_NOTIFICATION_EMAIL",
                                    "APPEASEMENT_NOTIFICATION_EMAIL",
                                    "ORDER_CREATE_IN_PTS",
                                    "ORDER_CANCELLED_IN_PTS",
                                    "SHIPMENT_CREATE_IN_PTS",
                                    "SHIPMENT_CANCELLED_IN_PTS",
                                    "RETURN_LPN",
                                    "ALLOCATION_CREATE",
                                    "ALLOCATION_DC",
                                    "ALLOCATION_CREATE_SDD",
                                    "ALLOCATION_CREATE_BOPIS",
                                    "ALLOCATION_CREATE_SHIP",
                                    "ALLOCATION_CREATE_GIFTCARD",
                                    "TRANSFER_CREATE",
                                    "ALLOCATION_CREATE_INTERNATIONAL",
                                    "SHIPMENT_CREATED",
                                    "SHIPMENT_CANCELLED",
                                    "GIFTCARD_ACTIVATE",
                                    "PICKUP_CREATED",
                                    "PICKUP_COMPLETED",
                                    "SHIPMENT_UPDATE",
                                    "INVOICE_POSTING",
                                    "INVENTORY_CREATE",
                                    "INVENTORY_UPDATE",
                                    "INVENTORY_BULK",
                                    "INVENTORY_NETWORK_UPDATED",
                                    "INVENTORY_NETWORK_AGGREGATION",
                                    "LIST_UPDATE",
                                    "EXPORT_ORDER_INITIATED",
                                    "EXPORT_ORDER_COMPLETED",
                                    "EXPORT_ORDER_ERROR",
                                    "EXPORT_ALLOCATION_INITIATED",
                                    "EXPORT_ALLOCATION_COMPLETED",
                                    "EXPORT_ALLOCATION_ERROR",
                                    "EXPORT_SHIPMENT_INITIATED",
                                    "EXPORT_SHIPMENT_COMPLETED",
                                    "EXPORT_SHIPMENT_ERROR",
                                    "EXPORT_INVOICE_INITIATED",
                                    "EXPORT_INVOICE_COMPLETED",
                                    "EXPORT_INVOICE_ERROR",
                                    "EXPORT_LOCATION_INITIATED",
                                    "EXPORT_LOCATION_COMPLETED",
                                    "EXPORT_LOCATION_ERROR",
                                    "EXPORT_INVENTORY_INITIATED",
                                    "EXPORT_INVENTORY_COMPLETED",
                                    "EXPORT_INVENTORY_ERROR",
                                    "EXPORT_NETWORK_INITIATED",
                                    "EXPORT_NETWORK_COMPLETED",
                                    "EXPORT_NETWORK_ERROR",
                                    "EXPORT_SHIPPING_METHODS_INITIATED",
                                    "EXPORT_SHIPPING_METHODS_COMPLETED",
                                    "EXPORT_SHIPPING_METHODS_ERROR",
                                    "EXPORT_AGGREGATED_NETWORK_INITIATED",
                                    "EXPORT_AGGREGATED_NETWORK_COMPLETED",
                                    "EXPORT_AGGREGATED_NETWORK_ERROR",
                                    "CREDIT_CONFIRMED",
                                    "CREDIT_PENDING",
                                    "CREDIT_FAILED",
                                    "CREDIT_CANCELED"
                                ]
                            }
                        },
                        "requestType": {
                            "type": "string",
                            "description": "Type of HTTP method used when triggering an event to the target",
                            "example": "PATCH",
                            "enum": [
                                "POST",
                                "PUT",
                                "PATCH",
                                "GET",
                                "DELETE"
                            ]
                        }
                    },
                    "description": "Request to update webhook"
                },
                "webhookDefinitionResponse": {
                    "required": [
                        "events",
                        "protocol",
                        "requestType",
                        "source",
                        "target"
                    ],
                    "type": "object",
                    "properties": {
                        "webhookId": {
                            "type": "string",
                            "description": "Unique webhook ID to identify the webhook",
                            "example": "a3wefds4fsafew"
                        },
                        "tenantId": {
                            "type": "string",
                            "description": "Merchant's 24 character tenant ID",
                            "example": "5f328bf0b5f328bf0b5f328b"
                        },
                        "target": {
                            "type": "string",
                            "description": "Target URL to which the webhook sends event message when a subscribed event is modified",
                            "example": "https://www.example.com"
                        },
                        "targetApiKey": {
                            "type": "string",
                            "description": "API key of the target service, if authentication is required",
                            "example": "adfasdWdsaQFSsdf"
                        },
                        "headers": {
                            "type": "array",
                            "description": "Custom header list. These data will be sent to `target`.",
                            "items": {
                                "$ref": "#/components/schemas/customHeader"
                            }
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol used while triggering the webhook",
                            "example": "HTTP",
                            "enum": [
                                "HTTP"
                            ]
                        },
                        "source": {
                            "type": "string",
                            "description": "Source of event trigger",
                            "example": "Orders"
                        },
                        "format": {
                            "type": "string",
                            "description": "Content-type of request body while triggering the webhook",
                            "example": "application/json"
                        },
                        "createdAt": {
                            "type": "string",
                            "description": "Date and time when the webhook was created",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "description": "Date and time when the webhook was last updated",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "events": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Events subscription. When the subscribed event is modified, the webhook sends a notification message to the `target`.",
                            "example": [
                                "ORDER_CREATE",
                                "ORDER_CONFIRMED"
                            ],
                            "items": {
                                "maxLength": 2147483647,
                                "minLength": 1,
                                "type": "string",
                                "description": "Webhook events",
                                "example": "ORDER_CREATE",
                                "enum": [
                                    "CROSS_BORDER_VALIDATION",
                                    "ORDER_CREATE",
                                    "ORDER_HOLD_CROSSBORDER",
                                    "ORDER_HOLD_FRAUD",
                                    "ORDER_HOLD_CSR",
                                    "ORDER_CONFIRMED",
                                    "ORDER_IN_PROGRESS",
                                    "ORDER_CANCEL",
                                    "ORDER_EXCHANGE",
                                    "FRAUD_CANCEL",
                                    "FRAUD_RELEASE",
                                    "ORDER_PARTIALLY_RETURNED",
                                    "RETURN_PENDING",
                                    "RETURN_PROCESSING",
                                    "RETURN_REJECTED",
                                    "ORDER_CANCELLED",
                                    "ORDER_PARTIALLY_CANCELLED",
                                    "ORDER_RETURNED",
                                    "ORDER_SHIPPED",
                                    "EXCHANGE_PENDING",
                                    "EXCHANGE_TO_SHIPMENT",
                                    "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_CONFIRMATION_EMAIL",
                                    "SHIPPING_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_READY_FOR_PICKUP",
                                    "BOPIS_ORDER_COMPLETED",
                                    "BOPIS_REMINDER_EMAIL",
                                    "BACKORDER_NOTIFICATION_EMAIL",
                                    "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_CANCEL_EMAIL",
                                    "BACKORDER_AUTH_DECLINE_EMAIL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                                    "RETURN_NOTIFICATION_EMAIL",
                                    "REFUND_NOTIFICATION_EMAIL",
                                    "APPEASEMENT_NOTIFICATION_EMAIL",
                                    "ORDER_CREATE_IN_PTS",
                                    "ORDER_CANCELLED_IN_PTS",
                                    "SHIPMENT_CREATE_IN_PTS",
                                    "SHIPMENT_CANCELLED_IN_PTS",
                                    "RETURN_LPN",
                                    "ALLOCATION_CREATE",
                                    "ALLOCATION_DC",
                                    "ALLOCATION_CREATE_SDD",
                                    "ALLOCATION_CREATE_BOPIS",
                                    "ALLOCATION_CREATE_SHIP",
                                    "ALLOCATION_CREATE_GIFTCARD",
                                    "TRANSFER_CREATE",
                                    "ALLOCATION_CREATE_INTERNATIONAL",
                                    "SHIPMENT_CREATED",
                                    "SHIPMENT_CANCELLED",
                                    "GIFTCARD_ACTIVATE",
                                    "PICKUP_CREATED",
                                    "PICKUP_COMPLETED",
                                    "SHIPMENT_UPDATE",
                                    "INVOICE_POSTING",
                                    "INVENTORY_CREATE",
                                    "INVENTORY_UPDATE",
                                    "INVENTORY_BULK",
                                    "INVENTORY_NETWORK_UPDATED",
                                    "INVENTORY_NETWORK_AGGREGATION",
                                    "LIST_UPDATE",
                                    "EXPORT_ORDER_INITIATED",
                                    "EXPORT_ORDER_COMPLETED",
                                    "EXPORT_ORDER_ERROR",
                                    "EXPORT_ALLOCATION_INITIATED",
                                    "EXPORT_ALLOCATION_COMPLETED",
                                    "EXPORT_ALLOCATION_ERROR",
                                    "EXPORT_SHIPMENT_INITIATED",
                                    "EXPORT_SHIPMENT_COMPLETED",
                                    "EXPORT_SHIPMENT_ERROR",
                                    "EXPORT_INVOICE_INITIATED",
                                    "EXPORT_INVOICE_COMPLETED",
                                    "EXPORT_INVOICE_ERROR",
                                    "EXPORT_LOCATION_INITIATED",
                                    "EXPORT_LOCATION_COMPLETED",
                                    "EXPORT_LOCATION_ERROR",
                                    "EXPORT_INVENTORY_INITIATED",
                                    "EXPORT_INVENTORY_COMPLETED",
                                    "EXPORT_INVENTORY_ERROR",
                                    "EXPORT_NETWORK_INITIATED",
                                    "EXPORT_NETWORK_COMPLETED",
                                    "EXPORT_NETWORK_ERROR",
                                    "EXPORT_SHIPPING_METHODS_INITIATED",
                                    "EXPORT_SHIPPING_METHODS_COMPLETED",
                                    "EXPORT_SHIPPING_METHODS_ERROR",
                                    "EXPORT_AGGREGATED_NETWORK_INITIATED",
                                    "EXPORT_AGGREGATED_NETWORK_COMPLETED",
                                    "EXPORT_AGGREGATED_NETWORK_ERROR",
                                    "CREDIT_CONFIRMED",
                                    "CREDIT_PENDING",
                                    "CREDIT_FAILED",
                                    "CREDIT_CANCELED"
                                ]
                            }
                        },
                        "requestType": {
                            "type": "string",
                            "description": "Type of HTTP method used when triggering an event to the target",
                            "example": "PATCH",
                            "enum": [
                                "POST",
                                "PUT",
                                "PATCH",
                                "GET",
                                "DELETE"
                            ]
                        }
                    },
                    "description": "Webhook definition response"
                },
                "createWebhookDefinitionRequest": {
                    "required": [
                        "events",
                        "protocol",
                        "requestType",
                        "source",
                        "target"
                    ],
                    "type": "object",
                    "properties": {
                        "target": {
                            "type": "string",
                            "description": "Target URL to which the webhook sends event message when a subscribed event is modified",
                            "example": "https://www.example.com"
                        },
                        "targetApiKey": {
                            "type": "string",
                            "description": "API key of the target service, if authentication is required",
                            "example": "adfasdWdsaQFSsdf"
                        },
                        "headers": {
                            "type": "array",
                            "description": "Custom header list. These data will be sent to `target`.",
                            "items": {
                                "$ref": "#/components/schemas/customHeader"
                            }
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Protocol used while triggering the webhook",
                            "example": "HTTP",
                            "enum": [
                                "HTTP"
                            ]
                        },
                        "source": {
                            "type": "string",
                            "description": "Source of event trigger",
                            "example": "Orders"
                        },
                        "format": {
                            "type": "string",
                            "description": "Content-type of request body while triggering the webhook",
                            "example": "application/json"
                        },
                        "events": {
                            "maxItems": 2147483647,
                            "minItems": 1,
                            "type": "array",
                            "description": "Events subscription. When the subscribed event is modified, the webhook sends a notification message to the `target`.",
                            "example": [
                                "ORDER_CREATE",
                                "ORDER_CONFIRMED"
                            ],
                            "items": {
                                "maxLength": 2147483647,
                                "minLength": 1,
                                "type": "string",
                                "description": "Webhook events",
                                "example": "ORDER_CREATE",
                                "enum": [
                                    "CROSS_BORDER_VALIDATION",
                                    "ORDER_CREATE",
                                    "ORDER_HOLD_CROSSBORDER",
                                    "ORDER_HOLD_FRAUD",
                                    "ORDER_HOLD_CSR",
                                    "ORDER_CONFIRMED",
                                    "ORDER_IN_PROGRESS",
                                    "ORDER_CANCEL",
                                    "ORDER_EXCHANGE",
                                    "FRAUD_CANCEL",
                                    "FRAUD_RELEASE",
                                    "ORDER_PARTIALLY_RETURNED",
                                    "RETURN_PENDING",
                                    "RETURN_PROCESSING",
                                    "RETURN_REJECTED",
                                    "ORDER_CANCELLED",
                                    "ORDER_PARTIALLY_CANCELLED",
                                    "ORDER_RETURNED",
                                    "ORDER_SHIPPED",
                                    "EXCHANGE_PENDING",
                                    "EXCHANGE_TO_SHIPMENT",
                                    "SINGLE_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "MULTI_ITEM_ORDER_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_CONFIRMATION_EMAIL",
                                    "SHIPPING_CONFIRMATION_EMAIL",
                                    "BOPIS_ORDER_READY_FOR_PICKUP",
                                    "BOPIS_ORDER_COMPLETED",
                                    "BOPIS_REMINDER_EMAIL",
                                    "BACKORDER_NOTIFICATION_EMAIL",
                                    "BACKORDER_30_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_53_DAYS_CONSENT_TO_DELAY_EMAIL",
                                    "BACKORDER_CANCEL_EMAIL",
                                    "BACKORDER_AUTH_DECLINE_EMAIL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_ITEM_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_WEBCSC_ORDER_CANCEL",
                                    "ORDER_CANCELLATION_EMAIL_LOCATE_ORDER_ITEM_CANCEL",
                                    "RETURN_NOTIFICATION_EMAIL",
                                    "REFUND_NOTIFICATION_EMAIL",
                                    "APPEASEMENT_NOTIFICATION_EMAIL",
                                    "ORDER_CREATE_IN_PTS",
                                    "ORDER_CANCELLED_IN_PTS",
                                    "SHIPMENT_CREATE_IN_PTS",
                                    "SHIPMENT_CANCELLED_IN_PTS",
                                    "RETURN_LPN",
                                    "ALLOCATION_CREATE",
                                    "ALLOCATION_DC",
                                    "ALLOCATION_CREATE_SDD",
                                    "ALLOCATION_CREATE_BOPIS",
                                    "ALLOCATION_CREATE_SHIP",
                                    "ALLOCATION_CREATE_GIFTCARD",
                                    "TRANSFER_CREATE",
                                    "ALLOCATION_CREATE_INTERNATIONAL",
                                    "SHIPMENT_CREATED",
                                    "SHIPMENT_CANCELLED",
                                    "GIFTCARD_ACTIVATE",
                                    "PICKUP_CREATED",
                                    "PICKUP_COMPLETED",
                                    "SHIPMENT_UPDATE",
                                    "INVOICE_POSTING",
                                    "INVENTORY_CREATE",
                                    "INVENTORY_UPDATE",
                                    "INVENTORY_BULK",
                                    "INVENTORY_NETWORK_UPDATED",
                                    "INVENTORY_NETWORK_AGGREGATION",
                                    "LIST_UPDATE",
                                    "EXPORT_ORDER_INITIATED",
                                    "EXPORT_ORDER_COMPLETED",
                                    "EXPORT_ORDER_ERROR",
                                    "EXPORT_ALLOCATION_INITIATED",
                                    "EXPORT_ALLOCATION_COMPLETED",
                                    "EXPORT_ALLOCATION_ERROR",
                                    "EXPORT_SHIPMENT_INITIATED",
                                    "EXPORT_SHIPMENT_COMPLETED",
                                    "EXPORT_SHIPMENT_ERROR",
                                    "EXPORT_INVOICE_INITIATED",
                                    "EXPORT_INVOICE_COMPLETED",
                                    "EXPORT_INVOICE_ERROR",
                                    "EXPORT_LOCATION_INITIATED",
                                    "EXPORT_LOCATION_COMPLETED",
                                    "EXPORT_LOCATION_ERROR",
                                    "EXPORT_INVENTORY_INITIATED",
                                    "EXPORT_INVENTORY_COMPLETED",
                                    "EXPORT_INVENTORY_ERROR",
                                    "EXPORT_NETWORK_INITIATED",
                                    "EXPORT_NETWORK_COMPLETED",
                                    "EXPORT_NETWORK_ERROR",
                                    "EXPORT_SHIPPING_METHODS_INITIATED",
                                    "EXPORT_SHIPPING_METHODS_COMPLETED",
                                    "EXPORT_SHIPPING_METHODS_ERROR",
                                    "EXPORT_AGGREGATED_NETWORK_INITIATED",
                                    "EXPORT_AGGREGATED_NETWORK_COMPLETED",
                                    "EXPORT_AGGREGATED_NETWORK_ERROR",
                                    "CREDIT_CONFIRMED",
                                    "CREDIT_PENDING",
                                    "CREDIT_FAILED",
                                    "CREDIT_CANCELED"
                                ]
                            }
                        },
                        "requestType": {
                            "type": "string",
                            "description": "Type of HTTP method used when triggering an event to the target",
                            "example": "PATCH",
                            "enum": [
                                "POST",
                                "PUT",
                                "PATCH",
                                "GET",
                                "DELETE"
                            ]
                        }
                    },
                    "description": "Details to create webhook"
                },
                "webhookSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^webhook\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "webhook.events"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to search webhooks. To search using a single value, `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "webhookSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]webhook\\.[a-zA-Z.\\-_]*)(,([+-]webhook\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is sorted. <p> **Note**: `-` refers to descending and `+` refers to ascending order.",
                            "example": "+webhook.createdAt",
                            "default": "-webhook.createdAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Sample request to search webhooks",
                    "example": {
                        "sort": "-webhook.createdAt",
                        "filters": [
                            {
                                "field": "webhook.protocol",
                                "value": "HTTP",
                                "condition": "EQ"
                            },
                            {
                                "field": "webhook.events",
                                "values": [
                                    "ALLOCATION*",
                                    "SHIPMENT*"
                                ],
                                "condition": "IN"
                            }
                        ]
                    }
                },
                "webhooksSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/webhookDefinitionResponse"
                            }
                        }
                    },
                    "description": "Webhook search response"
                },
                "eventLogSearchFilter": {
                    "required": [
                        "condition",
                        "field"
                    ],
                    "type": "object",
                    "properties": {
                        "field": {
                            "pattern": "^eventLog\\.[a-zA-Z.\\-_]*",
                            "type": "string",
                            "description": "Field name",
                            "example": "eventLog.event"
                        },
                        "condition": {
                            "type": "string",
                            "description": "Filter conditions. <br> EQ (Equal to): Searches for exact match. <br> NEQ (Not equal to): Searches by excluding the specified value. <br> IN: Search for multiple values. <br> NIN (Not IN): Excludes the specified values in the search. LT (Less than): Searches for values that are less than the specified value. GT (Greater than):  Search for values that are greater than the specified value. LTE (Less than or equal to): Searches for values that are less than or equal to the specified value. GTE (Greater than or equal to): Searches for values that are greater than or equal to the specified value.",
                            "example": "EQ",
                            "default": "EQ",
                            "enum": [
                                "EQ",
                                "NEQ",
                                "IN",
                                "NIN",
                                "LT",
                                "GT",
                                "LTE",
                                "GTE"
                            ]
                        }
                    },
                    "description": "Criteria to find webhook event log. To search using a single value, the `valueSearchFilter` is considered. To search using multiple values, `valuesSearchFilter` is considered.",
                    "discriminator": {
                        "propertyName": "condition",
                        "mapping": {
                            "EQ": "#/components/schemas/valueSearchFilter",
                            "NEQ": "#/components/schemas/valueSearchFilter",
                            "LT": "#/components/schemas/valueSearchFilter",
                            "GT": "#/components/schemas/valueSearchFilter",
                            "LTE": "#/components/schemas/valueSearchFilter",
                            "GTE": "#/components/schemas/valueSearchFilter",
                            "IN": "#/components/schemas/valuesSearchFilter",
                            "NIN": "#/components/schemas/valuesSearchFilter"
                        }
                    }
                },
                "webhookEventLogSearchRequest": {
                    "required": [
                        "filters"
                    ],
                    "type": "object",
                    "properties": {
                        "sort": {
                            "pattern": "(^[+-]eventLog\\.[a-zA-Z.\\-_]*)(,([+-]eventLogs\\.[a-zA-Z.\\-_]*)){0,}",
                            "type": "string",
                            "description": "Property by which data is searched",
                            "example": "+eventLog.firstEventTriggeredAt",
                            "default": "-eventLog.firstEventTriggeredAt"
                        },
                        "filters": {
                            "maxItems": 50,
                            "minItems": 0,
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/valueSearchFilter"
                                    },
                                    {
                                        "$ref": "#/components/schemas/valuesSearchFilter"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Webhooks event log search request",
                    "example": {
                        "sort": "+eventLog.firstEventTriggeredAt",
                        "filters": [
                            {
                                "field": "eventLog.logs.webhookId",
                                "value": "63c1661635431d2150956e8e",
                                "condition": "EQ"
                            },
                            {
                                "field": "eventLog.status",
                                "value": "FAILED",
                                "condition": "EQ"
                            }
                        ]
                    }
                },
                "eventResponseInfoResource": {
                    "type": "object",
                    "properties": {
                        "statusCode": {
                            "type": "integer",
                            "description": "Status code of the triggered event",
                            "format": "int32",
                            "example": 502
                        },
                        "triggeredStatus": {
                            "type": "string",
                            "description": "Status of the triggered event",
                            "example": "FAILED",
                            "enum": [
                                "SUCCESS",
                                "FAILED"
                            ]
                        },
                        "triggeredAt": {
                            "type": "string",
                            "description": "Date and time when the event was triggered",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "messageId": {
                            "type": "string",
                            "description": "Message ID associated with the triggered event",
                            "example": "e89b-12d3-a456-426dsr6141"
                        },
                        "errorMessage": {
                            "type": "string",
                            "description": "Error Message",
                            "example": "Request timed out"
                        }
                    },
                    "description": "Event response"
                },
                "logInfoResource": {
                    "type": "object",
                    "properties": {
                        "webhookId": {
                            "type": "string",
                            "description": "Unique webhook ID to identify the webhook",
                            "example": "a34rf3asdf43rqwer"
                        },
                        "status": {
                            "type": "string",
                            "description": "Webhook's status, identified by webhookId",
                            "example": "PENDING",
                            "enum": [
                                "PENDING",
                                "TRIGGERED",
                                "SUCCESS",
                                "FAILED",
                                "EXCEPTION_OCCURRED"
                            ]
                        },
                        "eventResponses": {
                            "type": "array",
                            "description": "Response information",
                            "items": {
                                "$ref": "#/components/schemas/eventResponseInfoResource"
                            }
                        }
                    },
                    "description": "Webhook event log information"
                },
                "webhookEventLogsResponse": {
                    "type": "object",
                    "properties": {
                        "eventRequestId": {
                            "type": "string",
                            "description": "Event request ID",
                            "example": "d1d7fc0a-9646-48f7-fbe4-0a58ea2cc4b9"
                        },
                        "channelId": {
                            "type": "string",
                            "description": "Channel ID",
                            "example": "WHBM"
                        },
                        "tenantId": {
                            "type": "string",
                            "description": "Tenant ID",
                            "example": "a3wefds4fsafew"
                        },
                        "event": {
                            "type": "string",
                            "description": "Event name",
                            "example": "ORDER_CREATE"
                        },
                        "payload": {
                            "type": "object",
                            "description": "Payload corresponding to the event",
                            "example": {
                                "orderId": "asdfrewfdscefwdsc"
                            }
                        },
                        "firstEventTriggeredAt": {
                            "type": "string",
                            "description": "Date and time when the first event was triggered",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "lastEventTriggeredAt": {
                            "type": "string",
                            "description": "Date and time when the last event was triggered",
                            "format": "date-time",
                            "example": "2022-07-11T15:03:14.642Z"
                        },
                        "status": {
                            "type": "string",
                            "description": "Status of the webhook event that is triggered to the target URL. Based on the status, either the retry webhook happens automatically (if it is enabled) or you can manually re-trigger the webhook using the `POST/webhooks/actions/retry` endpoint.",
                            "example": "PENDING",
                            "enum": [
                                "PENDING",
                                "TRIGGERED",
                                "SUCCESS",
                                "FAILED",
                                "EXCEPTION_OCCURRED"
                            ]
                        },
                        "retryCount": {
                            "type": "integer",
                            "description": "Number of times the webhook was re-triggered",
                            "format": "int32",
                            "example": 1
                        },
                        "logs": {
                            "type": "array",
                            "description": "Logs of webhook events",
                            "items": {
                                "$ref": "#/components/schemas/logInfoResource"
                            }
                        },
                        "isAutomaticRetryEnabled": {
                            "type": "boolean",
                            "example": true,
                            "description": "true: Webhook is automatically re-triggered in case the webhook triggering fails<br> false: Webhook should be manually re-triggered in case the webhook triggering fails"
                        }
                    },
                    "description": "Details of event logs"
                },
                "webhookEventLogsSearchResponse": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/components/schemas/pagination"
                        },
                        "data": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/webhookEventLogsResponse"
                            }
                        }
                    },
                    "description": "Webhook event logs search response"
                },
                "webhookRetryRequestBody": {
                    "required": [
                        "event",
                        "eventRequestId",
                        "payload"
                    ],
                    "type": "object",
                    "properties": {
                        "eventRequestId": {
                            "type": "string",
                            "description": "Event request ID",
                            "example": "d1d7fc0a-9646-48f7-fbe4-0a58ea2cc4b9"
                        },
                        "event": {
                            "type": "string",
                            "description": "Event name",
                            "example": "ORDER_CREATE"
                        },
                        "payload": {
                            "type": "object",
                            "description": "Payload",
                            "example": {
                                "orderId": "asdfrewfdscefwdsc"
                            }
                        }
                    },
                    "description": "Webhook retry request details"
                },
                "retryResponse": {
                    "type": "object",
                    "properties": {
                        "webhookId": {
                            "type": "string",
                            "description": "Unique webhook ID to identify the webhook",
                            "example": "5f689caa4216e7000750d1ef"
                        },
                        "messageId": {
                            "type": "string",
                            "description": "Message ID",
                            "example": "a3wefds4fsafew"
                        },
                        "status": {
                            "type": "string",
                            "description": "Status returned from webhook target",
                            "example": "SUCCESS",
                            "enum": [
                                "SUCCESS",
                                "FAILED"
                            ]
                        }
                    },
                    "description": "Webhook retry response"
                },
                "webhookRetryResponse": {
                    "type": "object",
                    "properties": {
                        "retryResponses": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/retryResponse"
                            }
                        }
                    },
                    "description": "Webhook retry response"
                }
            },
            "parameters": {
                "xFabricTenantId": {
                    "name": "x-fabric-tenant-id",
                    "in": "header",
                    "description": "Merchant's 24-character tenant ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    },
                    "example": "5f328bf0b5f328bf0b5f328b"
                },
                "xFabricChannelId": {
                    "name": "x-fabric-channel-id",
                    "in": "header",
                    "description": "Sales channel ID",
                    "required": true,
                    "schema": {
                        "type": "string"
                    },
                    "example": "12"
                },
                "xFabricChannelIds": {
                    "name": "x-fabric-channel-ids",
                    "in": "header",
                    "description": "Sales channel IDs",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "12, 13, 16"
                },
                "xFabricChannelIdOptional": {
                    "name": "x-fabric-channel-id",
                    "in": "header",
                    "description": "Sales channel ID",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "12"
                },
                "xFabricChannelIdsOptional": {
                    "name": "x-fabric-channel-ids",
                    "in": "header",
                    "description": "Sales channel IDs.<br>**Note:** Use `xFabricChannelIds` for multiple channels, and `xFabricChannelId` for single channel",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "12, 13, 16"
                },
                "xFabricRequestId": {
                    "name": "x-fabric-request-id",
                    "in": "header",
                    "description": "Unique request ID",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "263e731c-45c8-11ed-b878-0242ac120002"
                }
            },
            "headers": {
                "xFabricRequestIdResponseHeader": {
                    "description": "Unique request ID",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "263e731c-45c8-11ed-b878-0242ac120002"
                }
            },
            "securitySchemes": {
                "authorization": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        },
        "security": [
            {
                "authorization": []
            }
        ]
    }